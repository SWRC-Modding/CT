/*
*	FString
*/

public:
	FString() : TArray<TCHAR>(){}

	FString(const TCHAR* In, bool What = false){
		if(In && *In){
			if(!What){
				Realloc(appStrlen(In) + 1, 0);
				appMemcpy(Data, In, Num());
			}else{
				Data = const_cast<TCHAR*>(In);
				ArrayNum = (appStrlen(In) + 1) & 0x1FFFFFFF | 0x20000000;
			}
		}
	}

	FString(ENoInit) : TArray<TCHAR>(E_NoInit){}

	FString(const FString& Other){
		TArray<TCHAR>::operator=(Other);
	}

	FString(const FStringTemp& Other);

	~FString(){
		if(IsAllocated())
			appFree(Data);

		Data = NULL;
		ArrayNum &= 0xE0000000;
	}

	TCHAR& operator[](INT Index){
		return TArray<TCHAR>::operator[](Index);
	}

	const TCHAR& operator[](INT Index) const{
		return TArray<TCHAR>::operator[](Index);
	}

	TArray<TCHAR>& GetCharArray(){
		return static_cast<TArray<TCHAR>&>(*this);
	}

	const TCHAR* operator*() const{
		return Num() > 0 ? GetData() : "";
	}

	FString& operator*=(const TCHAR* Str);

	FString& operator*=(const FString& Str){
		if(Str.Num() > 0)
			return operator*=(*Str);

		return operator*=("");
	}

	bool operator<=(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) <= 0;

		return appStricmp("", Other) <= 0;
	}

	bool operator<=(const FString& Other) const{
		if(Other.Num() > 0)
			return operator<=(*Other);

		return operator<=("");
	}

	bool operator<(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) < 0;

		return appStricmp("", Other) < 0;
	}

	bool operator<(const FString& Other) const{
		if(Other.Num() > 0)
			return operator<(*Other);

		return operator<("");
	}

	bool operator>=(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) >= 0;

		return appStricmp("", Other) >= 0;
	}

	bool operator>=(const FString& Other) const{
		if(Other.Num() > 0)
			return operator>=(*Other);

		return operator>=("");
	}

	bool operator>(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) > 0;

		return appStricmp("", Other) > 0;
	}

	bool operator>(const FString& Other) const{
		if(Other.Num() > 0)
			return operator>(*Other);

		return operator>("");
	}

	bool operator==(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) == 0;

		return appStricmp("", Other) == 0;
	}

	bool operator==(const FString& Other) const{
		if(Other.Num() > 0)
			return operator==(*Other);

		return operator==("");
	}

	bool operator!=(const TCHAR* Other) const{
		if(Num() > 0)
			return appStricmp(GetData(), Other) != 0;

		return appStricmp("", Other) != 0;
	}

	bool operator!=(const FString& Other) const{
		if(Other.Num() > 0)
			return operator!=(Other);

		return operator!=("");
	}

	INT Len() const{
		return Num() ? Num() - 1 : 0;
	}

	INT InStr(const TCHAR* SubStr, bool Right = false) const;/*{
		//TODO: Implement
	}*/

	INT InStr(const FString& SubStr, bool Right = false) const{
		return InStr(*SubStr, Right);
	}

	TCHAR* MakeCharArray(){
		TCHAR* Result = static_cast<TCHAR*>(appMalloc(Len() + 1));

		for(int i = 0; i < Len(); i++){
			if(static_cast<_WORD>((*this)[i]) < 256)
				Result[i] = (*this)[i];
			else
				Result[i] = 127;
		}

		Result[Len()] = '\0';
	}

	FStringTemp Right(INT Count) const;

	void Empty(){
		TArray<TCHAR>::Empty(0);
	}

	void Shrink(){
		TArray<TCHAR>::Shrink();
	}

	FString& operator+=(const TCHAR* Str){
		if(*Str != '\0'){
		    if(Num()){
			    INT Index = Num() - 1;

			    Add(appStrlen(Str));
			    appStrcpy(&(*this)[Index], Str);
		    }else if(*Str){
			    Add(appStrlen(Str) + 1);
			    appStrcpy(&(*this)[0], Str);
		    }
		}

		return *this;
	}

	FString& operator+=(const FString& Str){
		if(Str.Num() > 0)
			return operator+=(*Str);

		return operator+=("");
	}

	FString& operator=(const TCHAR* Other){
		if(Other && *Other != '\0'){
			Realloc(appStrlen(Other) + 1, 0);
			appMemcpy(Data, Other, Num());
		}else{
			Realloc(0, 0);
		}

		return *this;
	}

	FString& operator=(const FString& Other){
		TArray<TCHAR>::operator=(Other);

		return *this;
	}

protected:
	FString(INT Size){
		if(Size)
			Set(Size, Size);
	}

	FString(INT InCount, const TCHAR* InSrc){
		INT Size = InCount ? InCount + 1 : 0;

		if(Size)
			Set(Size, Size);

		if(Num() > 0)
			appStrncpy(GetData(), InSrc, InCount + 1);
	}


/*
*	FStringTemp
*/

public:
	FStringTemp(const TCHAR* In, bool What = false){
		if(*In){
			if(!What){
				Realloc(appStrlen(In) + 1, 0);
				appMemcpy(Data, In, Num());
				ArrayNum |= 0x40000000;
			}else{
				Data = const_cast<TCHAR*>(In);
				ArrayNum = (appStrlen(In) + 1) & 0x1FFFFFFF | 0x20000000;
			}
		}
	}

	FStringTemp(INT Count){
		if(Count)
			Set(Count, Count);

		ArrayNum |= 0x40000000;
	}

	FStringTemp(INT Count, const TCHAR* In) : FString(Count, In){
		ArrayNum |= 0x40000000;
	}

	FStringTemp(const FStringTemp& Other){
		TArray<TCHAR>::operator=(Other);
		ArrayNum |= 0x40000000;
	}

	FStringTemp(const FString& Other){
		TArray<TCHAR>::operator=(Other);
		ArrayNum |= 0x40000000;
	}

	~FStringTemp(){
		if(IsAllocated())
			appFree(Data);

		Data = NULL;
		ArrayNum &= 0xE0000000;
	}