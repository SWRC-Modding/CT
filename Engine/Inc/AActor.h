	//Constructor
	AActor(){}

	//Overrides
	virtual void DebugOutput(class FOutputDevice&);
	virtual void DebugOutputSelf(class FOutputDevice&);
	virtual void Destroy();
	virtual FString GetDescription() const;
	virtual void InitExecution();
	virtual int IsPendingKill();
	virtual bool IsRuntimeStatic();
	virtual void NetDirty(class UProperty* property);
	virtual void PostEditChange();
	virtual void PostEditUndo();
	virtual void PostLoad();
	virtual void PreEditUndo();
	virtual void ProcessEvent(class UFunction* Function, void* Parms, void* UnusedResult = NULL);
	virtual int ProcessRemoteFunction(class UFunction* Function, void* Parms, struct FFrame* Stack);
	virtual void ProcessState(FLOAT DeltaSeconds);
	virtual void Serialize(class FArchive&);

	//Virtual functions
	virtual int Tick(FLOAT DeltaTime, enum ELevelTick TickType);
	virtual int* GetOptimizedRepList(BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, class UActorChannel* Channel);
	virtual void PostEditPaste();
	virtual FVector LOSTestLocation() const;
	virtual class ANavigationPoint* GetAnchor();
	virtual void SnapToNavPt(class ANavigationPoint*);
	virtual class APawn* GetPlayerPawn() const;
	virtual bool IsPlayer() const;
	virtual void ReceiveStimulus(class UStimulus*);
	virtual void FixupSubObjectPointers();
	virtual void DebugAnim(FOutputDevice&);
	virtual float GetNetPriority(FVector&, FVector&, AActor*, float, float);
	virtual float WorldLightRadius() const;
	virtual void PostEditMove();
	virtual void PostEditLoad();
	virtual void PreRaytrace();
	virtual void PostRaytrace();
	virtual void Spawned();
	virtual void PreNetReceive();
	virtual void PostNetReceive();
	virtual void PostNetReceiveLocation();
	virtual class UMaterial* GetSkin(int);
	virtual int ShouldTickInEntry();
	virtual void PostNetSend();
	virtual void PostRender(class FLevelSceneNode* SceneNode, class FRenderInterface* RI);
	virtual FCoords ToLocal() const;
	virtual FCoords ToWorld() const;
	virtual FMatrix LocalToWorld() const;
	virtual FMatrix WorldToLocal() const;
	virtual void PostScriptDestroyed();
	virtual int ShouldTrace(AActor*, unsigned long);
	virtual UPrimitive* GetPrimitive();
	virtual void NotifyBumpEx(AActor*);
	virtual void SetBase(AActor* NewBase, const FVector& NewFloor = FVector(0.0f, 0.0f, 1.0f), UBOOL bNotifyActor = 1);
	virtual void NotifyAnimEnd(int Channel);
	virtual void UpdateAnimation(FLOAT DeltaSeconds);
	virtual void StartAnimPoll();
	virtual int CheckAnimFinished(int Channel);
	virtual void TickAuthoritative(FLOAT DeltaSeconds);
	virtual void TickSimulated(FLOAT DeltaSeconds);
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual bool PlayerControlled() const;
	virtual int IsNetRelevantFor(class APlayerController* RealViewer, AActor* Viewer, const FVector& SrcLocation);
	virtual int DelayScriptReplication(float);
	virtual void RenderEditorInfo(class FLevelSceneNode*, class FRenderInterface*, class FDynamicActor*);
	virtual void RenderEditorSelected(class FLevelSceneNode*, class FRenderInterface*, class FDynamicActor*);
	virtual float GetAmbientVolume(float);
	virtual void PlayOwnedSound(class USound*, int);
	virtual void PlayFootstepSound(unsigned char, unsigned char, class USound*);
	virtual void PlayOwnedFootstepSound(unsigned char, unsigned char, class USound*);
	virtual void SetZone(UBOOL bTest, UBOOL bForceRefresh);
	virtual void SetVolumes();
	virtual void PostBeginPlayEx();
	virtual void PostLoadBeginPlayEx();
	virtual void setPhysics(BYTE NewPhysics, AActor* NewFloor = NULL, const FVector& NewFloorV = FVector(0.0f, 0.0f, 1.0f));
	virtual void performPhysics(FLOAT DeltaSeconds);
	virtual void BoundProjectileVelocity();
	virtual void processHitWall(const FVector& HitNormal, AActor* HitActor, unsigned char);
	virtual void processLanded(const FVector& HitNormal, AActor* HitActor, FLOAT RemainingTime, INT Iterations);
	virtual void physFalling(FLOAT deltaTime, INT Iterations);
	virtual int physRootMotion(FLOAT DeltaTime);
	virtual FRotator FindSlopeRotation(const FVector& FloorNormal, const FRotator& NewRotation);
	virtual void SmoothHitWall(const FVector& HitNormal, AActor* HitActor, unsigned char);
	virtual void stepUp(const FVector&, const FVector&, const FVector&, struct FCheckResult&);
	virtual UBOOL ShrinkCollision(AActor* HitActor);
	virtual struct _McdModel* getKModel() const;
	virtual void physKarma(float);
	virtual void preKarmaStep(float);
	virtual void postKarmaStep();
	virtual void preContactUpdate();
private:
	virtual class UStimulus* GenerateStimulus(enum EStimulusType);
	virtual class UStimulus* GenerateStimulus(enum EStimulusType, FVector&);
public:
	virtual int AddMyMarker(AActor*);
	virtual void PostNavListBuild();
	virtual void ClearMarker();
	virtual void ClearPathReferences();
	virtual AActor* AssociatedLevelGeometry();
	virtual int HasAssociatedLevelGeometry(AActor*);
	virtual void PlayAnim(const struct FPlayAnim&);
	virtual void CheckForErrors();
	virtual void PrePath();
	virtual void PostPath();
	virtual AActor* GetProjectorBase();
	virtual int IsABrush();
	virtual int IsAMover();
	virtual int IsAVolume();
	virtual int IsAPlayerController();
	virtual int IsAPawn();
	virtual int IsAProjectile();
	virtual class APlayerController* GetTopPlayerController();

	using UObject::ProcessEvent; // Prevents the non-virtual ProcessEvent from being shadowed by the virtual override

	// Events
	void AddToSquadInterest();
	void RemoveFromSquadInterest();
	void AddToTargetList();
	void RemoveFromTargetList();
	void ResetCollisionSize();
	UBOOL Move(const FVector& Delta);
	void AnimLoopEnd(FLOAT LoopStart);
	void AnimEnd(INT Channel);
	AActor* SpawnAttachment(FName BoneName, class UClass* ActorClass, class UStaticMesh* Mesh);
	void DestroyAttachment(FName BoneName);
	void KImpact(AActor* Other, const FVector& pos, const FVector& impactVel, const FVector& impactNorm, BYTE MaterialHit);
	void KVelDropBelow();
	void KAtRest();
	void KSkelConvulse();
	void KApplyForce(FVector& Force, FVector& Torque);
	UBOOL KUpdateState(FKRigidBodyState& newState);
	void Destroyed();
	void GainedChild(AActor* Other);
	void LostChild(AActor* Other);
	void Tick(FLOAT DeltaTime);
	void PostNetworkReceive();
	void Trigger(AActor* Other, class APawn* EventInstigator);
	void UnTrigger(AActor* Other, class APawn* EventInstigator);
	void BeginEvent();
	void EndEvent();
	void Timer();
	void HitWall(const FVector& HitNormal, AActor* HitWall, BYTE KindOfMaterial);
	void Falling();
	void Landed(const FVector& HitNormal);
	void ZoneChange(AZoneInfo* NewZone);
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void Touch(AActor* Other);
	void PostTouch(AActor* Other);
	void UnTouch(AActor* Other);
	void Bump(AActor* Other);
	void BaseChange();
	void Attach(AActor* Other);
	void Detach(AActor* Other);
	UBOOL EncroachingOn(AActor* Other);
	void EncroachedBy(AActor* Other);
	void FinishedInterpolation();
	void EndedRotation();
	void UsedBy(class APawn* User);
	void FellOutOfWorld(BYTE KillType);
	void KilledBy(class APawn* EventInstigator, class UClass* DamageType);
	FLOAT TakeDamage(FLOAT Damage, class APawn* EventInstigator, const FVector& HitLocation, const FVector& Momentum, class UClass* DamageType, FName BoneName);
	void TornOff();
	FVector CalcTrajectoryVelocity(const FVector& InitialPosition, const FVector& TargetPosition, FLOAT HorizontalVelocity, UBOOL AllowFlatArcs);
	UBOOL PreTeleport(class ATeleporter* InTeleporter);
	void PostTeleport(class ATeleporter* OutTeleporter);
	void BeginPlay();
	void RenderTexture(class UScriptedTexture* Tex);
	void PreBeginPlay();
	void BroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void PostBeginPlay();
	void SetInitialState();
	void PostLoadBeginPlay();
	void PostNetBeginPlay();
	void HurtRadius(FLOAT DamageAmount, FLOAT DamageRadius, class UClass* DamageType, FLOAT Momentum, const FVector& HitLocation, AActor* ExcludedActor);
	void TravelPreAccept();
	void TravelPostAccept();
	FString GetItemName(const FString& FullName);
	void TriggerEvent(FName EventName, AActor* Other, class APawn* EventInstigator);
	UBOOL IsInVolume(class AVolume* aVolume);
	UBOOL ContainsPartialEvent(const FString& StartOfEventName);
	UBOOL ContainsPartialTag(const FString& StartOfTagName);

	//Functions
	FVector AimLocation() const;
	void AttachProjector(class AProjector* Projector);
	UBOOL AttachToBone(AActor* Attachment, FName BoneName);
	void BeginTouch(AActor* Other);
	void ClearOctreeData();
	void ClearRenderData();
	UBOOL DetachFromBone(AActor* Attachment);
	void DetachProjector(class AProjector* Projector);
	int EditorContainsPartialEvent(const FString&);
	int EditorContainsPartialTag(const FString&);
	void EndTouch(AActor* Other, UBOOL NoNotifySelf);
	void FindBase();
	class FDynamicActor* GetActorRenderData();
	AActor* GetAmbientLightingActor();
	FVector GetAnimRootTranslation(const FName&);
	FVector GetBoneLocation(FName, enum ESpace);
	FRotator GetBoneRotation(FName, enum ESpace);
	FVector GetCylinderExtent() const{ return FVector(CollisionRadius, CollisionRadius, CollisionHeight); }
	AActor* GetHitActor(){ return this; }
	unsigned char GetLastTouchedMaterialType() const;
	FORCEINLINE class ULevel* GetLevel() const{ return XLevel; }
	class FDynamicLight* GetLightRenderData();
	FVector GetMarkerSpotLocation(int);
	void GetNetBuoyancy(FLOAT& NetBuoyancy, FLOAT& NetFluidFriction);
	AActor* GetTopOwner();
	FRotator GetViewRotation();
	UBOOL IsAnimating(int Channel = 0) const;
	UBOOL IsBasedOn(const AActor* Other) const;
	UBOOL IsBlockedBy(const AActor* Other) const;
	UBOOL IsBrush() const;
	UBOOL IsEncroacher() const;
	bool IsHiddenEd();
	UBOOL IsInOctree();
	UBOOL IsInZone(const AZoneInfo* Other) const;
	UBOOL IsJoinedTo(const AActor* Other) const;
	UBOOL IsMovingBrush() const;
	UBOOL IsOverlapping(AActor* Other, FCheckResult* Hit = NULL);
	UBOOL IsOwnedBy(const AActor* TestOwner) const;
	bool IsPlayingAnim(const FName&, const FName&);
	UBOOL IsStaticBrush() const;
	UBOOL IsValidEnemy() const;
	UBOOL IsVolumeBrush() const;
	void KAddForces(const FVector&, const FVector&);
	void KDestroyJointChain(int);
	void KDrawRigidBodyState(struct FKRigidBodyState*, int);
	void KFreezeRagdoll();
	void KGetRigidBodyState(struct FKRigidBodyState*);
	int KIsAwake();
	int KIsRagdollAvailable();
	void KMakeRagdollAvailable();
	void KWake();
	FORCEINLINE FLOAT LifeFraction(){ return Clamp(1.0f - LifeSpan / GetClass()->GetDefaultActor()->LifeSpan, 0.0f, 1.0f); }
	void PlayReplicatedAnim(int);
	class UStimulus* PostStimulusToIndividual(EStimulusType, AActor*);
	class UStimulus* PostStimulusToWorld(EStimulusType);
	class UStimulus* PostStimulusToWorld(EStimulusType, FVector&);
	void ProcessDemoRecFunction(UFunction* Function, void* Parms, FFrame* Stack);
	void ReplicateAnim(int, int, const struct FAnimChannel&, bool);
	void SetCollision(UBOOL NewCollideActors, UBOOL NewBlockActors, UBOOL NewBlockPlayers);
	void SetCollisionSize(FLOAT NewRadius, FLOAT NewHeight);
	void SetDrawScale3D(const FVector& NewScale3D);
	void SetDrawScale(FLOAT NewScale);
	void SetDrawType(EDrawType NewDrawType);
	int SetLocation(const FVector&, int);
	void SetOwner(AActor* Owner);
	int SetRotation(const FRotator&);
	void SetStaticMesh(class UStaticMesh* NewStaticMesh);
	void StopAnimating(int);
	FVector SuggestFallVelocity(const FVector& Dest, const FVector& Start, FLOAT XYSpeed, FLOAT BaseZ, FLOAT JumpZ, FLOAT MaxXYSpeed);
	int TestCanSeeMe(class APlayerController* Viewer);
	void TwoWallAdjust(const FVector& DesiredDir, FVector& Delta, FVector& HitNormal, FVector& OldHitNormal, FLOAT HitTime);
	void UpdateRelativeRotation();
	void UpdateRenderData();
	void UpdateTimers(FLOAT DeltaSeconds);
	int fixedTurn(int current, int desired, int deltaRate);
	int moveSmooth(const FVector& Delta);
	void physKarmaRagDoll(FLOAT DeltaTime);
	void physProjectile(FLOAT deltaTime, INT Iterations);
	void physTrailer(FLOAT DeltaTime);
	void physicsRotation(FLOAT DeltaTime);
	void postKarmaStep_skeletal();
	void preKarmaStep_skeletal(FLOAT DeltaTime);
