/*===========================================================================
	C++ class definitions exported from UnrealScript.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/

#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

/*
 * Actor
 */

enum ETravelType{
    TRAVEL_Absolute,
    TRAVEL_Partial,
    TRAVEL_Relative,
    TRAVEL_MAX
};

enum ELightEffect{
    LE_None,
    LE_TorchWaver,
    LE_FireWaver,
    LE_WateryShimmer,
    LE_Searchlight,
    LE_SlowWave,
    LE_FastWave,
    LE_CloudCast,
    LE_StaticSpot,
    LE_Shock,
    LE_Disco,
    LE_Warp,
    LE_Spotlight,
    LE_NonIncidence,
    LE_Shell,
    LE_OmniBumpMap,
    LE_Interference,
    LE_Cylinder,
    LE_Rotor,
    LE_Sunlight,
    LE_QuadraticNonIncidence,
    LE_MAX
};

enum ELightType{
    LT_None,
    LT_Steady,
    LT_Pulse,
    LT_Blink,
    LT_Flicker,
    LT_Strobe,
    LT_BackdropLight,
    LT_SubtlePulse,
    LT_TexturePaletteOnce,
    LT_TexturePaletteLoop,
    LT_FadeOut,
    LT_Flame,
    LT_MAX
};

enum EMusicTransition{
    MTRAN_None,
    MTRAN_Instant,
    MTRAN_Segue,
    MTRAN_Fade,
    MTRAN_FastFade,
    MTRAN_SlowFade,
    MTRAN_MAX
};

enum ESoundSlot{
    SLOT_None,
    SLOT_Misc,
    SLOT_Pain,
    SLOT_Ambient,
    SLOT_Interact,
    SLOT_Talk,
    SLOT_Interface,
    SLOT_Music,
    SLOT_MAX
};

enum ERenderStyle{
    STY_None,
    STY_Normal,
    STY_Masked,
    STY_Translucent,
    STY_Modulated,
    STY_Alpha,
    STY_Additive,
    STY_Subtractive,
    STY_Particle,
    STY_AlphaZ,
    STY_MAX
};

enum EDrawType{
    DT_None,
    DT_Sprite,
    DT_Mesh,
    DT_Brush,
    DT_RopeSprite,
    DT_VerticalSprite,
    DT_Terraform,
    DT_SpriteAnimOnce,
    DT_StaticMesh,
    DT_DrawType,
    DT_Particle,
    DT_AntiPortal,
    DT_FluidSurface,
    DT_MAX
};

enum ENetRole{
    ROLE_None,
    ROLE_DumbProxy,
    ROLE_SimulatedProxy,
    ROLE_AutonomousProxy,
    ROLE_Authority,
    ROLE_MAX
};

enum EPhysics{
    PHYS_None,
    PHYS_Walking,
    PHYS_Falling,
    PHYS_Swimming,
    PHYS_Flying,
    PHYS_Rotating,
    PHYS_Projectile,
    PHYS_Interpolating,
    PHYS_MovingBrush,
    PHYS_Spider,
    PHYS_Trailer,
    PHYS_Ladder,
    PHYS_RootMotion,
    PHYS_Karma,
    PHYS_KarmaRagDoll,
    PHYS_MAX
};

enum EStimulusGroup{
    SG_WeaponFire,
    SG_WeaponHit,
    SG_CharacterNoise,
    SG_Stunned,
    SG_Explosion,
    SG_GrenadeBounce,
    SG_Died,
    SG_DoorBreach,
    SG_Reloading,
    SG_Flashlight,
    SG_Damaged,
    SG_EnemySpotted,
    SG_Triggered,
    SG_Bumped,
    SG_Targeted,
    SG_LostEnemy,
    SG_KilledSomeone,
    SG_ExplosionLarge,
    SG_MineChirp,
    SG_MAX
};

enum EStimulusType{
    ST_Invalid,
    ST_WeaponFireDefault,
    ST_WeaponFireQuiet,
    ST_WeaponHitDefault,
    ST_CharacterNoiseDefault,
    ST_FootstepSoft,
    ST_FootstepLoud,
    ST_Stunned,
    ST_ExplosionDefault,
    ST_ExplosionLarge,
    ST_GrenadeBounceDefault,
    ST_DiedDefault,
    ST_DiedQuiet,
    ST_DoorBreach,
    ST_DemolitionExplode,
    ST_ProxMineExplode,
    ST_MineChirp,
    ST_JetpackExplosion,
    ST_Reloading,
    ST_Flashlight,
    ST_Damaged,
    ST_EnemySpotted,
    ST_Triggered,
    ST_Bumped,
    ST_Targeted,
    ST_LostEnemy,
    ST_KilledSomeone,
    ST_MAX
};

enum EStimulusResponse{
    SR_None,
    SR_WalkToward,
    SR_RunToward,
    SR_RunAway,
    SR_LookAt,
    SR_Crouch,
    SR_TakeCover,
    SR_Duck,
    SR_Dodge,
    SR_DiveAway,
    SR_ReturnGrenade,
    SR_Bump,
    SR_GrenadeReaction,
    SR_CheckCorpse,
    SR_MeleeStrike,
    SR_Follow,
    SR_ExplosionShield,
    SR_LookAtInstigator,
    SR_RunTowardInstigator,
    SR_MAX
};

enum EDirection{
    DIR_None,
    DIR_Up,
    DIR_Down,
    DIR_Left,
    DIR_Right,
    DIR_Forward,
    DIR_Backward,
    DIR_Auto,
    DIR_MAX
};

enum EDetailMode{
    DM_Low,
    DM_High,
    DM_SuperHigh,
    DM_MAX
};

enum ESoundOcclusion{
    OCCLUSION_Default,
    OCCLUSION_None,
    OCCLUSION_BSP,
    OCCLUSION_StaticMeshes,
    OCCLUSION_MAX
};

enum EMaterialType{
    MT_None,
    MT_Rock,
    MT_Dirt,
    MT_Mud,
    MT_MetalSolid,
    MT_MetalGrate,
    MT_MetalHollow,
    MT_Sand,
    MT_Concrete,
    MT_Wood,
    MT_Forest,
    MT_Brush,
    MT_Puddle,
    MT_Water,
    MT_Marble,
    MT_Debris_GEO,
    MT_Debris_RAS,
    MT_Debris_YYY,
    MT_Glass,
    MT_HumanFlesh,
    MT_TrandoFlesh,
    MT_BugFlesh,
    MT_DroidMetal,
    MT_WookieeFlesh,
    MT_Shield,
    MT_PersonalShield,
    MT_MetalPipe,
    MT_EliteFlesh,
    MT_NoEffectSpawned,
    MT_ShieldGreen,
    MT_MAX
};

enum EBattleEngineBattleCriteria{
    BATTLECRITERIA_Attack,
    BATTLECRITERIA_Proximity,
    BATTLECRITERIA_AttackAndProximity,
    BATTLECRITERIA_MAX
};

enum EMusicFadeType{
    MFT_Linear,
    MFT_Sine,
    MFT_Log,
    MFT_LogInverse,
    MFT_MAX
};

enum EFilterState{
    FS_Maybe,
    FS_Yes,
    FS_No,
    FS_MAX
};

struct FBatchReference{
    INT BatchIndex;
    INT ElementIndex;
};

struct FXboxAddr{
    INT ina;
    INT inaOnline;
    INT wPortOnline;
    BYTE abEnet[6];
    BYTE abOnline[20];
    FString Gamertag;
    FString xuid;
};

struct FNavPtLocator{
    FVector Offset;
    FLOAT Yaw;
};

struct FKRBVec{
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
};

struct FKRigidBodyState{
    FKRBVec Position;
    FQuat Quaternion;
    FKRBVec LinVel;
    FKRBVec AngVel;
};

struct FAnimRep{
    FName AnimSequence;
    BYTE Bone;
    BYTE Priority;
    BYTE RateScale;
    BYTE AnimFrame;
};

#define UCONST_SG_MAX 19
#define UCONST_MAXSTEPHEIGHT 35.0
#define UCONST_MINFLOORZ 0.7
#define UCONST_SIMANIMSIZE 6

class ENGINE_API AActor : public UObject{
public:
	BYTE ShadowAmbient;
	BYTE LightType;
	BYTE LightEffect;
	FLOAT LightBrightness;
	FLOAT LightRadius;
	BYTE LightRadiusInner;
	BYTE LightHue;
	BYTE LightSaturation;
	BYTE LightPeriod;
	BYTE LightPhase;
	BYTE LightCone;
	BYTE Physics;
	BYTE DrawType;
	class UStaticMesh* StaticMesh;
	class AActor* Owner;
	class AActor* Base;
	class FActorRenderDataPtr* ActorRenderData;
	class FLightRenderDataPtr* LightRenderData;
	INT RenderRevision;
	BYTE StaticFilterState;
	TArrayNoInit<FBatchReference> StaticSectionBatches;
	FName ForcedVisibilityZoneTag;
	BITFIELD bLightPriorityOverride:1;
	BITFIELD bLightObstructed:1;
	BITFIELD bSpecialLit:1;
	BITFIELD bActorShadows:1;
	BITFIELD bReceiveDynamicShadows:1;
	BITFIELD bBlobShadow:1;
	BITFIELD bCorona:1;
	BITFIELD bLightingVisibility:1;
	BITFIELD bDisableFog:1;
	BITFIELD bUseDynamicLights:1;
	BITFIELD bLightChanged:1;
	BITFIELD bLightStaticEnv:1;
	BITFIELD bLightDynamicEnv:1;
	BITFIELD bStatic:1;
	BITFIELD bHidden:1;
	BITFIELD bNoDelete:1;
	BITFIELD bDeleteMe:1;
	BITFIELD bTicked:1;
	BITFIELD bDynamicLight:1;
	BITFIELD bTimerLoop:1;
	BITFIELD bOnlyOwnerSee:1;
	BITFIELD bHighDetail:1;
	BITFIELD bSuperHighDetail:1;
	BITFIELD bOnlyDrawIfAttached:1;
	BITFIELD bCriticalAttachment:1;
	BITFIELD bStasis:1;
	BITFIELD bTrailerAllowRotation:1;
	BITFIELD bTrailerSameRotation:1;
	BITFIELD bTrailerPrePivot:1;
	BITFIELD bWorldGeometry:1;
	BITFIELD bAcceptsProjectors:1;
	BITFIELD bOrientOnSlope:1;
	BITFIELD bOnlyAffectPawns:1;
	BITFIELD bDisableSorting:1;
	BITFIELD bIgnoreEncroachers:1;
	BITFIELD bShowOctreeNodes:1;
	BITFIELD bWasSNFiltered:1;
	BITFIELD bMovedInEditor:1;
	BITFIELD bNetTemporary:1;
	BITFIELD bOnlyRelevantToOwner:1;
	BITFIELD bNetDirty:1;
	BITFIELD bAlwaysRelevant:1;
	BITFIELD bReplicateInstigator:1;
	BITFIELD bReplicateMovement:1;
	BITFIELD bSkipActorPropertyReplication:1;
	BITFIELD bUpdateSimulatedPosition:1;
	BITFIELD bTearOff:1;
	BITFIELD bOnlyDirtyReplication:1;
	BITFIELD bReplicateAnimations:1;
	BITFIELD bNetInitialRotation:1;
	BITFIELD bCompressedPosition:1;
	BITFIELD bAlwaysZeroBoneOffset:1;
	BITFIELD bDontBatch:1;
	BITFIELD bUnlit:1;
	BITFIELD bShadowCast:1;
	BITFIELD bStaticLighting:1;
	BITFIELD bUseLightingFromBase:1;
	BITFIELD bDrawHUDMarkerIcon:1;
	BITFIELD bUseHWOcclusionTests:1;
	BITFIELD EnhancedVisionFade:1;
	BITFIELD bHurtEntry:1;
	BITFIELD bGameRelevant:1;
	BITFIELD bCollideWhenPlacing:1;
	BITFIELD bTravel:1;
	BITFIELD bMovable:1;
	BITFIELD bDestroyInPainVolume:1;
	BITFIELD bCanBeDamaged:1;
	BITFIELD bShouldBaseAtStartup:1;
	BITFIELD bPendingDelete:1;
	BITFIELD bOwnerNoSee:1;
	BITFIELD bCanTeleport:1;
	BITFIELD bClientAnim:1;
	BITFIELD bDisturbFluidSurface:1;
	BITFIELD bAlwaysTick:1;
	BITFIELD bCanBeAutoAimed:1;
	BITFIELD bAlignBottom:1;
	BITFIELD bCollideActors:1;
	BITFIELD bCollideWorld:1;
	BITFIELD bBlockActors:1;
	BITFIELD bBlockPlayers:1;
	BITFIELD bProjTarget:1;
	BITFIELD bBlockZeroExtentTraces:1;
	BITFIELD bBlockNonZeroExtentTraces:1;
	BITFIELD bAutoAlignToTerrain:1;
	BITFIELD bUseCylinderCollision:1;
	BITFIELD bBlockKarma:1;
	BITFIELD bUseAltKarmaPrim:1;
	BITFIELD bImmobile:1;
	BITFIELD bNoRagdollPawnCollision:1;
	BITFIELD bNetNotify:1;
	BITFIELD bIgnoreOutOfWorld:1;
	BITFIELD bBounce:1;
	BITFIELD bFixedRotationDir:1;
	BITFIELD bRotateToDesired:1;
	BITFIELD bInterpolating:1;
	BITFIELD bJustTeleported:1;
	BITFIELD bPriorityRagdoll:1;
	BITFIELD bIsMover:1;
	BYTE RemoteRole;
	BYTE Role;
	INT NetTag;
	FLOAT NetUpdateTime;
	FLOAT NetUpdateFrequency;
	FLOAT NetPriority;
	class APawn* Instigator;
	class USound* AmbientSound;
	FName AttachmentBone;
	class ALevelInfo* Level;
	class ULevel* XLevel;
	FLOAT LifeSpan;
	FPointRegion Region;
	FLOAT TimerRate;
	class UMesh* Mesh;
	FLOAT LastRenderTime;
	FName Tag;
	FName HiddenTag;
	TArrayNoInit<INT> Leaves;
	FName Event;
	class AInventory* Inventory;
	FLOAT TimerCounter;
	class UMeshInstance* MeshInstance;
	FLOAT LODBias;
	FName InitialState;
	FName Group;
	TArrayNoInit<FNavPtLocator> NavPtLocs;
	TArrayNoInit<class ANavigationPoint*> NavPts;
	class UClass* NavPtClass;
	TArrayNoInit<class AActor*> Touching;
	TArrayNoInit<INT> OctreeNodes;
	FBox OctreeBox;
	class AActor* Deleted;
	FLOAT LatentFloat;
	INT CollisionTag;
	INT JoinedTag;
	class APhysicsVolume* CurrentPhysicsVolume;
	FVector Location;
	FRotator Rotation;
	FVector Velocity;
	FVector Acceleration;
	FName AttachTag;
	TArrayNoInit<class AActor*> Attached;
	FVector RelativeLocation;
	FRotator RelativeRotation;
	class ASquadMarker* SquadMarker;
	FLOAT HUDMarkerIconZOffset;
	TArrayNoInit<class FProjectorRenderInfoPtr*> Projectors;
	TArrayNoInit<class FStaticMeshProjectorRenderInfoPtr*> StaticMeshProjectors;
	class UMaterial* Texture;
	class UStaticMeshInstance* StaticMeshInstance;
	class UModel* Brush;
	FLOAT DrawScale;
	FVector DrawScale3D;
	FVector PrePivot;
	TArrayNoInit<class UMaterial*> Skins;
	class UMaterial* RepSkin;
	class UConvexVolume* AntiPortal;
	FLOAT CullDistance;
	FLOAT ScaleGlow;
	BYTE AmbientGlow;
	BYTE Style;
	BYTE TypeOfMaterial;
	BYTE SoundOcclusion;
	FLOAT AutoAimOffset;
	class UClass* MyDamageVariance;
	FLOAT IconScale;
	FColor EnhancedVisionColor;
	FLOAT CollisionRadius;
	FLOAT CollisionHeight;
	FLOAT Mass;
	FLOAT Buoyancy;
	FRotator RotationRate;
	FRotator DesiredRotation;
	class AActor* PendingTouch;
	FVector ColLocation;
	class UKarmaParamsCollision* KParams;
	INT KStepTag;
	FLOAT MaxKarmaSpeed;
	FAnimRep SimAnim[6];
	BITFIELD bNetInitial:1;
	BITFIELD bNetOwner:1;
	BITFIELD bNetRelevant:1;
	BITFIELD bDemoRecording:1;
	BITFIELD bClientDemoRecording:1;
	BITFIELD bRepClientDemo:1;
	BITFIELD bClientDemoNetFunc:1;
	BITFIELD bDemoOwner:1;
	BITFIELD bNoRepMesh:1;
	BITFIELD bHiddenEd:1;
	BITFIELD bHiddenEdGroup:1;
	BITFIELD bDirectional:1;
	BITFIELD bSelected:1;
	BITFIELD bEdShouldSnap:1;
	BITFIELD bEdSnap:1;
	BITFIELD bTempEditor:1;
	BITFIELD bPathColliding:1;
	BITFIELD bPathTemp:1;
	BITFIELD bScriptInitialized:1;
	BITFIELD bLockLocation:1;
	BITFIELD bOfSquadInterest:1;
	BITFIELD bAdditionalTarget:1;
	BITFIELD bValidEnemy:1;
	BITFIELD bSquadExamined:1;
	class UClass* MessageClass;
	FLOAT LastTimeLookedAt;
	BYTE LastTouchedMaterialType;
	class AActor* NextSquadInterestActor;
	class AActor* NextTargetActor;

	DECLARE_CLASS(AActor,UObject,CLASS_NativeReplication,Engine)
	#include "AActor.h"
};

/*
 * Accessory
 */

enum EAccessoryDetachStyle{
	ADS_BlowUp,
	ADS_BlowOut,
	ADS_MAX
};

class ENGINE_API AAccessory : public AActor{
public:
	BITFIELD IsDetachable:1;
	BITFIELD Explosive:1;
	BITFIELD Invulnerable:1;
	BITFIELD WentKarma:1;
	class UClass* ExplosionEffect;
	class UClass* ExplosionDamageType;
	FLOAT ExplosionRadius;
	FLOAT ExplosionDamage;
	FLOAT DetachedLifespan;
	FLOAT MinDetachForce;
	FLOAT Health;
	FLOAT ArmorFactor;
	FLOAT MaxDetachImpulse;
	BYTE DetachStyle;
	class UClass* TrailerClass;
	class AEmitter* Trailer;

	DECLARE_CLASS(AAccessory,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AAccessory)
};

/*
 * ActivateItem
 */

enum EMarkerItemDifficulty{
	MID_Easy,
	MID_Medium,
	MID_Hard,
	MID_Hardest,
	MID_MAX
};

enum EActivateItemType{
	AIT_HackTerminal,
	AIT_HackDoor,
	AIT_BreachDoor,
	AIT_SetTrap,
	AIT_DisarmTrap,
	AIT_Demolition,
	AIT_Plunger,
	AIT_BactaDispenser,
	AIT_ProximityMine,
	AIT_MAX
};

struct FActivationInfo{
	FName Event;
	class UClass* TransitionEffect;
	FVector TransitionEffectOffset;
	class USound* TransitionSound;
	class UMaterial* Material;
	INT MaterialIndex;
	class UStaticMesh* Mesh;
	FLOAT Duration;
	class UClass* MyDamageType;
	FLOAT Damage;
	FLOAT MomentumTransfer;
	FLOAT DamageRadius;
};

class ENGINE_API AActivateItem : public AActor{
public:
	class UClass* AmmunitionRequired;
	BYTE ActivateItemType;
	BYTE Difficulty;
	FName EventUnderway;
	BITFIELD bIsUsable:1;
	BITFIELD bActivated:1;
	BITFIELD bActivating:1;
	BITFIELD bUsed:1;
	BITFIELD bPlayerActivated:1;
	BITFIELD bTriggeredByDamage:1;
	BITFIELD bIsUsableByPlayer:1;
	BITFIELD bLockPlayerLocation:1;
	BITFIELD bSavesProgress:1;
	BITFIELD bNonPlayerUsesTimer:1;
	BYTE HUDIconX;
	BYTE HUDIconY;
	FLOAT ElapseSetupTime;
	FLOAT DurationRemaining;
	FLOAT PlayerRange;
	FLOAT PlayerOffset;
	FLOAT FractionComplete;
	FLOAT ActivateDotProdMax;
	class AController* User;
	class UClass* AttachItemClass;
	FStringNoInit ActivatePromptText;
	TArrayNoInit<FString> ActivatePromptButtonFuncs;

	// Events
	FLOAT DurationMultiplier();
	FLOAT DefaultDuration();
	void StartSetup(class AController* Controller);
	UBOOL HasRequiredInventory(class APawn* Pawn);
	void AbortSetup();

	DECLARE_CLASS(AActivateItem,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AActivateItem)
};


/*
 * AIScript
 */

class ENGINE_API AAIScript : public AActor{
public:
	class UClass* ControllerClass;
	BITFIELD bLoggingEnabled:1;

	DECLARE_CLASS(AAIScript,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AAIScript)
};


/*
 * AntiPortalActor
 */

class ENGINE_API AAntiPortalActor : public AActor{
public:
	DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};

/*
 * Brush
 */

enum ECsgOper{
	CSG_Active,
	CSG_Add,
	CSG_Subtract,
	CSG_Intersect,
	CSG_Deintersect,
	CSG_MAX
};

class ENGINE_API ABrush : public AActor{
public:
	BYTE CsgOper;
	class UObject* UnusedLightMesh;
	FVector PostPivot;
	FScale MainScale;
	FScale PostScale;
	FScale TempScale;
	FColor BrushColor;
	INT PolyFlags;
	BITFIELD bColored:1;

	//Overrides
	virtual void CheckForErrors();
	virtual class UPrimitive* GetPrimitive();
	virtual int IsABrush();
	virtual void PostEditChange();
	virtual void PostLoad();
	virtual FCoords ToLocal() const;
	virtual FCoords ToWorld() const;

	//Virtual Functions
	virtual void CopyPosRotScaleFrom(ABrush*);
	virtual void InitPosRotScale();

	//Functions
	float BuildCoords(class FModelCoords *, class FModelCoords*);
	float OldBuildCoords(class FModelCoords *, class FModelCoords*);
	class FCoords OldToLocal() const;
	class FCoords OldToWorld() const;

	DECLARE_CLASS(ABrush,AActor,0,Engine)
};

/*
 * Volume
 */

struct FDecorationType{
	class UStaticMesh* StaticMesh;
	FRange Count;
	FRange DrawScale;
	INT bAlign;
	INT bRandomPitch;
	INT bRandomYaw;
	INT bRandomRoll;
};

class ENGINE_API AVolume : public ABrush{
public:
	class AActor* AssociatedActor;
	FName AssociatedActorTag;
	INT LocationPriority;
	FStringNoInit LocationName;
	TArrayNoInit<FDecorationType> DecoList;

	DECLARE_CLASS(AVolume,ABrush,0,Engine)
};

/*
 * BattleVolume
 */

class ENGINE_API AEngineBattleVolume : public AVolume{
public:
	// Events
	UBOOL AreFactoriesExhausted();

	DECLARE_CLASS(AEngineBattleVolume,AVolume,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AEngineBattleVolume)
};

/*
 * PhysicsVolume
 */

class ENGINE_API APhysicsVolume : public AVolume{
public:
	FVector ZoneVelocity;
	FVector Gravity;
	FLOAT GroundFriction;
	FLOAT TerminalVelocity;
	FLOAT DamagePerSec;
	class UClass* DamageType;
	INT Priority;
	class USound* EntrySound;
	class USound* ExitSound;
	class UClass* EntryActor;
	class UClass* ExitActor;
	FLOAT FluidFriction;
	FVector ViewFlash;
	FVector ViewFog;
	class UClass* ClassProximityType;
	BITFIELD bPainCausing:1;
	BITFIELD bDestructive:1;
	BITFIELD bNoInventory:1;
	BITFIELD bMoveProjectiles:1;
	BITFIELD bBounceVelocity:1;
	BITFIELD bNeutralZone:1;
	BITFIELD bWaterVolume:1;
	BITFIELD bDistanceFog:1;
	class AInfo* PainTimer;
	class UClass* AudioClass;
	FColor DistanceFogColor;
	FLOAT DistanceFogStart;
	FLOAT DistanceFogEnd;
	FLOAT KExtraLinearDamping;
	FLOAT KExtraAngularDamping;
	FLOAT KBuoyancy;
	class APhysicsVolume* NextPhysicsVolume;

	// Events
	void PhysicsChangedFor(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
	void ActorLeavingVolume(class AActor* Other);
	void PawnEnteredVolume(class APawn* Other);
	void PawnLeavingVolume(class APawn* Other);

	DECLARE_CLASS(APhysicsVolume,AVolume,CLASS_NativeReplication,Engine)
};

/*
 * DefaultPhysicsVolume
 */

class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume{
public:
	DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};

/*
 * Controller
 */

#define UCONST_LATENT_MOVETOWARD 503

class ENGINE_API AController : public AActor{
public:
	class APawn* Pawn;
	class AActor* Machine;
	INT PlayerNum;
	FLOAT SightCounter;
	FLOAT FovAngle;
	FLOAT Handedness;
	BITFIELD bIsPlayer:1;
	BITFIELD bGodMode:1;
	BITFIELD bLOSflag:1;
	BITFIELD bAdvancedTactics:1;
	BITFIELD bCanOpenDoors:1;
	BITFIELD bCanDoSpecial:1;
	BITFIELD bAdjusting:1;
	BITFIELD bPreparingMove:1;
	BITFIELD bControlAnimations:1;
	BITFIELD bNotifyApex:1;
	BITFIELD bUsePlayerHearing:1;
	BITFIELD bJumpOverWall:1;
	BITFIELD bEnemyAcquired:1;
	BITFIELD bShouldWalk:1;
	BITFIELD bAdjustFromWalls:1;
	BITFIELD InAttackState:1;
	BITFIELD bEnemyIsPawn:1;
	BITFIELD bSmartShot:1;
	BYTE bRun;
	BYTE bDuck;
	BYTE bFire;
	BYTE bAltFire;
	FVector AdjustLoc;
	class AController* nextController;
	FLOAT MoveTimer;
	class AActor* MoveTarget;
	FVector Destination;
	FVector FocalPoint;
	class AActor* Focus;
	class AMover* PendingMover;
	FLOAT MinHitWall;
	FLOAT RespawnPredictionTime;
	INT AcquisitionYawRate;
	class AActor* Enemy;
	class AActor* Target;
	FLOAT LastSeenTime;
	FLOAT WhenEnemyChangedLast;
	FLOAT OldMessageTime;
	class UClass* PlayerReplicationInfoClass;
	class APlayerReplicationInfo* PlayerReplicationInfo;
	class UClass* PawnClass;
	class UClass* PreviousPawnClass;
	FLOAT GroundPitchTime;
	FVector ViewX;
	FVector ViewY;
	FVector ViewZ;
	class ANavigationPoint* StartSpot;
	FVector MonitorStartLoc;
	class APawn* MonitoredPawn;
	FLOAT MonitorMaxDistSq;
	class UClass* LastPawnWeapon;

	DECLARE_CLASS(AController,AActor,CLASS_Config|CLASS_NativeReplication,Engine)
	#include "AController.h"
};

/*
 * AIController
 */

#define UCONST_MAX_ERROR_ANGLE 60
#define UCONST_DEG_TO_ROTATOR 182.04
#define UCONST_MAXSTATEOBJECTS 8

class ENGINE_API AAIController : public AController{
public:
	class AAIScript* MyScript;
	FLOAT Skill;
	FVector FinalDestination;

	// Overrides
	virtual int AcceptNearbyPath(class AActor*);
	virtual void AdjustFromWall(const FVector&, class AActor*);
	virtual void SetAdjustLocation(const FVector&);

	// Virtual Functions
	virtual void AddReflexAnimGoal(FName, FName, int, float, int);
	virtual void AddReflexSleepGoal(float);

	DECLARE_CLASS(AAIController,AController,CLASS_Config,Engine)
};

/*
 * PlayerController
 */

enum ETargetType{
	TGT_Default,
	TGT_Friend,
	TGT_FriendInjured,
	TGT_FriendToHeal,
	TGT_Marker,
	TGT_MarkerCancel,
	TGT_Pickup,
	TGT_Enemy,
	TGT_Panel,
	TGT_DemolitionReady,
	TGT_KarmaProp,
	TGT_EngagedEnemy,
	TGT_MountTurret,
	TGT_SquadOffensiveStance,
	TGT_SquadDefensiveStance,
	TGT_SquadEngage,
	TGT_CancelAllMarkers,
	TGT_MAX
};

enum EColorBlendStage{
	CBS_None,
	CBS_In,
	CBS_Sustain,
	CBS_Out,
	CBS_MAX
};

struct FColorBlendStageInfo{
	FColor BaseColor;
	FColor GoalColor;
	FLOAT TotalTime;
	FLOAT RemainingTime;
};

struct FPlayerNameInfo{
	FStringNoInit mInfo;
	FColor mColor;
	FLOAT mXPos;
	FLOAT mYPos;
};

struct FClientAdjustment{
	FLOAT TimeStamp;
	FName newState;
	BYTE newPhysics;
	FVector NewLoc;
	FVector NewVel;
	class AActor* NewBase;
	FVector NewFloor;
};

class ENGINE_API APlayerController : public AController{
public:
	BYTE TargetType;
	BYTE HandSignalTargetType;
	class AActor* HandSignalTarget;
	class ASquadMarker* HandSignalTargetMarker;
	class ASquadMarker* OldTargetMarker;
	class ASquadMarker* TargetMarker;
	FLOAT TargetDuration;
	FLOAT HealingTime;
	FLOAT TotalTimeToRevive;
	class ANavigationPoint* OccupiedNode;
	class UPlayer* Player;
	INT LevelProgress;
	BITFIELD bLookUpStairs:1;
	BITFIELD bSnapToLevel:1;
	BITFIELD bAlwaysMouseLook:1;
	BITFIELD bKeyboardLook:1;
	BITFIELD bCenterView:1;
	FLOAT XTurnSlowdown;
	FLOAT XLookUpSlowdown;
	FStringNoInit CustomizedClass;
	INT CloneSkin;
	INT TrandoSkin;
	INT CloneAccessories[5];
	INT TrandoAccessories[5];
	INT VoiceIndex[2];
	FStringNoInit CloneVoicePackNames[3];
	FStringNoInit TrandoVoicePackNames[3];
	BITFIELD bVisor:1;
	INT VisorModeDefault;
	FLOAT TacticalModeIntensity;
	BITFIELD bGlobalRumbleActive:1;
	BITFIELD bRumbleActive:1;
	BITFIELD bAutoPullManeuvers:1;
	BITFIELD bBehindView:1;
	BITFIELD bFrozen:1;
	BITFIELD bPressedJump:1;
	BITFIELD bDoubleJump:1;
	BITFIELD bUpdatePosition:1;
	BITFIELD bFixedCamera:1;
	BITFIELD bJumpStatus:1;
	BITFIELD bUpdating:1;
	BITFIELD bBriefing:1;
	BITFIELD bOkToSwitchWeapon:1;
	BITFIELD bNeverSwitchOnPickup:1;
	BITFIELD bZooming:1;
	BITFIELD bZoom:1;
	BITFIELD bUse:1;
	BITFIELD bAlwaysLevel:1;
	BITFIELD bSetTurnRot:1;
	BITFIELD bCheatFlying:1;
	BITFIELD bFreeCamera:1;
	BITFIELD bZeroRoll:1;
	BITFIELD bCameraPositionLocked:1;
	BITFIELD bViewBot:1;
	BITFIELD UseFixedVisibility:1;
	BITFIELD bBlockCloseCamera:1;
	BITFIELD bValidBehindCamera:1;
	BITFIELD bForcePrecache:1;
	BITFIELD bClientDemo:1;
	BITFIELD bAllActorsRelevant:1;
	BITFIELD bShortConnectTimeOut:1;
	BITFIELD bPendingDestroy:1;
	BITFIELD bShouldTravelInv:1;
	BITFIELD bNoVoiceMessages:1;
	BITFIELD bNoVoiceTaunts:1;
	BITFIELD bNoAutoTaunts:1;
	BITFIELD bAutoTaunt:1;
	BITFIELD bNoMatureLanguage:1;
	BITFIELD bDynamicNetSpeed:1;
	BITFIELD bKeepHintMenusAwfulHack:1;
	BYTE AnnouncerLevel;
	BYTE AnnouncerVolume;
	BYTE AimingHelp;
	BYTE MeleeAimingHelp;
	FLOAT MaxResponseTime;
	FLOAT WaitDelay;
	class APawn* AcknowledgedPawn;
	FLOAT aBaseX;
	FLOAT aBaseY;
	FLOAT aBaseZ;
	FLOAT aMouseX;
	FLOAT aMouseY;
	FLOAT aForward;
	FLOAT aTurn;
	FLOAT aStrafe;
	FLOAT aUp;
	FLOAT aLookUp;
	BYTE bStrafe;
	BYTE bSnapLevel;
	BYTE bLook;
	BYTE bFreeLook;
	BYTE bXAxis;
	BYTE bYAxis;
	BYTE DoubleClickDir;
	INT ShowFlags;
	INT Misc1;
	INT Misc2;
	INT RendMap;
	FLOAT OrthoZoom;
	class AActor* ViewTarget;
	class AController* RealViewTarget;
	class APlayerController* DemoViewer;
	FLOAT CameraDist;
	FVector OldCameraLoc;
	FRotator OldCameraRot;
	TArrayNoInit<class UCameraEffect*> CameraEffects;
	class UFrameFX* FrameFX;
	class UHelmet* Helmet;
	class ADynamicLight* PlayerSpotLight;
	FLOAT DesiredFOV;
	FLOAT DefaultFOV;
	FLOAT ZoomLevel;
	FVector FixedLocation;
	FRotator FixedRotation;
	FMatrix RenderWorldToCamera;
	FVector FlashScale;
	FVector FlashFog;
	FLOAT ConstantGlowScale;
	FVector ConstantGlowFog;
	FColor ColorAdd;
	BYTE CurrentAddStage;
	FColorBlendStageInfo AddStages[3];
	FColor ColorMultiply;
	BYTE CurrentMultStage;
	FColorBlendStageInfo MultStages[3];
	INT Blur;
	BYTE CurrentBlurStage;
	FColorBlendStageInfo BlurStages[3];
	INT Bloom;
	BYTE CurrentBloomStage;
	FColorBlendStageInfo BloomStages[3];
	FColor LastDistanceFogColor;
	FColor CurrentDistanceFogColor;
	FLOAT LastDistanceFogStart;
	FLOAT LastDistanceFogEnd;
	FLOAT CurrentDistanceFogEnd;
	FLOAT TimeSinceLastFogChange;
	INT LastZone;
	FRotator TargetViewRotation;
	FRotator BlendedTargetViewRotation;
	FLOAT TargetEyeHeight;
	FVector TargetWeaponViewOffset;
	class AHUD* myHUD;
	BITFIELD bListObjectives:1;
	class AMissionObjectives* Objectives;
	FLOAT LastPlaySound;
	FLOAT LastPlaySpeech;
	class ASavedMove* SavedMoves;
	class ASavedMove* FreeMoves;
	class ASavedMove* PendingMove;
	FLOAT CurrentTimeStamp;
	FLOAT LastUpdateTime;
	FLOAT ServerTimeStamp;
	FLOAT TimeMargin;
	FLOAT ClientUpdateTime;
	FLOAT MaxTimeMargin;
	class AWeapon* OldClientWeapon;
	INT WeaponUpdate;
	INT FirstTimeSwitch[15];
	FStringNoInit ProgressMessage[4];
	FColor ProgressColor[4];
	FLOAT ProgressTimeOut;
	FStringNoInit LastSave;
	FStringNoInit NoPauseMessage;
	FStringNoInit ViewingFrom;
	FStringNoInit OwnCamera;
	FStringNoInit QuickSaveName;
	FStringNoInit AutoSaveName;
	FStringNoInit NoQuickOrAutoSave;
	class AGameReplicationInfo* GameReplicationInfo;
	BITFIELD bWasInvited:1;
	INT NetSplitID;
	FStringNoInit Gamertag;
	FStringNoInit xuid;
	BITFIELD bIsGuest:1;
	INT Skill;
	FLOAT TimeBetweenMatchmakingQueries;
	FStringNoInit StatsUsername;
	FStringNoInit StatsPassword;
	class UClass* LocalMessageClass;
	FVector MaxShakeOffset;
	FVector ShakeOffset;
	FVector ShakeRotMag;
	FVector ShakeOffsetMag;
	FVector ShakeRotLastNoise;
	FVector ShakeOffsetLastNoise;
	FLOAT ShakeFrequency;
	FLOAT ShakeTimeElapsed;
	FLOAT ShakeTimeIn;
	FLOAT ShakeTimeSustain;
	FLOAT ShakeTimeOut;
	class APawn* TurnTarget;
	INT EnemyTurnSpeed;
	INT GroundPitch;
	FVector OldFloor;
	class UCheatManager* CheatManager;
	class UClass* CheatClass;
	class UPlayerInput* PlayerInput;
	class UClass* InputClass;
	FVector FailedPathStart;
	INT DemoViewPitch;
	INT DemoViewYaw;
	INT MinPlayerPitch;
	INT MaxPlayerPitch;
	INT MinPlayerYaw;
	INT MaxPlayerYaw;
	class ASecurity* PlayerSecurity;
	FLOAT ForcePrecacheTime;
	FLOAT LastPingUpdate;
	FLOAT ExactPing;
	FLOAT OldPing;
	FLOAT SpectateSpeed;
	FLOAT DynamicPingThreshold;
	FLOAT NextSpeedChange;
	INT ClientCap;
	BITFIELD bEnablePickupForceFeedback:1;
	BITFIELD bEnableWeaponForceFeedback:1;
	BITFIELD bEnableDamageForceFeedback:1;
	BITFIELD bEnableGUIForceFeedback:1;
	BITFIELD bForceFeedbackSupported:1;
	FLOAT TeamBeaconMaxDist;
	FLOAT TeamBeaconPlayerInfoMaxDist;
	class UTexture* TeamBeaconTexture;
	FColor TeamBeaconTeamColors[2];
	TArrayNoInit<FPlayerNameInfo> PlayerNameArray;
	FClientAdjustment PendingAdjustment;
	FLOAT LastActiveTime;
	FLOAT LastSpeedHackLog;
	BITFIELD bWasSpeedHack:1;
	INT CachedNumSaves;
	FLOAT DifficultyDamageModifier;
	FLOAT DamageModifierEasy;
	FLOAT DamageModifierMedium;
	FLOAT DamageModifierHard;
	INT SavedVisionMode;
	BITFIELD bBadCDKey:1;
	BITFIELD bMissingContent:1;
	FStringNoInit MissingContentName;

	DECLARE_CLASS(APlayerController,AController,CLASS_Config|CLASS_NativeReplication,Engine)
	#include "APlayerController.h"
};

/*
 * Emitter
 */

class ENGINE_API AEmitter : public AActor{
public:
	TArrayNoInit<class UParticleEmitter*> Emitters;
	BITFIELD AutoDestroy:1;
	BITFIELD AutoReset:1;
	BITFIELD DisableFogging:1;
	FRangeVector GlobalOffsetRange;
	FRange TimeTillResetRange;
	class AActor* SkeletalMeshActor;
	class USound* SpawnSound;
	INT BloomFilter;
	FLOAT InTime;
	FLOAT SustainTime;
	FLOAT OutTime;
	FLOAT ShakeRadius;
	FVector ShakeMag;
	FRotator ShakeRotationMag;
	FLOAT ShakeInTime;
	FLOAT ShakeSustainTime;
	FLOAT ShakeOutTime;
	FLOAT ShakeFrequency;
	INT Initialized;
	FBox BoundingBox;
	FLOAT EmitterRadius;
	FLOAT EmitterHeight;
	BITFIELD ActorForcesEnabled:1;
	FVector GlobalOffset;
	FLOAT TimeTillReset;
	BITFIELD UseParticleProjectors:1;
	class UParticleMaterial* ParticleMaterial;
	BITFIELD DeleteParticleEmitters:1;

	DECLARE_CLASS(AEmitter,AActor,0,Engine)
};

/*
 * Flashlight
 */

class ENGINE_API AFlashlight : public AActor{
public:
	BITFIELD bIsOn:1;
	class UClass* ProjectorClass;
	class UClass* BeamClass;
	class ADynamicProjector* Projector;
	class AEmitter* BeamEmitter;
	class UMaterial* ProjectorTexture;

	// Events
	void TurnOn();
	void TurnOff();

	DECLARE_CLASS(AFlashlight,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AFlashlight)
};

/*
 * HUD
 */

struct FConsoleMessage{
	FStringNoInit Text;
	FColor TextColor;
	FLOAT MessageLife;
	class APlayerReplicationInfo* PRI;
};

class ENGINE_API AHUD : public AActor{
public:
	class UFont* SmallFont;
	class UFont* MedFont;
	class UFont* BigFont;
	class UFont* LargeFont;
	FStringNoInit HUDConfigWindowType;
	class AHUD* nextHUD;
	class APlayerController* PlayerOwner;
	FStringNoInit ProgressFontName;
	class UFont* ProgressFontFont;
	FLOAT ProgressFadeTime;
	FColor MOTDColor;
	FColor DefaultTextColor;
	class AScoreBoard* ScoreBoard;
	BITFIELD bHideHUD:1;
	BITFIELD bShowScores:1;
	BITFIELD bShowDebugInfo:1;
	BITFIELD bHideCenterMessages:1;
	BITFIELD bBadConnectionAlert:1;
	BITFIELD bMessageBeep:1;
	class UMaterial* GameTypeMaterial;
	class UMaterial* XNotificationFriendIcon;
	class UMaterial* XNotificationInviteIcon;
	FLOAT XNotificationTimer;
	INT LastNumInvites;
	INT LastNumFriendReqs;
	FLOAT HudCanvasScale;
	FStringNoInit LoadingMessage;
	FStringNoInit SavingMessage;
	FStringNoInit ConnectingMessage;
	FStringNoInit PausedMessage;
	FStringNoInit PrecachingMessage;
	class UMovie* Movie;
	INT MoviePosX;
	INT MoviePosY;
	FLOAT TexMovieTop;
	FLOAT TexMovieLeft;
	FLOAT TexMovieBottom;
	FLOAT TexMovieRight;
	BITFIELD TexMovieTranslucent:1;
	class UMovieTexture* TextureMovie;
	BITFIELD bShowSubtitles:1;
	BITFIELD bShowPromptText:1;
	BITFIELD bShowCurrentObjective:1;
	FColor ConsoleColor;
	INT ConsoleMessageCount;
	INT CriticalMessageCount;
	INT CriticalMessageDisplayCount;
	INT ConsoleFontSize;
	INT MessageFontOffset;
	FConsoleMessage TextMessages[8];
	FConsoleMessage CriticalMessages[8];
	FLOAT ConsoleMessagePosX;
	FLOAT ConsoleMessagePosY;
	FStringNoInit FontArrayNames[9];
	class UFont* FontArrayFonts[9];
	INT FontScreenWidthMedium[9];
	INT FontScreenWidthSmall[9];
	INT StaticAlpha;
	BITFIELD bScavangerHead:1;
	class ADynamicProjector* FlashlightProjector;
	class UMaterial* FlashlightTexture;
	class AActor* Markers[4];
	class APickup* LastPickup;
	FLOAT LastPickupTime;
	class USound* TargetNormal;
	class USound* TargetFriend;
	class USound* TargetFriendInjured;
	class USound* TargetFriendToHeal;
	class USound* TargetMarker;
	class USound* TargetMarkerCancel;
	class USound* TargetPickup;
	class USound* TargetEnemy;
	class USound* TargetPanel;
	class USound* HealingTarget;
	class USound* TextPrint;
	class USound* HealthRecharging;
	class USound* HealthCharged;
	class USound* ShieldRecharging;
	class USound* ShieldCharged;
	class USound* ActivateStanceDefense;
	class USound* ActivateStanceHold;
	class USound* ActivateStanceOffense;
	class USound* StaticScavenger;
	class USound* StaticIncapacitated;
	class USound* FlashlightOn;
	class USound* FlashlightOff;
	class USound* ZoomIn;
	class USound* ZoomOut;
	class USound* IncapMenuChange;
	class USound* IncapMenuSelect;
	class USound* BloodSplatter;
	class USound* Wiper;
	class USound* SwitchToThermalGrenade;
	class USound* SwitchToSonicGrenade;
	class USound* SwitchToEMPGrenade;
	class USound* SwitchToFlashBang;
	class USound* SniperZoomCharging;
	class USound* SniperZoomCharged;

	// Events
	class UFont* GetConsoleFont(class UCanvas* C);
	void WorldSpaceOverlays();
	void CheckCountdown(class AGameReplicationInfo* GRI);
	void ConnectFailure(const FString& FailCode, const FString& URL);
	void ShowUpgradeMenu();
	void AddCriticalMessage(const FString& Message, FLOAT Duration, const FColor& TextColor);
	void PreRender(class UCanvas* Canvas);
	void DrawXLiveNotification(class UCanvas* C);
	void PostRender(class UCanvas* Canvas);
	void PostRenderMenus(class UCanvas* Canvas);
	UBOOL DrawLevelAction(class UCanvas* C);
	class UFont* LoadFontStatic(INT I);

	DECLARE_CLASS(AHUD,AActor,CLASS_Transient|CLASS_Config,Engine)
};

/*
 * Info
 */

struct FKeyValuePair{
	FString Key;
	FString Value;

	friend ENGINE_API FArchive& operator<<(FArchive& Ar,FKeyValuePair& MyKeyValuePair){
		return Ar << MyKeyValuePair.Key << MyKeyValuePair.Value;
	}
};

struct FPlayerResponseLine{
	INT PlayerNum;
	INT PlayerID;
	FString PlayerName;
	INT Ping;
	INT Score;
	INT StatsID;
	TArray<FKeyValuePair> PlayerInfo;
};

struct FServerResponseLine{
	INT ServerID;
	FString IP;
	INT Port;
	INT QueryPort;
	FString ServerName;
	FString MapName;
	FString GameType;
	INT CurrentPlayers;
	INT MaxPlayers;
	INT Ping;
	TArray<FKeyValuePair> ServerInfo;
	TArray<FPlayerResponseLine> PlayerInfo;
};

struct FMeshSetLinkup{
	class UMesh* Mesh;
	class UMeshAnimation* Set;
};


class ENGINE_API AInfo : public AActor{
public:
	DECLARE_CLASS(AInfo,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AInfo)
};

/*
 * FileLog
 */

class ENGINE_API AFileLog : public AInfo{
public:
	INT LogAr;
	FStringNoInit LogFileName;

	DECLARE_CLASS(AFileLog,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AFileLog)
};

/*
 * GameInfo
 */

struct FVoiceChatterInfo{
	class AController* Controller;
	FXboxAddr xbAddr;
	INT Handle;
	INT VoiceChannels;
};


class ENGINE_API AGameInfo : public AInfo{
public:
	BITFIELD bRestartLevel:1;
	BITFIELD bPauseable:1;
	BITFIELD bWeaponStay:1;
	BITFIELD bCanChangeSkin:1;
	BITFIELD bTeamGame:1;
	BITFIELD bGameEnded:1;
	BITFIELD bOverTime:1;
	BITFIELD bAlternateMode:1;
	BITFIELD bCanViewOthers:1;
	BITFIELD bDelayedStart:1;
	BITFIELD bWaitingToStartMatch:1;
	BITFIELD bChangeLevels:1;
	BITFIELD bAlreadyChanged:1;
	BITFIELD bLoggingGame:1;
	BITFIELD bEnableStatLogging:1;
	BITFIELD bAllowWeaponThrowing:1;
	BITFIELD bAllowBehindView:1;
	BITFIELD bAdminCanPause:1;
	BITFIELD bPlayerDeath:1;
	BITFIELD bHideSquadSDIcon:1;
	BITFIELD bGameRestarted:1;
	BITFIELD bKeepSamePlayerStart:1;
	BITFIELD bDedicatedServer:1;
	BITFIELD bBlindAI:1;
	BITFIELD bDeafAI:1;
	BITFIELD bBlindEnemies:1;
	BITFIELD bDeafEnemies:1;
	BITFIELD bLogEvents:1;
	FLOAT GameDifficulty;
	INT GoreLevel;
	FLOAT AutoAim;
	FLOAT GameSpeed;
	FLOAT StartTime;
	FStringNoInit DefaultPlayerClassName;
	FStringNoInit ScoreBoardType;
	FStringNoInit BotMenuType;
	FStringNoInit RulesMenuType;
	FStringNoInit SettingsMenuType;
	FStringNoInit GameUMenuType;
	FStringNoInit MultiplayerUMenuType;
	FStringNoInit GameOptionsMenuType;
	FStringNoInit HUDType;
	FStringNoInit MapListType;
	FStringNoInit MapPrefix;
	FStringNoInit BeaconName;
	INT MaxSpectators;
	INT NumSpectators;
	INT MaxPlayers;
	INT NumPlayers;
	INT NumWeaponsAllowed;
	INT NumGrenadesAllowed;
	INT NumReservedSlots;
	INT NumInvitedPlayers;
	INT NumBots;
	INT CurrentID;
	FStringNoInit DefaultPlayerName;
	FStringNoInit GameName;
	FLOAT FearCostFallOff;
	INT GoalScore;
	INT TimeLimit;
	class UClass* DeathMessageClass;
	class UClass* GameMessageClass;
	FName OtherMesgGroup;
	FStringNoInit MutatorClass;
	class AMutator* BaseMutator;
	FStringNoInit AccessControlClass;
	class AAccessControl* AccessControl;
	class AGameRules* GameRulesModifiers;
	FStringNoInit BroadcastHandlerClass;
	class ABroadcastHandler* BroadcastHandler;
	class UClass* PlayerControllerClass;
	FStringNoInit PlayerControllerClassName;
	class UClass* GameReplicationInfoClass;
	class AGameReplicationInfo* GameReplicationInfo;
	BITFIELD bWelcomePending:1;
	class AGameStats* GameStats;
	FStringNoInit GameStatsClass;
	TArrayNoInit<FVoiceChatterInfo> VoiceChatters;
	FStringNoInit SecurityClass;
	FStringNoInit ScreenShotName;
	FStringNoInit DecoTextName;
	FStringNoInit Acronym;
	FStringNoInit GIPropsDisplayText[11];
	FStringNoInit GIPropsExtras[2];
	FLOAT MaxIdleTime;
	TArrayNoInit<FMeshSetLinkup> CustomMeshSets;

	// Events
	void GameEnding();
	void KickIdler(class APlayerController* PC);
	INT GetFriendlyFirePercent();
	INT GetServerPort();
	void DetailChange();
	void InitGame(const FString& Options, FString& Error);
	FString GetBeaconText();
	void PreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode);
	UBOOL AtCapacity(UBOOL bSpectator, UBOOL bInvited);
	class APlayerController* Login(const FString& Portal, const FString& Options, FString& Error);
	void PostLogin(class APlayerController* NewPlayer);
	void AcceptInventory(class APawn* PlayerPawn);
	void Broadcast(class AActor* Sender, const FString& Msg, FName Type);
	void BroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);

	DECLARE_CLASS(AGameInfo,AInfo,CLASS_Config,Engine)
	NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};

/*
 * GameStats
 */

class ENGINE_API AGameStats : public AInfo{
public:
	class AFileLog* TempLog;
	class AGameReplicationInfo* GRI;
	BITFIELD bShowBots:1;

	DECLARE_CLASS(AGameStats,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AGameStats)
};

/*
 * InternetInfo
 */

class ENGINE_API AInternetInfo : public AInfo{
public:
	DECLARE_CLASS(AInternetInfo,AInfo,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

/*
 * Mutator
 */

class ENGINE_API AMutator : public AInfo{
public:
	class AMutator* NextMutator;
	class UClass* DefaultWeapon;
	FStringNoInit DefaultWeaponName;
	FStringNoInit GroupName;
	FStringNoInit FriendlyName;
	FStringNoInit Description;
	BITFIELD bUserAdded:1;

	DECLARE_CLASS(AMutator,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AMutator)
};

/*
 * ReplicationInfo
 */

class ENGINE_API AReplicationInfo : public AInfo{
public:
	DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)

	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

/*
 * GameReplicationInfo
 */

class ENGINE_API AGameReplicationInfo : public AReplicationInfo{
public:
	FStringNoInit GameName;
	FStringNoInit GameClass;
	BITFIELD bTeamGame:1;
	BITFIELD bStopCountDown:1;
	BITFIELD bMatchHasBegun:1;
	BITFIELD bMatchEnded:1;
	BITFIELD bTeamSymbolsUpdated:1;
	BITFIELD bJoinable:1;
	BITFIELD bInvitable:1;
	INT RemainingTime;
	INT ElapsedTime;
	INT RemainingMinute;
	FLOAT SecondCount;
	INT GoalScore;
	INT TimeLimit;
	BITFIELD bDedicatedServer:1;
	class ATeamInfo* Teams[10];
	INT TeamSize;
	FStringNoInit ServerName;
	FStringNoInit ShortName;
	FStringNoInit AdminName;
	FStringNoInit AdminEmail;
	INT ServerRegion;
	FStringNoInit MOTDLine1;
	FStringNoInit MOTDLine2;
	FStringNoInit MOTDLine3;
	FStringNoInit MOTDLine4;
	class AActor* Winner;
	TArrayNoInit<class APlayerReplicationInfo*> PRIArray;
	FVector FlagPos;

	// Events
	INT GetNumberofTeams();

	DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,CLASS_Config|CLASS_NativeReplication,Engine)
};

/*
 * PlayerReplicationInfo
 */

class ENGINE_API APlayerReplicationInfo : public AReplicationInfo{
public:
	FLOAT Score;
	FLOAT Deaths;
	class AVolume* PlayerVolume;
	class AZoneInfo* PlayerZone;
	INT NumLives;
	FStringNoInit PlayerName;
	FStringNoInit CharacterName;
	FStringNoInit OldCharacterName;
	FStringNoInit OldName;
	FStringNoInit PreviousName;
	INT PlayerID;
	class ATeamInfo* Team;
	INT TeamID;
	class UClass* VoiceType;
	BITFIELD bAdmin:1;
	BITFIELD bIsSpectator:1;
	BITFIELD bDedicatedServerSpectator:1;
	BITFIELD bOnlySpectator:1;
	BITFIELD bWaitingPlayer:1;
	BITFIELD bReadyToPlay:1;
	BITFIELD bBot:1;
	BITFIELD bWelcomed:1;
	INT StartTime;
	FStringNoInit StringDead;
	FStringNoInit StringSpectating;
	FStringNoInit StringUnknown;
	INT GoalsScored;
	INT Kills;
	BYTE Ping;
	BITFIELD bReceivedPing:1;
	BITFIELD bIsGuest:1;
	BITFIELD bHasVoice:1;
	FStringNoInit xuid;
	FStringNoInit Gamertag;
	INT Skill;

	// Events
	FString GetPlayerName();
	void UpdateCharacter();
	void ClientNameChange();

	DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,CLASS_NativeReplication,Engine)
};

/*
 * Squad
 */

enum EStanceType{
	STT_Invalid,
	STT_FormUp,
	STT_Hold,
	STT_EngagePosition,
	STT_EngageTarget,
	STT_SearchAndDestroy,
	STT_EngageCautious,
	STT_LastOrder,
	STT_Default,
	STT_MAX
};

enum ESquadCombatRole{
	SCR_None,
	SCR_StackTBD,
	SCR_StackCrouch,
	SCR_StackStand,
	SCR_Other,
	SCR_MAX
};

enum ESquadMovementRole{
	SMR_None,
	SMR_TBD,
	SMR_FreeAgent,
	SMR_Point,
	SMR_FollowPoint1,
	SMR_FollowPoint2,
	SMR_FollowPoint3,
	SMR_MAX
};

enum ESquadObjective{
	SO_Goto,
	SO_WaitForEvent,
	SO_GotoUnlessEvent,
	SO_InitiateMarker,
	SO_MAX
};

struct FMemberInfo{
	class APawn* Pawn;
	BYTE MovementRole;
	BYTE CombatRole;
	INT HUDIconX;
	INT HUDIconY;
};

struct FSquadVoiceLine{
	class APawn* Member;
	BYTE Cue;
	FLOAT TriggerInterval;
	class USound* Sound;
	class UObject* Subject;
	FLOAT TimeMustPlayBy;
};

struct FSquadObjective{
	BYTE ObjectiveType;
	FName Tag;
	class AActor* Actor;
	class USound* CompleteSound;
	FStringNoInit CompleteText;
	FLOAT Radius;
	BITFIELD bOptional:1;
	BITFIELD bMarkerAllStances:1;
	BITFIELD bLeapFrog:1;
};

class ENGINE_API ASquad : public AReplicationInfo{
public:
	class APawn* SquadLeader;
	BYTE StanceType;
	TArrayNoInit<FMemberInfo> SquadMembers;
	TArrayNoInit<FSquadObjective> Objectives;
	TArrayNoInit<FSquadVoiceLine> VoiceLines;
	class UClass* Stance;
	class UClass* HUDStance;
	class UClass* LastCommandedStance;
	class AActor* LastCommandedStanceArgument;
	TArrayNoInit<class USoundBanter*> PotentialBanter;
	class AActor* CommandedEnemy;
	FLOAT DefaultSearchAndDestroyRadius;
	FLOAT TetherHighPriority;
	FLOAT TetherLowPriority;
	FLOAT TetherHPActivateRadiusSqr;
	FLOAT TetherLPActivateRadiusSqr;
	FLOAT TetherHPDeactivateRadiusSqr;
	FLOAT TetherLPDeactivateRadiusSqr;
	INT CurrentSoundID;
	class USound* CurrentSound;
	FLOAT LastRecallTime;
	FLOAT LastCommandTime;
	FLOAT LastDirectCommandTime;
	INT RecentDirectCommandCount;
	FLOAT LastSDChangeTime;
	FLOAT NextUpdateTime;
	FLOAT NextVoiceUpdateTime;
	FLOAT LastExamineTime;
	FLOAT WhenBattleBegun;
	FLOAT WhenBattleEnded;
	BITFIELD BeCautious:1;
	BITFIELD PlayerSquad:1;
	BITFIELD bUsePlayerPosForObjectives:1;
	BITFIELD bObjectivePrepped:1;
	BITFIELD bInBattle:1;
	BITFIELD bSquadSeesEnemy:1;
	BITFIELD bEnemySeesSquad:1;
	BITFIELD bEnemiesPresent:1;
	BITFIELD bNonPlayersIncapacitated:1;

	void AddToSquad(class APawn* P);
	void EnemyKilled(class APawn* Victim, class AController* Killer, class UClass* DamageType);

	DECLARE_CLASS(ASquad,AReplicationInfo,0,Engine)
};

/*
 * TeamInfo
 */

class ENGINE_API ATeamInfo : public AReplicationInfo{
public:
	FColor HudTeamColor;
	FStringNoInit TeamName;
	INT Size;
	FLOAT Score;
	INT TeamIndex;
	FColor TeamColor[2];
	class AActor* HomeBase;
	class UClass* DefaultPlayerClass;
	FStringNoInit ColorNames[2];
	class UMaterial* TeamIcon;

	// Events
	FColor GetTeamColor();

	DECLARE_CLASS(ATeamInfo,AReplicationInfo,CLASS_NativeReplication,Engine)
};

/*
 * SavedMove
 */

class ENGINE_API ASavedMove : public AInfo{
public:
	class ASavedMove* NextMove;
	FLOAT TimeStamp;
	FLOAT Delta;
	BITFIELD bRun:1;
	BITFIELD bDuck:1;
	BITFIELD bPressedJump:1;
	BITFIELD bDoubleJump:1;
	BYTE DoubleClickMove;
	BYTE SavedPhysics;
	FVector StartLocation;
	FVector StartRelativeLocation;
	FVector StartVelocity;
	FVector StartFloor;
	FVector SavedLocation;
	FVector SavedVelocity;
	FVector SavedRelativeLocation;
	class AActor* StartBase;
	class AActor* EndBase;

	DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};

/*
 * Security
 */

class ENGINE_API ASecurity : public AInfo{
public:
	INT LastType;
	FStringNoInit LastParams[2];

	// Events
	void ServerCallback(INT SecType, const FString& Data);

	DECLARE_CLASS(ASecurity,AInfo,0,Engine)
};

/*
 * ZoneInfo
 */

class ENGINE_API AZoneInfo : public AInfo{
public:
	class ASkyZoneInfo* SkyZone;
	FName ZoneTag;
	FStringNoInit LocationName;
	BYTE ZoneDefaultMaterial;
	FLOAT KillZ;
	BYTE KillZType;
	BITFIELD bSoftKillZ:1;
	BITFIELD bTerrainZone:1;
	BITFIELD bDistanceFog:1;
	BITFIELD bClearToFogColor:1;
	BITFIELD bUseSkyDome:1;
	TArrayNoInit<class ATerrainInfo*> Terrains;
	FVector AmbientVector;
	BYTE AmbientBrightness;
	BYTE AmbientHue;
	BYTE AmbientSaturation;
	FColor DistanceFogColor;
	FLOAT DistanceFogStart;
	FLOAT DistanceFogEnd;
	FLOAT DistanceFogBlendTime;
	BITFIELD BloomEnable:1;
	BYTE Bloom;
	BYTE BloomFilter;
	class UVisionMode* ZoneVisionMode;
	FLOAT SplattersPerMinute;
	FLOAT SplatterWiperDelay;
	TArrayNoInit<class UMaterial*> SplatterTextures;
	class UClass* SplatterEffect;
	FLOAT SplatterScaleMin;
	FLOAT SplatterScaleMax;
	class USound* SplatterSound;
	class UTexture* EnvironmentMap;
	FLOAT TexUPanSpeed;
	FLOAT TexVPanSpeed;
	class UClass* ZoneAudioClass;
	BITFIELD bLonelyZone:1;
	TArrayNoInit<class AZoneInfo*> ManualExcludes;

	// Events
	void ActorEntered(class AActor* Other);
	void ActorLeaving(class AActor* Other);

	DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
};

/*
 * LevelInfo
 */

enum ELevelCampaign{
	LC_GEO,
	LC_RAS,
	LC_YYY,
	LC_MAX
};

enum EPhysicsDetailLevel{
	PDL_Low,
	PDL_Medium,
	PDL_High,
	PDL_MAX
};

enum ELevelAction{
	LEVACT_None,
	LEVACT_Loading,
	LEVACT_Saving,
	LEVACT_Connecting,
	LEVACT_Precaching,
	LEVACT_MAX
};

enum ENetMode{
	NM_Standalone,
	NM_DedicatedServer,
	NM_ListenServer,
	NM_Client,
	NM_MAX
};

class ENGINE_API ALevelInfo : public AZoneInfo{
public:
	FLOAT TimeDilation;
	FLOAT TimeSeconds;
	INT Year;
	INT Month;
	INT Day;
	INT DayOfWeek;
	INT Hour;
	INT Minute;
	INT Second;
	INT Millisecond;
	FLOAT PauseDelay;
	FStringNoInit Title;
	FStringNoInit Author;
	INT RecommendedNumPlayers;
	BYTE Campaign;
	TArrayNoInit<FName> XACTPackagesAllowed;
	BITFIELD bAsyncCacheFiles:1;
	BYTE PhysicsDetailLevel;
	FLOAT KarmaTimeScale;
	FLOAT RagdollTimeScale;
	INT MaxRagdolls;
	FLOAT KarmaGravScale;
	BITFIELD bKStaticFriction:1;
	INT MaxKarmaAccessories;
	INT ActiveKarmaAccessories;
	INT MaxDeadBodies;
	TArrayNoInit<class APawn*> DeadBodies;
	BITFIELD bKNoInit:1;
	FLOAT DecalStayScale;
	FStringNoInit LevelEnterText;
	FStringNoInit LocalizedPkg;
	class APlayerReplicationInfo* Pauser;
	class ULevelSummary* Summary;
	FStringNoInit VisibleGroups;
	FStringNoInit SelectedGroups;
	BITFIELD HideFromMenus:1;
	BITFIELD bLonePlayer:1;
	BITFIELD bBegunPlay:1;
	BITFIELD bPlayersOnly:1;
	BYTE DetailMode;
	BITFIELD bDropDetail:1;
	BITFIELD bAggressiveLOD:1;
	BITFIELD bStartup:1;
	BITFIELD bLowSoundDetail:1;
	BITFIELD bPathsRebuilt:1;
	BITFIELD bHasPathNodes:1;
	BITFIELD bCapFramerate:1;
	BITFIELD bLevelChange:1;
	BITFIELD bKickLiveIdlers:1;
	BITFIELD bUseBottleneckRegions:1;
	BITFIELD bDisableBlockedRegionRecompute:1;
	BITFIELD bLevelContainsHints:1;
	BITFIELD bNeverPrecache:1;
	FVector CameraLocationDynamic;
	FVector CameraLocationTop;
	FVector CameraLocationFront;
	FVector CameraLocationSide;
	FRotator CameraRotationDynamic;
	class USound* BattleMusic;
	INT BattleBaddieThreshold;
	FLOAT BattleRadiusInner;
	FLOAT BattleRadiusOuter;
	BYTE BattleCriteria;
	FLOAT Brightness;
	class UTexture* Screenshot;
	class UTexture* DefaultTexture;
	class UTexture* WhiteSquareTexture;
	class UTexture* LargeVertex;
	INT HubStackLevel;
	BITFIELD bIsConsole:1;
	BITFIELD ShadowsEnabled:1;
	BYTE LevelAction;
	class AGameReplicationInfo* GRI;
	BYTE NetMode;
	FStringNoInit ComputerName;
	FStringNoInit EngineVersion;
	FStringNoInit MinNetVersion;
	FStringNoInit DefaultGameType;
	FStringNoInit PreCacheGame;
	class AGameInfo* Game;
	FLOAT DefaultGravity;
	class ANavigationPoint* NavigationPointList;
	class UBitArray2D* RegionConnection[7];
	class AController* ControllerList;
	class AActor* BactaDispenserList;
	class AActor* AdditionalTargetsList;
	class AActor* SquadInterestList;
	class APlayerController* LocalPlayerController;
	class ANavigationPoint* NavigationObjective;
	TArrayNoInit<FMeshSetLinkup> CustomMeshSets;
	FStringNoInit NextURL;
	BITFIELD bNextItems:1;
	FLOAT NextSwitchCountdown;
	class UObjectPool* ObjectPool;
	TArrayNoInit<class UMaterial*> PrecacheMaterials;
	TArrayNoInit<class UStaticMesh*> PrecacheStaticMeshes;
	FLOAT MoveRepSize;
	FLOAT MaxTimeMargin;
	FLOAT TimeMarginSlack;
	FLOAT MinTimeMargin;
	class APlayerController* ReplicationViewer;
	class AActor* ReplicationViewTarget;
	class UIMuseStateInfo* MusicState;

	UBOOL IsSystemLink();
	void RegenerateBlockedRegions();

	// Events
	void FillPrecacheMaterialsArray();
	void FillPrecacheStaticMeshesArray();
	void ServerTravel(const FString& URL, UBOOL bItems);
	class APlayerController* GetLocalPlayerController();

	DECLARE_CLASS(ALevelInfo,AZoneInfo,CLASS_Config|CLASS_NativeReplication,Engine)
};

/*
 * SkyZoneInfo
 */

class ENGINE_API ASkyZoneInfo : public AZoneInfo{
public:
	DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

/*
 * WarpZoneInfo
 */

class ENGINE_API AWarpZoneInfo : public AZoneInfo{
public:
	DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)

	FStringNoInit OtherSideURL;
	FName ThisTag;
	BITFIELD bNoTeleFrag:1;
	INT iWarpZone;
	FCoords WarpCoords;
	class AWarpZoneInfo* OtherSideActor;
	class UObject* OtherSideLevel;
	FStringNoInit Destinations[8];
	INT numDestinations;
	class AWarpZoneMarker* MyMarker;
};

/*
 * FluidSurfaceInfo
 */

enum EFluidGridType{
    FGT_Square,
    FGT_Hexagonal,
    FGT_MAX
};

class ENGINE_API AFluidSurfaceInfo : public AInfo{
public:
    DECLARE_CLASS(AFluidSurfaceInfo,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AFluidSurfaceInfo)

	BYTE FluidGridType;
	FLOAT FluidGridSpacing;
    INT FluidXSize;
    INT FluidYSize;
	FLOAT FluidHeightScale;
    FLOAT FluidSpeed;
    FLOAT FluidDamping;
    FLOAT FluidNoiseFrequency;
    FRange FluidNoiseStrength;
    BITFIELD TestRipple:1;
    FLOAT TestRippleSpeed;
    FLOAT TestRippleStrength;
	FLOAT TestRippleRadius;
    FLOAT UTiles;
	FLOAT UOffset;
    FLOAT VTiles;
	FLOAT VOffset;
	FLOAT AlphaCurveScale;
	FLOAT AlphaHeightScale;
	BYTE AlphaMax;
	FLOAT ShootStrength;
	FLOAT ShootRadius;
	FLOAT RippleVelocityFactor;
	FLOAT TouchStrength;
	class UClass* ShootEffect;
    BITFIELD OrientShootEffect:1;
	class UClass* TouchEffect1;
    BITFIELD OrientTouchEffect:1;
	TArray<DWORD> ClampBitmap;
	ATerrainInfo* ClampTerrain;
	BITFIELD bShowBoundingBox:1;
	BITFIELD bUseNoRenderZ:1;
	FLOAT NoRenderZ;
	FLOAT WarmUpTime;
	FLOAT UpdateRate;
	FColor FluidColor;
    TArrayNoInit<FLOAT> Verts0;
    TArrayNoInit<FLOAT> Verts1;
	TArrayNoInit<BYTE>	VertAlpha;
    INT LatestVerts;
    FBox FluidBoundingBox;
	FVector FluidOrigin;
	FLOAT TimeRollover;
    FLOAT TestRippleAng;
	class UFluidSurfacePrimitive* Primitive;
	TArrayNoInit<class AFluidSurfaceOscillator*> Oscillators;
	BITFIELD bHasWarmedUp;

	void Render(FDynamicActor* Actor, class FLevelSceneNode* SceneNode, TList<class FDynamicLight*>* Lights, FRenderInterface* RI);

	void RenderEditorInfo(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);

	void Init();

	void FillVertexBuffer(void* Dest);
	void SimpleFillVertexBuffer(void* Dest);

	void FillIndexBuffer(void* Data);
	void SimpleFillIndexBuffer(void* Data);

	void RebuildClampedBitmap();

	void Pling(const FVector& Position, FLOAT Strength, FLOAT Radius);
	void PlingVertex(INT x, INT y, FLOAT Strength);

	inline UBOOL GetClampedBitmap(INT x, INT y){
		INT BitIndex = x + y * FluidXSize;
		return (ClampBitmap[BitIndex >> 5] & (1 << (BitIndex & 0x1f))) ? 1 : 0;
	}

	inline void SetClampedBitmap(INT x, INT y, UBOOL Clamp){
		INT BitIndex = x + (y * FluidXSize);
		INT Index = BitIndex >> 5;
		DWORD Bitmask = 1 << (BitIndex & 0x1f);

		if(Clamp)
			ClampBitmap[Index] |= Bitmask;
		else
			ClampBitmap[Index] &= ~Bitmask;
	}

	FVector GetVertexPosLocal(INT x, INT y);
	FVector GetVertexPosWorld(INT x, INT y);
	void GetNearestIndex(const FVector& pos, INT& xIndex, INT& yIndex);

	void UpdateSimulation(FLOAT DeltaTime);
	void UpdateOscillatorList();


	// Actor interface
	virtual UBOOL Tick( FLOAT DeltaTime, enum ELevelTick TickType );
	virtual void PostLoad();
	virtual void PostEditChange();
	virtual void PostEditMove();
	virtual void Spawned();
	virtual void Destroy();
	virtual UPrimitive* GetPrimitive();
};

/*
 * IntangibleActor
 */

class ENGINE_API AIntangibleActor : public AActor{
public:
	DECLARE_CLASS(AIntangibleActor,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AIntangibleActor)
};

/*
 * Inventory
 */

class ENGINE_API AInventory : public AActor{
public:
	BYTE InventoryGroup;
	BYTE GroupOffset;
	BITFIELD bDisplayableInv:1;
	BITFIELD bTossedOut:1;
	class UClass* PickupClass;
	class UClass* DroppedPickupClass;
	FLOAT Charge;
	FVector PlayerViewOffset;
	FRotator PlayerViewPivot;
	BITFIELD bDrawingFirstPerson:1;
	FLOAT BobDamping;
	class AActor* ThirdPersonActor;
	class UClass* AttachmentClass;
	class UMaterial* Icon;
	class UMaterial* StatusIcon;
	FStringNoInit ItemName;
	class UMesh* AlternateHUDArmsMesh;

	// Events
	class AWeapon* WeaponChange(BYTE F, UBOOL bSilent);
	class AWeapon* WeaponChangeClass(class UClass* WeaponClass);
	class AWeapon* PrevWeapon(class AWeapon* CurrentChoice, class AWeapon* CurrentWeapon);
	class AWeapon* NextWeapon(class AWeapon* CurrentChoice, class AWeapon* CurrentWeapon);

	DECLARE_CLASS(AInventory,AActor,CLASS_NativeReplication,Engine)
};

/*
 * Ammunition
 */

enum EAmmunitionType{
	AT_Random,
	AT_Line,
	AT_Circle,
	AT_Ring,
	AT_MAX
};

class ENGINE_API AAmmunition : public AInventory{
public:
	INT MaxAmmo;
	INT AmmoAmount;
	BITFIELD DigitalClipDisplay:1;
	BITFIELD bTossed:1;
	BITFIELD bInstantHit:1;
	BITFIELD bIsRecharge:1;
	BITFIELD bInfiniteClipsForNonPlayers:1;
	BITFIELD bSquadUsesPlayerClips:1;
	class UClass* ProjectileClass;
	class UClass* MyDamageType;
	FLOAT MaxAutoAimRange;
	INT ProjPerFire;
	FLOAT TracerFreq;
	FLOAT Spread;
	FLOAT Offset;
	FLOAT Range;
	FLOAT Damage;
	FLOAT DamageRadius;
	FLOAT AreaDamageTimer;
	BYTE AmmunitionType;
	BYTE FireStimulus;
	INT AimAdjustment;
	INT ZoomedAimAdjustment;
	FVector LastHitLocation;
	FRotator LastHitDir;
	class AActor* LastHitActor;
	FLOAT DamageDampening;
	class UClass* TracerEffect;
	class AEmitter* TracerEmitter;
	class AEmitter* CurrentHitEffect;
	class UClass* HitEffectsByMaterial;
	FLOAT HitEffectsProbability;
	class UTexPanner2D* PannerCharge;
	class UTexPanner2D* PannerClip;
	class UTexPanner2D* PannerDigit1;
	class UTexPanner2D* PannerDigit10;
	class UTexPanner2D* PannerDigit100;
	BITFIELD bHighPrecision:1;

	DECLARE_CLASS(AAmmunition,AInventory,CLASS_NativeReplication,Engine)
};

/*
 * Powerups
 */

class ENGINE_API APowerups : public AInventory{
public:
	INT NumCopies;
	BITFIELD bCanHaveMultipleCopies:1;
	BITFIELD bAutoActivate:1;
	BITFIELD bActivatable:1;
	BITFIELD bActive:1;
	FStringNoInit ExpireMessage;
	class USound* ActivateSound;
	class USound* DeActivateSound;

	DECLARE_CLASS(APowerups,AInventory,CLASS_NativeReplication,Engine)
};

/*
 * Weapon
 */

enum EFireMode{
	FM_SemiAuto,
	FM_Burst,
	FM_Automatic,
	FM_AnimationDriven,
	FM_MAX
};

enum EWeaponType{
	WT_None,
	WT_Primary,
	WT_Secondary,
	WT_Thrown,
	WT_Heal,
	WT_Turret,
	WT_Marker,
	WT_MAX
};

enum EPawnWeaponAnimation{
	PWA_Fire,
	PWA_Holster,
	PWA_Load,
	PWA_Idle,
	PWA_Melee,
	PWA_Throw,
	PWA_Reload,
	PWA_MAX
};

enum EWeaponIndexType{
	WI_Blaster,
	WI_Sniper,
	WI_AntiArmor,
	WI_Pistol,
	WI_Shotgun,
	WI_EliteBeam,
	WI_ConRifle,
	WI_RocketLauncher,
	WI_BowCaster,
	WI_SMG,
	WI_TrandoshanRifle,
	WI_MAX
};

class ENGINE_API AWeapon : public AInventory{
public:
	class UClass* AmmoName;
	class AAmmunition* AmmoType;
	INT PickupAmmoCount;
	INT InitAmmoAmount;
	INT ReloadCount;
	INT FireCount;
	FName OutOfAmmoEvent;
	BITFIELD bWeaponUp:1;
	BITFIELD bChangeWeapon:1;
	BITFIELD bCanThrow:1;
	BITFIELD bRapidFire:1;
	BITFIELD bForceReload:1;
	BITFIELD bCanReload:1;
	BITFIELD bSpectated:1;
	BITFIELD bMeleeWeapon:1;
	BITFIELD bSteadyToggle:1;
	BITFIELD bForceFire:1;
	BITFIELD bForceAltFire:1;
	BITFIELD bForcesWeaponChange:1;
	BITFIELD bAutoFire:1;
	BITFIELD bJustTravelled:1;
	BITFIELD bApplyKick:1;
	BITFIELD bRecoilShake:1;
	BITFIELD bWeaponZoom:1;
	BITFIELD bPlayingIdle:1;
	BITFIELD bLoopMelee:1;
	BITFIELD bLoopMuzzleFX:1;
	BITFIELD bZoomedAltFireCapable:1;
	BITFIELD bZoomedUsesNoHUDArms:1;
	BITFIELD bCanSwitchGrenade:1;
	BITFIELD bSaveAsLastWeapon:1;
	BITFIELD bCanThrowGrenadesWhenZoomed:1;
	class AWeapon* NewWeapon;
	INT AutoSwitchPriority;
	FVector FireOffset;
	FLOAT ShakeMag;
	FLOAT ShakeTime;
	FVector ShakeVert;
	FLOAT RollRate;
	FVector ShakeSpeed;
	FLOAT NumShakes;
	class UTexture* Reticle;
	class APowerups* Affector;
	INT BurstCount;
	BYTE FireMode;
	BYTE WeaponType;
	FVector FPFireOffset;
	FVector FPGrenadeOffset;
	FLOAT RecoilConstant;
	FLOAT RecoilDampening;
	FLOAT DisableRecoil;
	FLOAT XRecoilMultiplier;
	FLOAT XShakeMultiplier;
	FRotator WeaponKick;
	FRotator RecoilVelocity;
	FRotator InitRotation;
	FLOAT AimError;
	FLOAT ZoomedAimError;
	FLOAT ZoomDamageMultiplier;
	FLOAT OptimalDist;
	FRange ValidRange;
	class USound* FireSound;
	class USound* WeaponEmptySound;
	class USound* GrenadeEmptySound;
	class USound* HolsterSound;
	FStringNoInit MessageNoAmmo;
	FStringNoInit WeaponDescription;
	FColor NameColor;
	FLOAT DisplayFOV;
	FLOAT ZoomFOVs[4];
	INT NumZoomFOVs;
	INT CurrentZoomFOVIndex;
	class UVisionMode* VisionWeapon;
	class UVisionMode* VisionWeaponZoom;
	class UClass* MuzzleClass;
	class AEmitter* MuzzleFlash;
	BYTE FlashCount;
	FName MuzzleBone;
	class UClass* BreechEffectClass;
	class AEmitter* BreechEffect;
	FVector BreechOffset;
	FName BreechAttachBone;
	BITFIELD bHasAmmoNeedle:1;
	FLOAT FullClipAngle;
	FLOAT EmptyClipAngle;
	FLOAT AnglePerShot;
	FLOAT NeedleAngle;
	FLOAT NextShotTime;
	FLOAT ShotDelay;
	FLOAT LastTimeSeconds;
	FLOAT WeaponAccuracy;
	FLOAT PlayIdleTime;
	FLOAT StartIdleTime;
	FLOAT MeleeRange;
	FLOAT MeleeDamage;
	class UClass* MeleeDamageType;
	class UClass* MeleeHitEffectsByMaterial;
	class UClass* MeleeStatusEffect;
	FLOAT MeleeStatusEffectDuration;
	FLOAT MeleeStatusEffectDamagePerSec;
	FLOAT BeginMeleeLoopFrame;
	FName LoadAnim;
	FName FireAnim;
	FName HolsterAnim;
	INT soundQ[5];
	INT CurrIndex;
	FName FirstTimeSwitchEvent;
	BYTE WeaponIndex;
	FLOAT PlayerSpeedModifier;
	INT HudArmsShaderIndex[2];

	DECLARE_CLASS(AWeapon,AInventory,CLASS_NativeReplication,Engine)
	#include "AWeapon.h"
};

/*
 * InventoryAttachment
 */

class ENGINE_API AInventoryAttachment : public AActor{
public:
	DECLARE_CLASS(AInventoryAttachment,AActor,CLASS_NativeReplication,Engine)
	NO_DEFAULT_CONSTRUCTOR(AInventoryAttachment)
};

/*
 * WeaponAttachment
 */

class ENGINE_API AWeaponAttachment : public AInventoryAttachment{
public:
	BYTE FlashCount;
	BYTE PrivateFlashCount;
	BYTE ThrowCount;
	BYTE PrivateThrowCount;
	BYTE ReloadCount;
	BYTE PrivateReloadCount;
	BYTE MeleeCount;
	BYTE PrivateMeleeCount;
	BYTE HolsterCount;
	BYTE PrivateHolsterCount;
	BYTE LoadCount;
	BYTE PrivateLoadCount;
	BYTE StopFireCount;
	BYTE PrivateStopFireCount;
	BITFIELD bChangeHolsterCount:1;
	class AEmitter* MuzzleFlash;
	class UClass* MuzzleClass;
	FVector MuzzleOffset;
	FRotator MuzzleRotationOffset;
	class ADynamicLight* MuzzleLight;
	FVector LightOffset;
	FVector EffectLocationOffset[2];
	BITFIELD bPlayingFireSound:1;
	BITFIELD bAutoFire:1;
	BITFIELD bNeedToBreathePawn:1;
	class USound* LastLoopingSound;
	FName MPPawnBreatheAnim;
	FName MPPawnFireAnim;
	FName MPPawnHolsterAnim;
	FName MPPawnLoadAnim;
	FName MPPawnIdleAnim;
	FName MPPawnMeleeAnim;
	FName MPPawnThrowAnim;
	class UClass* ProjectileClass;

	// Events
	void AttachMuzzleFlash();
	void ThirdPersonEffects();

	DECLARE_CLASS(AWeaponAttachment,AInventoryAttachment,CLASS_NativeReplication,Engine)
};

/*
 * Keypoint
 */

class ENGINE_API AKeypoint : public AActor{
public:
	DECLARE_CLASS(AKeypoint,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};

/*
 * Light
 */

class ENGINE_API ALight : public AActor{
public:
	FLOAT MinCoronaSize;
	FLOAT MaxCoronaSize;
	FLOAT CoronaRotation;
	FLOAT CoronaRotationOffset;
	BITFIELD UseOwnFinalBlend:1;

	DECLARE_CLASS(ALight,AActor,0,Engine)
};

/*
 * DynamicLight
 */

class ENGINE_API ADynamicLight : public ALight{
public:
	DECLARE_CLASS(ADynamicLight,ALight,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ADynamicLight)
};

/*
 * MarkerIconActor
 */

class ENGINE_API AMarkerIconActor : public AActor{
public:
	FColor CurrentColor;
	FLOAT CurrentAlpha;
	FLOAT CurrentMorph;

	DECLARE_CLASS(AMarkerIconActor,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AMarkerIconActor)
};

/*
 * SquadMarker
 */

enum EMarkerAction{
	MA_None,
	MA_Activate,
	MA_Cancel,
	MA_MAX
};

enum EMarkerUsability{
	MU_Invalid,
	MU_Irrelevant,
	MU_Incapacitated,
	MU_Occupied,
	MU_Usable,
	MU_MAX
};

struct FMarkerParticipant{
	class UStaticMesh* IconMesh;
	class AMarkerIconActor* IconActor;
	class APawn* Member;
	BITFIELD bIconOnAnchorPt:1;
	FVector IconOffset;
};

class ENGINE_API ASquadMarker : public AMarkerIconActor{
public:
	class AVolume* EnableVolume;
	TArrayNoInit<class AActor*> Actors;
	class AActor* Anchor;
	FName EventUnderway;
	FName EventCompleted;
	class ASquad* Squad;
	BYTE MaxMembers;
	BYTE MembersRequired;
	BYTE MarkerGoals;
	BYTE TotalParticipants;
	BYTE HUDIconX;
	BYTE HUDIconY;
	TArrayNoInit<FName> MarkerAnims;
	class ASquadMarker* AlternateMarkers[3];
	class USound* CustomInitiateSound;
	FStringNoInit ActionString;
	FLOAT LastActivateTime;
	INT MarkerStage;
	FMarkerParticipant Participants[3];
	BITFIELD bSetupPhase:1;
	BITFIELD bCanCancelAfterUnderway:1;
	BITFIELD bComplete:1;
	BITFIELD bMarkerActive:1;
	BITFIELD bDisabledByAlternate:1;
	BITFIELD bValidSetup:1;
	BITFIELD AlwaysVisible:1;
	BITFIELD bFailed:1;
	BITFIELD bCancelIfMembersNeeded:1;
	class UClass* PreferredPawnClass;
	class UClass* InitiateStance;
	class UClass* FinishStance;
	BYTE InitiateCue;
	BYTE ConfirmCue;
	BYTE CancelCue;
	BYTE CancelConfirmCue;
	BYTE IrrelevantCue;
	FStringNoInit ActivatePromptText;
	TArrayNoInit<FString> ActivatePromptButtonFuncs;
	FStringNoInit CancelPromptText;
	TArrayNoInit<FString> CancelPromptButtonFuncs;
	FStringNoInit IrrelevantPromptText;
	FLOAT TargetingRadius;
	FLOAT TargetingDistance;
	FColor EnabledColor;
	FColor OmitColor;
	FColor OccupiedColor;
	FColor SetupColor;

	UBOOL IsSetUpProperly();

	// Events
	UBOOL MarkersActive();
	BYTE CurrentMarkerAction();
	UBOOL ExecuteMarker(class APawn* Instigator);

	DECLARE_CLASS(ASquadMarker,AMarkerIconActor,0,Engine)
};

/*
 * Menu
 */

enum InputSource{
	IS_None,
	IS_Mouse,
	IS_Keyboard,
	IS_Controller,
	IS_MAX
};

enum InputModifier{
	IM_None,
	IM_Alt,
	IM_Shift,
	IM_Ctrl,
	IM_MAX
};

class ENGINE_API AMenu : public AActor{
public:
	class AMenu* UnderlayMenu;
	class AMenu* PreviousMenu;
	class AMenu* TravelMenu;
	class USound* BackgroundMusic;
	BITFIELD bBackgroundMusicDuringLevel:1;
	BYTE LastInputSource;
	BYTE LastInputModifier;
	BITFIELD bRenderLevel:1;
	BITFIELD bPersistent:1;
	BITFIELD bNetworkOnly:1;
	BITFIELD bFullscreenOnly:1;
	BITFIELD bIgnoresInput:1;
	BITFIELD bFullscreenExclusive:1;
	FLOAT FullScreenOnlyTime;
	INT FullscreenPriority;
	BITFIELD bShowMouseCursor:1;
	BITFIELD bHideMousecursor:1;
	FLOAT MouseX;
	FLOAT MouseY;
	BITFIELD bRawKeyboardInput:1;
	BITFIELD bVignette:1;
	BITFIELD bRequiresEthernetLink:1;

	// Events
	void Init(const FString& Args);
	void DrawMenu(class UCanvas* C, UBOOL HasFocus);
	void HandleInputBack();
	void PostLevelChange();
	void TransferTransientElements(class AMenu* M);

	DECLARE_CLASS(AMenu,AActor,CLASS_Transient,Engine)
	// NOTE we have to expose this directly through C++, since
	//		we will want to draw the menu when actor script calls might be
	//		unavailable (during level loads).
	virtual void NativeDrawMenu(UCanvas* C, UBOOL HasFocus){}
};

/*
 * MissionObjectives
 */

enum EObjectiveMode{
	OM_Hidden,
	OM_Incomplete,
	OM_Completed,
	OM_Failed,
	OM_Removed,
	OM_MAX
};

struct FSingleObjective{
	FStringNoInit Objective;
	BYTE Stat;
};

class ENGINE_API AMissionObjectives : public AActor{
public:
	TArrayNoInit<FSingleObjective> MissionObj;
	FLOAT FadeTime;
	FColor CritTextColor;
	FColor IncompleteColor;
	FColor CompletedColor;
	FColor FailedColor;
	INT CurrentObjective;
	INT NumObjectives;

	DECLARE_CLASS(AMissionObjectives,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AMissionObjectives)
};

/*
 * Mover
 */

enum EMoverEncroachType{
	ME_StopWhenEncroach,
	ME_ReturnWhenEncroach,
	ME_CrushWhenEncroach,
	ME_IgnoreWhenEncroach,
	ME_MAX
};

enum EMoverGlideType{
	MV_MoveByTime,
	MV_GlideByTime,
	MV_MAX
};

enum EBumpType{
	BT_PlayerBump,
	BT_PawnBump,
	BT_AnyBump,
	BT_MAX
};

class ENGINE_API AMover : public AActor{
public:
	BYTE MoverEncroachType;
	BYTE MoverGlideType;
	BYTE BumpType;
	BYTE KeyNum;
	BYTE PrevKeyNum;
	BYTE NumKeys;
	BYTE WorldRaytraceKey;
	BYTE BrushRaytraceKey;
	FLOAT MoveTimes[16];
	FLOAT StayOpenTime;
	FLOAT OtherTime;
	INT EncroachDamage;
	BITFIELD bTriggerOnceOnly:1;
	BITFIELD bSlave:1;
	BITFIELD bUseTriggered:1;
	BITFIELD bDamageTriggered:1;
	BITFIELD bDynamicLightMover:1;
	BITFIELD bUseShortestRotation:1;
	BITFIELD bIsLeader:1;
	FName PlayerBumpEvent;
	FName BumpEvent;
	class AActor* SavedTrigger;
	FLOAT DamageThreshold;
	INT numTriggerEvents;
	class AMover* Leader;
	class AMover* Follower;
	FLOAT DelayTime;
	INT ReturnLoopTime;
	INT ScriptTriggeredKeyframe;
	class UClass* ImpactDamageType;
	class USound* OpeningSound;
	class USound* OpenedSound;
	class USound* ClosingSound;
	class USound* ClosedSound;
	class USound* MoveAmbientSound;
	class USound* LoopSound;
	FName OpeningEvent;
	FName OpenedEvent;
	FName ClosingEvent;
	FName ClosedEvent;
	FName LoopEvent;
	FVector KeyPos[24];
	FRotator KeyRot[24];
	FVector BasePos;
	FVector OldPos;
	FVector OldPrePivot;
	FVector SavedPos;
	FVector InitPos;
	FRotator BaseRot;
	FRotator OldRot;
	FRotator SavedRot;
	FRotator InitRot;
	FLOAT PhysAlpha;
	FLOAT PhysRate;
	class ANavigationPoint* MyMarker;
	BITFIELD bOpening:1;
	BITFIELD bClosing:1;
	BITFIELD bDelaying:1;
	BITFIELD bClientPause:1;
	BITFIELD bClosed:1;
	BITFIELD bOpened:1;
	BITFIELD bPlayerOnly:1;
	BITFIELD bAutoDoor:1;
	BITFIELD bNoAIRelevance:1;
	FVector SimOldPos;
	INT SimOldRotPitch;
	INT SimOldRotYaw;
	INT SimOldRotRoll;
	FVector SimInterpolate;
	FVector RealPosition;
	FRotator RealRotation;
	INT ClientUpdate;
	TArrayNoInit<class AAntiPortalActor*> AntiPortals;
	FName AntiPortalTag;

	// Events
	void KeyFrameReached();

	DECLARE_CLASS(AMover,AActor,CLASS_NativeReplication,Engine)
};

/*
 * Triggers
 */

class ENGINE_API ATriggers : public AActor
{
public:
	DECLARE_CLASS(ATriggers,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

/*
 * LineOfSightTrigger
 */

struct ALineOfSightTrigger_eventPlayerSeesMe_Parms{
	class APlayerController* P;
};

class ENGINE_API ALineOfSightTrigger : public ATriggers{
public:
	FLOAT MaxViewDist;
	FLOAT OldTickTime;
	BITFIELD bEnabled:1;
	BITFIELD bTriggered:1;
	FName SeenActorTag;
	class AActor* SeenActor;
	INT MaxViewAngle;
	FLOAT RequiredViewDir;
	DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)

	// Overrides
	virtual void TickAuthoritative(FLOAT DeltaTime);

	void PlayerSeesMe(class APlayerController* Player);
};

/*
 * Trigger
 */

enum ETriggerType{
	TT_PlayerProximity,
	TT_PawnProximity,
	TT_ClassProximity,
	TT_AnyProximity,
	TT_Shoot,
	TT_HumanPlayerProximity,
	TT_Use,
	TT_SquadMemberProximity,
	TT_MAX
};

class ENGINE_API ATrigger : public ATriggers{
public:
	BYTE TriggerType;
	FStringNoInit Message;
	BITFIELD bTriggerOnceOnly:1;
	BITFIELD bInitiallyActive:1;
	BITFIELD bMustExceedCountSimultaneously:1;
	INT TouchThreshold;
	INT CurrentTouchCount;
	class UClass* ClassProximityType;
	FLOAT RepeatTriggerTime;
	FLOAT ReTriggerDelay;
	FLOAT TriggerTime;
	FLOAT DamageThreshold;
	FName ExitEvent;
	FName EmptyEvent;
	AActor* DirectTrigger;
	BITFIELD bSavedInitialCollision:1;
	BITFIELD bSavedInitialActive:1;
	DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

/*
 * NavigationPoint
 */

enum ENavConnectionType{
	NCT_Normal,
	NCT_NoJump,
	NCT_NoDoor,
	NCT_NoPerch,
	NCT_NoFly,
	NCT_NoBottleneck,
	NCT_NotBlocked,
	NCT_MAX
};

class ENGINE_API ANavigationPoint : public AActor{
public:
	TArrayNoInit<class UReachSpec*> PathList;
	TArrayNoInit<class ANavigationPoint*> ForcedLinks;
	TArrayNoInit<class ANavigationPoint*> IgnoredList;
	INT PathSession;
	class ANavigationPoint* nextNavigationPoint;
	class UReachSpec* prevLink;
	FLOAT DistanceToNextObjective;
	INT cost;
	INT ExtraCost;
	INT FutureCost;
	FLOAT CeilingHeight;
	FLOAT RadiusOverride;
	class APawn* MostRecentOccupant;
	BITFIELD taken:1;
	BITFIELD bBlocked:1;
	BITFIELD bPropagatesSound:1;
	BITFIELD bOneWayPath:1;
	BITFIELD bCombatNode:1;
	BITFIELD bCoverPoint:1;
	BITFIELD bSpecialMove:1;
	BITFIELD bNoAutoConnect:1;
	BITFIELD bOpen:1;
	BITFIELD bClosed:1;
	BITFIELD bNotBased:1;
	BITFIELD bPathsChanged:1;
	BITFIELD bDestinationOnly:1;
	BITFIELD bSourceOnly:1;
	BITFIELD bUseRadiusWhenBasing:1;
	BITFIELD bSquadShouldCrouch:1;
	BITFIELD bValidSecurePosition:1;
	BITFIELD bUseGrenades:1;
	BITFIELD bUseAntiArmor:1;
	BITFIELD bUseSniper:1;
	BITFIELD bDontIdleHere:1;
	BITFIELD bThrownGrenade:1;
	BITFIELD bAntiArmorUsed:1;
	BITFIELD bSniperUsed:1;
	BITFIELD bTempNoCollide:1;
	BITFIELD bRemoveMeOnRebuild:1;
	BITFIELD bEnabled:1;
	BITFIELD bMayPreferVsCover:1;
	BITFIELD bOverrideCeilingHeight:1;
	BYTE TrapCount;
	BYTE referenceCount;
	BYTE CCRegions[7];

	void SetBlocked(UBOOL blocked);

	// Events
	INT SpecialCost(class APawn* Seeker, class UReachSpec* Path);
	UBOOL Accept(class AActor* Incoming, class AActor* Source);
	UBOOL SuggestMovePreparation(class APawn* Other);

	// Overrides
	virtual void Destroy();
	virtual void PostEditChange();
	virtual void PostEditPaste();
	virtual class ANavigationPoint* GetAnchor();
	virtual void PostEditMove();
	virtual void Spawned();
	virtual int AddMyMarker(AActor*);
	virtual void CheckForErrors();

	// Virtual Functions
	virtual int ProscribedPathTo(class ANavigationPoint*);
	virtual void addReachSpecs(class APawn*, int);
	virtual void addReachSpecTo(class ANavigationPoint*, class APawn*);
	virtual void PostaddReachSpecs(class APawn*);
	virtual void InitForPathFinding();
	virtual void SetupForcedPath(class APawn*, class UReachSpec*);
	virtual void ClearPaths();
	virtual void FindBase();
	virtual int CanBeValidAnchorFor(class APawn*);
	virtual bool IsValidForTarget(class FVector const&);
	virtual void ClearNodeInfo();
	virtual int IsAvailable() const;
	virtual int IsIdentifiedAs(FName);
	virtual int ReviewPath(class APawn*);
	virtual void CheckSymmetry(class ANavigationPoint*);
	virtual void AdjustRadius();
	virtual void RemoveObstructed();

	DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
};

/*
 * CoverPoint
 */

class ENGINE_API ACoverPoint : public ANavigationPoint{
public:
	BITFIELD bOverrideStrafe:1;
	BITFIELD bOverrideHeight:1;
	BITFIELD bOverrideLean:1;
	BITFIELD bOverrideCorner:1;
	BITFIELD CanLeanLeft:1;
	BITFIELD CanLeanRight:1;
	BITFIELD CanCornerLeft:1;
	BITFIELD CanCornerRight:1;
	BITFIELD bHadCoverProvider:1;
	FLOAT FOVdegrees;
	FLOAT StrafeDistLeft;
	FLOAT StrafeDistRight;
	FLOAT CoverHeight;
	FLOAT DistanceToCover;
	class AActor* CoverProvider;
	FVector LookDir;
	FLOAT minDotProduct;

	DECLARE_CLASS(ACoverPoint,ANavigationPoint,0,Engine)
};

/*
 * Perch
 */

class ENGINE_API APerch : public ANavigationPoint{
public:
	BITFIELD bCeiling:1;
	class UStaticMesh* WallMesh;
	class UStaticMesh* CeilingMesh;

	DECLARE_CLASS(APerch,ANavigationPoint,0,Engine)

	virtual UBOOL CanBeValidAnchorFor(APawn *Pawn);
};

/*
 * PathNode
 */
class ENGINE_API APathNode : public ANavigationPoint{
	DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
};

/*
 * PlayerStart
 */

class ENGINE_API APlayerStart : public ANavigationPoint{
public:
	BYTE TeamNumber;
	BITFIELD bSinglePlayerStart:1;
	BITFIELD bCoopStart:1;
	BITFIELD bEnabled:1;
	BITFIELD bPrimaryStart:1;
	BITFIELD bClearAllWeapons:1;
	BITFIELD bClearSecondary:1;
	FLOAT LastSpawnCampTime;
	TArrayNoInit<FString> StartInventory;

	DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
};

/*
 * SquadMarkerSpot
 */

class ENGINE_API ASquadMarkerSpot : public ANavigationPoint{
public:
	class AActor* MyAnchor;

	DECLARE_CLASS(ASquadMarkerSpot,ANavigationPoint,0,Engine)
};

/*
 * Teleporter
 */

class ENGINE_API ATeleporter : public ANavigationPoint{
public:
	FStringNoInit URL;
	FName ProductRequired;
	BITFIELD bChangesVelocity:1;
	BITFIELD bChangesYaw:1;
	BITFIELD bReversesX:1;
	BITFIELD bReversesY:1;
	BITFIELD bReversesZ:1;
	BITFIELD bEnabled:1;
	FVector TargetVelocity;
	class AActor* TriggerActor;
	class AActor* TriggerActor2;
	FName AcceptEvent;
	FLOAT LastFired;

	DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
};

/*
 * Pawn
 */

enum EPawnMovementStyle{
	MS_None,
	MS_Walk,
	MS_WalkWounded,
	MS_Run,
	MS_RunWounded,
	MS_Crouch,
	MS_Ladder,
	MS_Swim,
	MS_Fly,
	MS_MAX
};

enum EStartState{
	SS_Idle,
	SS_Wander,
	SS_Perched,
	SS_PerchedCeiling,
	SS_Shutdown,
	SS_Asleep,
	SS_StationaryAttack,
	SS_MAX
};

enum EIdleState{
	AS_Shutdown,
	AS_Relaxed,
	AS_Alert,
	AS_Berserk,
	AS_PerchedCeiling,
	AS_PerchedWall,
	AS_Possessed,
	AS_StandTurret,
	AS_SitTurret,
	AS_BackToWall,
	AS_MAX
};

enum EHealthLevel{
	HL_Red,
	HL_Orange,
	HL_Yellow,
	HL_Green,
	HL_MAX
};

enum EPatrolMode{
	PM_Loop,
	PM_PingPong,
	PM_Random,
	PM_Once,
	PM_MAX
};

struct FPatrolPoint{
	class AActor* Node;
	FLOAT PauseTime;
	FName Animation;
	INT NumAnimLoops;
	FName Event;
	BITFIELD RunToNode:1;
	BITFIELD ShootWhileMoving:1;
	BITFIELD OrientToNode:1;
	BITFIELD MakeInvulnerable:1;
	FLOAT PatrolPriorityOverride;
};

struct FDamageMultiplier{
	FName BoneName;
	FLOAT Multiplier;
};

struct FAccessoryInfo{
	BITFIELD HasBeenUsed:1;
	BITFIELD IsRequired:1;
	class UClass* AccessoryClass;
	FName BoneName;
};

struct FDismembermentInfo{
	FName Bone;
	FLOAT SpawnProbability;
	class UClass* Part;
	class UClass* DismembermentEffectClass;
	BITFIELD DisablePartialDismemberment:1;
};

struct FFinishingMove{
	FName EnemyClass;
	FName Animation;
	BYTE DirectionFromEnemy;
	FVector OffsetFromEnemy;
};

struct FImpactAnim{
	FName BoneName;
	FName Animation;
};

#define UCONST_LayerAnimChannel 3
#define UCONST_DamageAnimChannel 4
#define UCONST_REDDELAY 15.0

class ENGINE_API APawn : public AActor{
public:
	BITFIELD bIsWalking:1;
	BITFIELD bWantsToCrouch:1;
	BITFIELD bIsCrouched:1;
	BITFIELD bTryToUncrouch:1;
	BITFIELD bJustLanded:1;
	BITFIELD bWarping:1;
	BITFIELD bUpAndOut:1;
	BITFIELD bCrawler:1;
	BITFIELD bRollToDesired:1;
	BITFIELD bPhysicsAnimUpdate:1;
	BITFIELD bWasCrouched:1;
	BITFIELD bWasWalking:1;
	BITFIELD bWasOnGround:1;
	BITFIELD bPlayedDeath:1;
	BITFIELD bCannotDie:1;
	BITFIELD bIncapacitated:1;
	BITFIELD bFallOnDeath:1;
	BITFIELD bHasFullFlyAnims:1;
	BITFIELD bDisallowPainAnims:1;
	BITFIELD bIncapacitatedOnTurret:1;
	BITFIELD bIgnoreFriendlyFire:1;
	BITFIELD bCanJump:1;
	BITFIELD bCanLedgeFall:1;
	BITFIELD bCanCrouch:1;
	BITFIELD bCanWalk:1;
	BITFIELD bCanRun:1;
	BITFIELD bCanSwim:1;
	BITFIELD bCanFly:1;
	BITFIELD bCanClimbLadders:1;
	BITFIELD bCanStrafe:1;
	BITFIELD bCanDodge:1;
	BITFIELD bCanSideStep:1;
	BITFIELD bCanDive:1;
	BITFIELD bCanPerch:1;
	BITFIELD bCanLean:1;
	BITFIELD bMustStopToTurn:1;
	BITFIELD bDisableFireAnims:1;
	BITFIELD bSaveMyCorpse:1;
	BITFIELD bAvoidLedges:1;
	BITFIELD bStopAtLedges:1;
	BITFIELD bCanWalkOffLedges:1;
	BITFIELD bDismembered:1;
	BITFIELD bNoJumpAdjust:1;
	BITFIELD bIgnoreForces:1;
	BITFIELD bNoVelocityUpdate:1;
	BITFIELD bClientCollision:1;
	BITFIELD bCollideAfterDeath:1;
	BITFIELD bSimulateGravity:1;
	BITFIELD bSimGravityDisabled:1;
	BITFIELD bCachedRelevant:1;
	BITFIELD bUseCompressedPosition:1;
	BITFIELD bIsSquadLeader:1;
	BITFIELD HealthAffectsGameplay:1;
	BITFIELD bDebugAI:1;
	BITFIELD bDontPossess:1;
	BITFIELD bCanBeSquadMember:1;
	BITFIELD bTossWeaponOnDeath:1;
	BITFIELD bDecelerateOnArrival:1;
	BITFIELD bUseAnalogSpeed:1;
	BITFIELD bUseSpeedScaler:1;
	BITFIELD bBeingRevivedByPlayer:1;
	BITFIELD bPerceivedAsThreat:1;
	BITFIELD bNeverMeleeMe:1;
	BITFIELD bSquadShouldFallBack:1;
	BITFIELD bLOSHearing:1;
	BITFIELD bSameZoneHearing:1;
	BITFIELD bAdjacentZoneHearing:1;
	BITFIELD bMuffledHearing:1;
	BITFIELD bAroundCornerHearing:1;
	BITFIELD bOnPathFailNoCollision:1;
	BITFIELD bOnPathFailTeleport:1;
	BITFIELD bCanPerformSquadMarkers:1;
	BITFIELD bUpdateEyeheight:1;
	BITFIELD bUpdatingDisplay:1;
	BITFIELD bHideRegularHUD:1;
	BITFIELD bDidDamageThisFrame:1;
	BITFIELD bSetDamageThisFrame:1;
	BITFIELD bWeaponBob:1;
	BITFIELD bCanPickupInventory:1;
	BITFIELD bCanSpecialPickup:1;
	BITFIELD bNoDefaultInventory:1;
	BITFIELD bAutoActivate:1;
	BITFIELD bShowFOV:1;
	BITFIELD bShowHearing:1;
	BITFIELD bShowPathing:1;
	BITFIELD bShowEnemy:1;
	BITFIELD bShowFocus:1;
	BITFIELD bShowMoveDest:1;
	BITFIELD bShowStateTint:1;
	BITFIELD bCanBeBaseForPawns:1;
	BITFIELD bDirectHitWall:1;
	BITFIELD bSoakDebug:1;
	BITFIELD bIsTrandoshan:1;
	BITFIELD bEnableTurn:1;
	BITFIELD bEnableAim:1;
	BITFIELD bEnableHead:1;
	BITFIELD bHas180Turns:1;
	BITFIELD bWasHit:1;
	BITFIELD bWasHitWasSent:1;
	FLOAT Health;
	FLOAT MaxHealth;
	FLOAT Shields;
	FLOAT MaxShields;
	FLOAT ShieldRechargeRate;
	FLOAT ShieldRechargeDelay;
	BYTE HealthLevel;
	FLOAT NextShieldRechargeTime;
	TArrayNoInit<FDamageMultiplier> DamageMultipliers;
	class UClass* ShieldDamageVariance;
	FLOAT ArmorFactor;
	FLOAT BleedOutTime;
	FLOAT MinImpactDamage;
	FLOAT MinImpactInterval;
	FLOAT LastImpactTime;
	FLOAT MinStaggerDamage;
	FLOAT MinStaggerInterval;
	FLOAT LastStaggerTime;
	TArrayNoInit<FImpactAnim> ImpactAnims;
	class UClass* BestGrenadeAgainst;
	class AWeapon* PendingWeapon;
	class AWeapon* Weapon;
	class AWeapon* OldWeapon;
	class AWeapon* CurrentTossableWeapon;
	class AWeapon* CurrentGrenade;
	class APowerups* SelectedItem;
	FStringNoInit RequiredEquipment[16];
	FStringNoInit ActionString;
	class AFlashlight* Flashlight;
	FLOAT DropGrenadePercentage;
	class UClass* ReturnGrenadeClass;
	TArrayNoInit<FAccessoryInfo> AvailableAccessories;
	INT MaxAccessories;
	TArrayNoInit<class AAccessory*> Accessories;
	class UClass* DeathEffect;
	TArrayNoInit<FDismembermentInfo> DismembermentParts;
	FLOAT DismembermentThreshold;
	class UClass* DeathEffectContainerClass;
	class UMaterial* BurntMaterial;
	TArrayNoInit<FFinishingMove> FinishingMoves;
	TArrayNoInit<FMeshSetLinkup> MeshSets;
	class APawn* EnemyKilledThisFrame;
	TArrayNoInit<class UMaterial*> VisorBloodSplatters;
	INT CurrentUserVisionMode;
	class UVisionMode* VisionPawnUser[3];
	class UVisionMode* VisionPawnHit;
	class UVisionMode* VisionPawnIncap;
	class UVisionMode* VisionPawnScavDrill;
	FColor ShieldColor;
	FLOAT HearingThreshold;
	FLOAT SightRadius;
	FLOAT PeripheralVision;
	FLOAT AutoDetectRadius;
	FLOAT BaseEyeHeight;
	FLOAT EyeHeight;
	FLOAT OldZ;
	class AController* Controller;
	class UClass* ControllerClass;
	BYTE StartState;
	BYTE PatrolMode;
	BYTE Visibility;
	BYTE SquadHUDSlot;
	FLOAT PatrolPriority;
	TArrayNoInit<FPatrolPoint> PatrolRoute;
	FName AIScriptTag;
	INT TeamIndex;
	INT TargetedByCount;
	class ASquad* Squad;
	FLOAT Accuracy;
	FVector MovementOffsetDir;
	FLOAT AnalogSpeed;
	FLOAT MaximumDesiredSpeed;
	FVector TakeHitLocation;
	class UClass* HitDamageType;
	class UClass* LastHitDamageType;
	class APawn* LastHitBy;
	FLOAT LastHitLocalTime;
	FVector LastHitLocation;
	FName LastHitBone;
	FLOAT MaxDeathLoopTime;
	FLOAT DeathLoopStartTime;
	FLOAT GunHeight;
	FLOAT LastDodgeTime;
	FVector PreDodgeLocation;
	FName FirstDamagedEvent;
	class ANavigationPoint* Anchor;
	class UReachSpec* CurrentLink;
	FVector CurrentLinkDir;
	class ANavigationPoint* LastAnchor;
	FLOAT FindAnchorFailedTime;
	FLOAT LastValidAnchorTime;
	FLOAT DestinationOffset;
	FLOAT AvgPhysicsTime;
	FVector AvoidanceDir;
	FLOAT NextAvoidanceTime;
	FStringNoInit OwnerName;
	class APlayerReplicationInfo* PlayerReplicationInfo;
	FName LandMovementState;
	FName WaterMovementState;
	FVector Floor;
	FLOAT CrouchHeight;
	FLOAT CrouchRadius;
	FLOAT PerchRadius;
	FLOAT NextFootstepTime;
	FLOAT StrafeDistance;
	FLOAT StepDistance;
	FLOAT DodgeDistance;
	FLOAT LeapDistance;
	FLOAT LeanDistance;
	INT FlyingRollMult;
	FLOAT GroundSpeed;
	FLOAT WaterSpeed;
	FLOAT AirSpeed;
	FLOAT LadderSpeed;
	FLOAT MaxFallSpeed;
	FLOAT AccelRate;
	FLOAT JumpZ;
	FLOAT AirControl;
	FLOAT WalkSpeedRatio;
	FLOAT CrouchSpeedRatio;
	FLOAT WoundedSpeedRatio;
	FLOAT BackSpeedRatio;
	FLOAT SideSpeedRatio;
	FLOAT AimSpeed;
	FLOAT DecelRate;
	FLOAT MinCorrectedSpeed;
	FLOAT MaxAnalogOverdriveRatio;
	BYTE RunStimulus;
	BYTE WalkStimulus;
	BYTE OldPhysics;
	BYTE CurrentMovementStyle;
	BYTE CurrentIdleState;
	BYTE OldIdleState;
	FLOAT OldRotYaw;
	FVector OldAcceleration;
	FName MovementAnim;
	FName TurnLeftAnim;
	FName TurnRightAnim;
	FName BreatheWeaponAnim;
	FLOAT MovementBlendStartTime;
	FLOAT MaxAimYaw;
	FLOAT MaxAimPitch;
	FLOAT MaxLookYaw;
	FLOAT MaxLookPitch;
	class UClass* AudioTable;
	FLOAT EndTalkTime;
	FLOAT MinYelpTime;
	FLOAT LastYelpTime;
	FLOAT MinShieldDamageSoundInterval;
	FLOAT LastShieldDamageSoundTime;
	class USound* ShieldDamageSound;
	BYTE MostRecentCue;
	BYTE EnemySpottedCue;
	BYTE KilledEnemyCue;
	BYTE AllyDownCue;
	BYTE DownedByCue;
	BYTE AssistingAllyCue;
	class USound* Land;
	TArrayNoInit<class USound*> RagImpactSounds;
	FLOAT RagImpactSoundInterval;
	FLOAT RagImpactVolume;
	FLOAT RagLastSoundTime;
	FLOAT RagdollLifeSpan;
	FStringNoInit RagdollOverride;
	FName AnimAction;
	FLOAT LastStartTime;
	FCompressedPosition PawnPosition;
	FLOAT NetRelevancyTime;
	class APlayerController* LastRealViewer;
	class AActor* LastViewer;
	class APlayerStart* LastStartSpot;
	FLOAT LastLocTime;
	FLOAT SplashTime;
	FLOAT Bob;
	FLOAT LandBob;
	FLOAT AppliedBob;
	FLOAT BobTime;
	FVector WalkBob;
	FLOAT UncrouchTime;
	FVector TearOffMomentum;
	class AProjector* Shadow;
	class APhysicsVolume* HeadVolume;
	FLOAT SpawnTime;
	FLOAT DamageScaling;

	DECLARE_CLASS(APawn,AActor,CLASS_Config|CLASS_NativeReplication,Engine)
	#include "APawn.h"
};

/*
 * Turret
 */

struct FTurretInfo{
	FName TransitionEvent;
	class UMaterial* TransitionMaterial;
	INT TransitionMaterialIndex;
	class USound* TransitionSound;
	class UClass* TransitionEffect;
	FVector TransitionEffectOffset;
};

class ENGINE_API ATurret : public APawn{
public:
	class APawn* Gunner;
	FVector TargetDirection;
	FName ControlEvent;
	FName ReleaseEvent;
	FName PlayerControlEvent;
	FName PitchJoint;
	FName YawJoint;
	INT MinPitch;
	INT MaxPitch;
	INT MinYaw;
	INT MaxYaw;
	INT LastNewYaw;
	INT LastNewPitch;
	INT LastPitchAdjustment;
	INT Speed;
	INT Yaw;
	INT Pitch;
	INT TurretHeight;
	FLOAT FireRate;
	FLOAT LastFireTime;
	FLOAT LastPitchAdjustTime;
	class UClass* AmmoName;
	class AAmmunition* AmmoType;
	class USound* FireSound;
	class USound* CurrentLoopingFireSound;
	FLOAT ArmorAngle;
	BITFIELD bUnlimitedYaw:1;
	BITFIELD bPlayedStartSound:1;
	BITFIELD bLoopingFireSound:1;
	BITFIELD bUseSmartShot:1;
	BITFIELD bResetTurret:1;
	BITFIELD bInitLocation:1;
	BITFIELD bFire:1;
	BITFIELD bCooldown:1;
	BITFIELD bIsAuto:1;
	BITFIELD SitToUse:1;
	BITFIELD Damagable:1;
	BITFIELD bDeployed:1;
	BITFIELD bPlayerUsable:1;
	class APawn* ReservedBy;
	FLOAT TurretDeltaTime;
	FLOAT MinYawRotation;
	FLOAT MaxYawRotation;
	FLOAT TimeUntilCooldown;
	FLOAT CooldownDuration;
	FLOAT BeginCooldownTime;
	FLOAT BeginFireTime;
	FLOAT ShotDelay;
	class UClass* FPWeaponClass;
	class UClass* MuzzleEffect;
	class UClass* LaserBeamClass;
	class AActor* Laser;
	class USound* StartRotateSound;
	class USound* LoopRotateSound;
	class USound* StopRotateSound;
	FTurretInfo OffStateEnemy;
	FTurretInfo OffStateFriend;
	FTurretInfo OnStateEnemy;
	FTurretInfo OnStateFriend;
	FTurretInfo CoolStateEnemy;
	FTurretInfo CoolStateFriend;
	FTurretInfo DeadState;

	// Events
	void ReserveFor(class APawn* User);
	void Release();
	UBOOL IsAvailableFor(class APawn* User);
	FVector GetMuzzleLocation();

	DECLARE_CLASS(ATurret,APawn,CLASS_Config,Engine)

	virtual ANavigationPoint* GetAnchor();
	virtual bool CanAimAt(const FVector& AimLoc);
	virtual UBOOL ShouldTrace(AActor *SourceActor, DWORD TraceFlags);
};

/*
 * Scout
 */
class ENGINE_API AScout : public APawn{
public:
	FLOAT MaxLandingVelocity;

	DECLARE_CLASS(AScout, APawn, CLASS_Config, Engine);
};

/*
 * Pickup
 */

enum EPickupType{
	PUT_Health,
	PUT_Ammo,
	PUT_Weapon,
	PUT_Grenade,
	PUT_MAX
};

class ENGINE_API APickup : public AActor{
public:
	class UClass* InventoryType;
	BITFIELD bInstantRespawn:1;
	BITFIELD bOnlyReplicateHidden:1;
	BITFIELD bDropped:1;
	BITFIELD bPredictRespawns:1;
	BITFIELD bAddToNav:1;
	BITFIELD bDroppedWeaponStay:1;
	BITFIELD bForceRespawn:1;
	BITFIELD bSpecialPickup:1;
	FLOAT RespawnTime;
	FLOAT RespawnEffectTime;
	FLOAT DroppedLifetime;
	FLOAT MPCollisionRadius;
	FLOAT MPCollisionHeight;
	FStringNoInit PickupMessage;
	class USound* PickupSound;
	FStringNoInit PickupForce;
	BYTE PickupType;
	class UMesh* AlternateHUDArmsMesh;

	DECLARE_CLASS(APickup,AActor,CLASS_NativeReplication,Engine)
};

/*
 * Ammo
 */

class ENGINE_API AAmmo : public APickup{
public:
	INT AmmoAmount;

	DECLARE_CLASS(AAmmo,APickup,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AAmmo)
};

/*
 * Projectile
 */

class ENGINE_API AProjectile : public AActor{
public:
	FLOAT Speed;
	FLOAT MaxSpeed;
	FLOAT TossZ;
	class AActor* ZeroCollider;
	BITFIELD bSwitchToZeroCollision:1;
	BITFIELD bDelayDestroy:1;
	BITFIELD bLaserBolt:1;
	INT AccelFactor;
	FLOAT Damage;
	FLOAT DamageRadius;
	class UClass* MyDamageType;
	class USound* SpawnSound;
	class USound* ImpactSound;
	BYTE WallHitStimulus;
	class UClass* ProjectileEffect;
	class AEmitter* ParticleFX;
	FLOAT ExploWallOut;
	class AActor* Target;
	class UClass* HitEffectsByMaterial;
	FLOAT HitEffectsProbability;

	DECLARE_CLASS(AProjectile,AActor,0,Engine)
};

/*
 * Projector
 */

enum EProjectorBlending{
	PB_None,
	PB_Modulate,
	PB_AlphaBlend,
	PB_Add,
	PB_Modulate2X,
	PB_MAX
};

#define UCONST_EXCLUSION_LIST_SIZE 4

class ENGINE_API AProjector : public AActor{
public:
	BYTE MaterialBlendingOp;
	BYTE FrameBufferBlendingOp;
	class UMaterial* ProjTexture;
	INT FOV;
	INT MaxTraceDistance;
	BITFIELD bProjectBSP:1;
	BITFIELD bProjectTerrain:1;
	BITFIELD bProjectStaticMesh:1;
	BITFIELD bProjectParticles:1;
	BITFIELD bProjectActor:1;
	BITFIELD bLevelStatic:1;
	BITFIELD bClipBSP:1;
	BITFIELD bClipStaticMesh:1;
	BITFIELD bProjectOnUnlit:1;
	BITFIELD bGradient:1;
	BITFIELD bProjectOnBackfaces:1;
	BITFIELD bProjectOnAlpha:1;
	BITFIELD bProjectOnParallelBSP:1;
	BITFIELD bDynamicAttach:1;
	FName ProjectTag;
	BITFIELD bShadow:1;
	class AActor* ExclusionList[4];
	FPlane FrustumPlanes[6];
	FVector FrustumVertices[8];
	FBox Box;
	class FProjectorRenderInfoPtr* RenderInfo;
	class UTexture* GradientTexture;
	FMatrix GradientMatrix;
	FMatrix Matrix;
	FVector OldLocation;

	DECLARE_CLASS(AProjector,AActor,0,Engine)
};

/*
 * ShadowProjector
 */

class ENGINE_API AShadowProjector : public AProjector{
public:
	class AActor* ShadowActor;
	FVector LightDirection;
	FLOAT LightDistance;
	FLOAT ShadowIntensity;
	BITFIELD RootMotion:1;
	BITFIELD bBlobShadow:1;
	BITFIELD bShadowActive:1;
	BITFIELD bUseLightAverage:1;
	class UShadowBitmapMaterial* ShadowTexture;
	void UpdateShadow();

	DECLARE_CLASS(AShadowProjector,AProjector,0,Engine)

	virtual UMaterial* GetProjTexture();
};

/*
 * Prop
 */

struct FTransitionInfo{
	FName Event;
	class UClass* TransitionEffect;
	FVector TransitionEffectOffset;
	class USound* TransitionSound;
	class UMaterial* Material;
	class UStaticMesh* Mesh;
	FVector ImpulseDir;
	FLOAT ImpulseMagnitude;
	class UClass* ImpulseDamageType;
	BITFIELD bDisableCollision:1;
	BITFIELD bAttachEffect:1;
	BITFIELD bPreserveEffect:1;
	BYTE TransitionStimulus;
	FLOAT StateLifeSpan;
	FLOAT StateLifeSpanMax;
	class AEmitter* SpawnedEmitter;
};


class ENGINE_API AProp : public AActor{
public:
	INT Health;
	FLOAT DamagedRatio;
	INT InitialHealth;
	FLOAT ExplosionRadius;
	FLOAT ExplosionDamage;
	class UClass* ExplosionDamageType;
	class UClass* ExplosionStatusEffect;
	FLOAT StatusEffectMaxDuration;
	FLOAT StatusEffectDamagePerSec;
	BYTE ExplosionAIStimulus;
	class UClass* DeathSpawnActorClass;
	FTransitionInfo DamagedState;
	FTransitionInfo DestroyedState;
	BITFIELD bDisplayStateMessages:1;

	DECLARE_CLASS(AProp,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AProp)
};

/*
 * KarmaProp
 */

class ENGINE_API AKarmaProp : public AProp{
public:
	BITFIELD bKTakeShot:1;
	BITFIELD bTakeDamageOnWorldImpact:1;
	BITFIELD bOrientImpactEffect:1;
	BYTE ImpactStimulus;
	INT DamageThreshold;
	FLOAT ImpactDamageMultiplier;
	FLOAT ImpactDamageMinVelocity;
	class UClass* ImpactDamageType;
	TArrayNoInit<class USound*> ImpactSounds;
	FLOAT ImpactVolume;
	class UClass* ImpactEffect;
	FLOAT LifeTime;
	FLOAT ImpactInterval;
	FLOAT LastImpactTime;

	DECLARE_CLASS(AKarmaProp,AProp,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AKarmaProp)
};

/*
 * AnimNotify
 */

class ENGINE_API UAnimNotify : public UObject{
public:
	INT Revision;

	DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
	// AnimNotify interface.
	virtual void Notify(UMeshInstance *Instance, AActor *Owner){};
	// UObject interface.
	virtual void PostEditChange();
};

/*
 * AnimNotify_Footstep
 */

enum eMaterialWalkType{
	WalkT_Forward,
	WalkT_Backward,
	WalkT_CrouchWalk,
	WalkT_Scuff,
	WalkT_Slide,
	WalkT_RunForward,
	WalkT_RunBackward,
	WalkT_ArmorSlide,
	WalkT_JumpUp,
	WalkT_JumpDown,
	WalkT_BFPrimary,
	WalkT_BFSecondary,
	WalkT_MAX
};

class ENGINE_API UAnimNotify_Footstep : public UAnimNotify{
public:
	class USound* DefaultSound;
	BYTE TypeOfWalk;

	DECLARE_CLASS(UAnimNotify_Footstep,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify(UMeshInstance *Instance, AActor *Owner);
};

/*
 * AudioEnvironment
 */

class ENGINE_API UAudioEnvironment : public UObject{
public:
	class UI3DL2Listener* Effect;
	class UI3DL2Listener* EffectXBox;
	class USound* PreAmbient;
	class USound* RandomOneShot;
	FLOAT ROSradiusMin;
	FLOAT ROSradiusMax;
	FLOAT ROSintervalMin;
	FLOAT ROSintervalMax;
	class USound* iMuseState;
	class USound* iMuseOverlays;
	INT OverlayStartupDelay;
	INT OverlayMinSpacing;
	INT OverlayMaxSpacing;
	BITFIELD bDoMusicOnceOnly:1;
	BITFIELD bMusicUsedUp:1;

	DECLARE_CLASS(UAudioEnvironment,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UAudioEnvironment)
};

/*
 * CheatManager
 */

class ENGINE_API UCheatManager : public UObject{
public:
	FRotator LockedRotation;

	DECLARE_CLASS(UCheatManager,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};

/*
 * DamageType
 */

class ENGINE_API UDamageType : public UObject{
public:
	FStringNoInit DeathString;
	FStringNoInit MaleSuicide;
	BITFIELD bBypassesShields:1;
	BITFIELD bKillsNotIncapacitates:1;
	BITFIELD bKillsNotIncapacitatesPlayer:1;
	BITFIELD KApplyImpulseToRoot:1;
	BITFIELD DisallowDeathAnim:1;
	BITFIELD CannotBeAbsorbed:1;
	BITFIELD NoDeathEffect:1;
	BITFIELD bCountFriendlyFire:1;
	FLOAT RagdollOnDeathProbability;
	FLOAT FlashScale;
	FLOAT KDamageImpulse;
	FLOAT KDeathUpKick;
	BYTE HurtAudioEvent;
	BYTE DeathAudioEvent;
	BYTE AllyDownedByEvent;
	BYTE LeaderKilledOtherEvent;
	BYTE FriendlyFireEvent;
	TArrayNoInit<class UMaterial*> VisorHitDecals;
	class UClass* VisorHitEffect;
	FLOAT VisorHitScaleMin;
	FLOAT VisorHitScaleMax;
	class USound* VisorHitSound;
	FLOAT VisorHitDelayNeed;

	DECLARE_CLASS(UDamageType,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UDamageType)
};

/*
 * DamageBleedOut
 */

class ENGINE_API UDamageBleedOut : public UDamageType{
public:
	DECLARE_CLASS(UDamageBleedOut,UDamageType,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UDamageBleedOut)
};

/*
 * DamageVariance
 */

struct FDamageIncludedInfo{
	class UClass* DamageTypeClass;
	FLOAT Multiplier;
};

class ENGINE_API UDamageVariance : public UObject{
public:
	TArrayNoInit<FDamageIncludedInfo> IncludeTypes;
	TArrayNoInit<class UClass*> ExcludeTypes;

	DECLARE_CLASS(UDamageVariance,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UDamageVariance)
};

/*
 * FrameFX
 */

class FFrameGrid{ // This seems to be almost the same as AFluidSurfaceInfo
public:
	BYTE          FluidGridType;
	char          Padding1[31]; // PADDING!!!
	FRange        NoiseStrength;
	char          Padding2[40]; // PADDING!!!
	TArray<FLOAT> Verts0;
	TArray<FLOAT> Verts1;
	TArray<BYTE>  VertsAlpha;
	char          Padding3[44]; // PADDING!!!

	FFrameGrid();

	virtual ~FFrameGrid();
	virtual INT Tick(FLOAT DeltaTime, ELevelTick TickType);

	void FillIndexBuffer(void*);
	void FillVertexBuffer(void*);
	void GetNearestIndex(const FVector&, int&, int&);
	FVector GetVertexPosLocal(int, int);
	FVector GetVertexPosWorld(int, int);
	void Init();
	void Render(class UMaterial*, class FBaseTexture*, class FRenderInterface*);
	void SimpleFillIndexBuffer(void*);
	void SimpleFillVertexBuffer(void*);
	void SonicPulse(const FVector&, float, float);
	void SonicPulseVertex(int, int, float);
	void UpdateSimulation(float);
};

class ENGINE_API UFrameFX : public UObject{
public:
	BYTE Blur;
	BYTE BlurMip;
	class UVisionMode* VisionMode;
	FLOAT VisionModeFade;
	FLOAT LastFrameTime;
	BITFIELD BloomEnabled:1;
	class AZoneInfo* ViewZone;
	FLOAT CurrentBloom;
	FLOAT CurrentBloomFilter;
	class UHardwareShader* ShaderBlur;
	class UHardwareShader* ShaderGlow;
	class UHardwareShader* ShaderDraw;
	class UHardwareShader* ShaderEngage;
	class UHardwareShader* ShaderShieldHit;
	class UHardwareShader* ShaderShield;
	class UVisionMode* DefaultVisionMode;
	TArrayNoInit<class UHardwareShader*> ActorShaderFX;
	BITFIELD DrawRegularWorld:1;
	INT FSAA;

	DECLARE_CLASS(UFrameFX,UObject,0,Engine)

	// --------- Member Variables ---------
	// Static working targets (shared even in splitscreen)
	static const int MaxMips = 6;
	static class FAuxRenderTarget* MipTargets[MaxMips];
	static class FAuxRenderTarget* WorkingTarget;
	static class FAuxRenderTarget* AccumulatorTarget;
	static class FAuxRenderTarget* AntiAliasTarget;

	// Static Frame Grid variables
	static class FFrameGrid* FrameGrid;

	// --------- UObject interface ---------
	void Destroy();
	void Serialize(FArchive& Ar);

	// --------- UFrameFX interface ---------
	// Access functions
	void SetVisionMode(UVisionMode* NewVisionMode){ VisionMode = NewVisionMode; }
	void SetVisionModeFade(float NewFade)			{ VisionModeFade = NewFade; }

	// Render Target functions
	void InitRenderTargets(UViewport* Viewport, class FRenderInterface* RI, AZoneInfo* ViewZoneInfo, int FSAA);
	UBOOL CreateRenderTarget(FAuxRenderTarget** Target, UViewport* Viewport, class FRenderInterface* RI, float Scale = 1.0f, bool bMatchBackBuffer = false);
	void FreeRenderTargets();
	void SetWorkingTarget(UViewport* Viewport, class FRenderInterface* RI);
	void RestoreBackBuffer(UViewport* Viewport, class FRenderInterface* RI);
	void MipWorkingTarget(UViewport* Viewport, class FRenderInterface* RI);
	void BlurTarget(UViewport* Viewport,class FRenderInterface* RI, FAuxRenderTarget* SourceRenderTarget, FAuxRenderTarget* DestRenderTarget);
	void ExtractGlow(UViewport* Viewport,class FRenderInterface* RI, FAuxRenderTarget* SourceRenderTarget, FAuxRenderTarget* DestRenderTarget);
	void AccumulateWorkingTarget(UViewport* Viewport, class FRenderInterface* RI);
	void DrawAccumulator(UViewport* Viewport, class FRenderInterface* RI);
	void SetPannerInfo(UViewport* Viewport, class UTexMatrix * GlassTexture);
	void CopyBackBufferToAntiAliasTarget(class FRenderInterface* RI);
	void SetupActorShaderFX(AActor* Actor, UViewport* Viewport);
	UHardwareShader* GetTacticalSkelMeshShader(UViewport* Viewport, AActor* Actor, float Fade = 1.0f);
};

/*
 * Helmet
 */

struct FSplatInfo{
	class UMaterial* SplatDecal;
	FVector SplatPosition;
	FLOAT SplatRotation;
};

struct FSubtitleGroup{
	FStringNoInit GroupName;
	INT NumEntries;
};

struct FSubtitleEntry{
	FStringNoInit SoundID;
	FStringNoInit Text;
};

struct FCachedMarkerVisInfo{
	class AActor* mpActor;
	FLOAT mfElapsedVisCheckTime;
	FLOAT mfScreenX;
	FLOAT mfScreenY;
	FLOAT mfScreenXSize;
	FLOAT mfScreenYSize;
	BITFIELD mbVisible:1;
	BITFIELD mbUsedThisFrame:1;
	BITFIELD mbTargeted:1;
};

struct FCachedObjectiveVisInfo{
	FLOAT mfElapsedVisCheckTime;
	BITFIELD mbVisible:1;
};

class ENGINE_API UHelmet : public UObject{
public:
	class UFrameFX* FrameFX;
	BYTE BlurNormal;
	BYTE BlurHit;
	TArrayNoInit<FSplatInfo> Splatters;
	BITFIELD Dirty:1;
	FLOAT NextWipeTime;
	FLOAT WipeProgress;
	FLOAT WipeTime;
	FLOAT BloodWipeDelay;
	FLOAT HitWipeDelay;
	FLOAT TimeSinceVisionChange;
	class UVisionMode* LastVisionMode;
	BITFIELD bFadeOut:1;
	class ALight* InteriorHealthLight;
	class ALight* InteriorShieldLight;
	BYTE BlurCurrent;
	INT LastHealthLevel;
	FLOAT LastHealth;
	FLOAT HealthFlashTime;
	FLOAT HealthFlashDuration;
	FLOAT LastShield;
	FLOAT ShieldFlashTime;
	FLOAT ShieldFlashDuration;
	INT LastStance;
	FLOAT StanceGlowTime;
	INT LastCount;
	INT LastTargetType;
	class USound* StaticSound;
	class APlayerReplicationInfo* pPrevTarget;
	FLOAT TargetHitBlipTime;
	FLOAT TargetHitBlipDuration;
	class AWeapon* LastWeapon;
	class AWeapon* LastLastWeapon;
	FLOAT TimeWeaponChanged;
	FLOAT AmmoSpinupTime;
	FLOAT HitLowHealth;
	FLOAT HitLargeDamage;
	FLOAT HitLastTime;
	FLOAT ShieldInitStart;
	FLOAT ShieldInitEnd;
	FStringNoInit ShieldInitText;
	FLOAT HealthInitStart;
	FLOAT HealthInitEnd;
	FStringNoInit HealthInitText;
	FLOAT SquadInitStart;
	FLOAT SquadInitEnd;
	FStringNoInit SquadInitText;
	FLOAT InitTime;
	FLOAT PromptFadeInTime;
	FStringNoInit CancelManeuverText;
	FStringNoInit EngageTargetHealthText;
	FStringNoInit IncapacitatedText;
	FStringNoInit SquadUnavailableText;
	FStringNoInit HealthCriticalText;
	FStringNoInit FullHealthText;
	FStringNoInit TacticalVisionModeText;
	FStringNoInit LowLightVisionModeText;
	FStringNoInit IncapMenuMaintainText;
	FStringNoInit IncapMenuRecallText;
	FStringNoInit IncapMenuReloadPCText;
	FStringNoInit IncapMenuReloadXboxText;
	INT IncapMenuSelectedItem;
	FStringNoInit Checkpoint;
	FStringNoInit XboxCheckpointAddition;
	FLOAT ElapsedCheckpointSaveTime;
	FLOAT CheckpointSaveTime;
	FStringNoInit GenericPromptText;
	TArrayNoInit<FString> GenericPromptButtonFuncs;
	FLOAT GenericPromptTime;
	BITFIELD GenericPromptFlash:1;
	FStringNoInit DemolitionReadyPromptText;
	TArrayNoInit<FString> DemolitionReadyPromptButtonFuncs;
	FStringNoInit MountTurretPromptText;
	TArrayNoInit<FString> MountTurretPromptButtonFuncs;
	FStringNoInit SquadOccupiedText;
	FStringNoInit SquadIncapacitatedText;
	FStringNoInit ReviveSquadmatePromptText;
	TArrayNoInit<FString> ReviveSquadmatePromptButtonFuncs;
	FStringNoInit PickupPromptText;
	TArrayNoInit<FString> PickupPromptButtonFuncs;
	FStringNoInit RemoveScavPromptText;
	TArrayNoInit<FString> RemoveScavPromptButtonFuncs;
	FStringNoInit SearchAndDestroy;
	FStringNoInit FormUp;
	FStringNoInit SecurePosition;
	FStringNoInit Cancel;
	TArrayNoInit<FSubtitleGroup> SubtitleGroupInfo;
	TArrayNoInit<FSubtitleEntry> SubtitleEntries;
	FStringNoInit SubtitleText;
	FLOAT SubtitleDisplayTime;
	INT SubtitlePriority;
	class AActor* ObjectiveActor;
	FVector ObjectivePosition;
	FLOAT LastSniperZoomRechargeCenterOffset;
	FLOAT FadeTime;
	FColor FadeColor;
	FLOAT ElapsedFadeTime;
	FLOAT SquadCommandPromptDelay;
	FLOAT ElapsedSquadCommandPromptTime;
	FLOAT SquadCommandPromptFadeInTime;
	INT SelectedSquadCommand;
	FLOAT ElapsedSelectedSquadCommandTime;
	FLOAT SelectedSquadCommandPulseTime;
	BITFIELD bDraw:1;
	BITFIELD bWiping:1;
	BITFIELD PlayingShieldChargeSound:1;
	BITFIELD PlayingHealthChargeSound:1;
	BITFIELD PlayingHealSound:1;
	BITFIELD bShowObjectiveTracker:1;
	BITFIELD bBracketVisibleObjective:1;
	BITFIELD bDoingFade:1;
	BITFIELD bDoInitSequence:1;
	BITFIELD bShowSquadCommandPrompt:1;
	BITFIELD bBlinkSquad:1;
	BITFIELD bBlinkGrenade:1;
	BITFIELD bBlinkHealth:1;
	BITFIELD bBlinkShields:1;
	BITFIELD bBlinkSquadCommandPrompt:1;
	BITFIELD bInTacticalVisionMode:1;
	BITFIELD bCheckpointSave:1;
	BITFIELD bSubtitleTextLastFrame:1;
	BITFIELD bGenericPromptTextLastFrame:1;
	BITFIELD bCurrentObjectiveTextLastFrame:1;
	BITFIELD bMarkerTextLastFrame:1;
	BITFIELD bActivateTextLastFrame:1;
	BITFIELD bDetonateTextLastFrame:1;
	BITFIELD bPickupTextLastFrame:1;
	BITFIELD bTurretTextLastFrame:1;
	BITFIELD bReviveTextLastFrame:1;
	BITFIELD bPickupPromptTextLastFrame:1;
	BITFIELD bRemoveScavPromptTextLastFrame:1;
	FLOAT SquadBlinkTime;
	FLOAT ElapsedSquadBlinkTime;
	FLOAT GrenadeBlinkTime;
	FLOAT ElapsedGrenadeBlinkTime;
	FLOAT HealthBlinkTime;
	FLOAT ElapsedHealthBlinkTime;
	FLOAT ShieldsBlinkTime;
	FLOAT ElapsedShieldsBlinkTime;
	FLOAT SquadCommandPromptBlinkTime;
	FLOAT ElapsedSquadCommandPromptBlinkTime;
	FLOAT VisorModeTextTime;
	FLOAT ElapsedVisorModeSwitchTime;
	TArrayNoInit<class AActor*> LightArray;
	FLOAT VisCheckFrequency;
	FCachedMarkerVisInfo mCachedMarkerVisInfo[20];
	FCachedObjectiveVisInfo mCachedObjectiveVisInfo;
	FStringNoInit LastGrenade;
	FLOAT LastTime;
	FStringNoInit LastSubtitleText;
	FLOAT fSubtitleStartTime;
	FStringNoInit LastGenericPromptText;
	FLOAT fGenericPromptStartTime;
	FStringNoInit LastCurrentObjectiveText;
	FLOAT fCurrentObjectiveStartTime;
	FStringNoInit LastPickupText;
	FLOAT fPickupStartTime;
	FStringNoInit LastPickupPromptText;
	FLOAT fPickupPromptStartTime;
	FStringNoInit LastRemoveScavPromptText;
	FLOAT fRemoveScavPromptStartTime;
	FStringNoInit LastMarkerText;
	FLOAT fMarkerStartTime;
	FStringNoInit LastActivateText;
	FLOAT fActivateStartTime;
	FStringNoInit LastDetonateText;
	FLOAT fDetonateStartTime;
	FStringNoInit LastTurretText;
	FLOAT fTurretStartTime;
	FStringNoInit LastReviveText;
	FLOAT fReviveStartTime;
	class UTexture* LargeVisorIcons;
	class UTexture* CloneVisorIcons;
	class UTexture* MPVisorIcons;
	class UTexture* TexAmmo;
	class UTexture* TexClip;
	class UTexture* TexHit;
	class UTexture* MarkerArrows;
	class UTexture* TexAButton;
	class UTexture* TexBButton;
	class UTexture* TexXButton;
	class UTexture* TexYButton;
	class UTexture* TexBlackButton;
	class UTexture* TexWhiteButton;
	class UTexture* TexDPadMonoButton;
	class UTexture* TexCompassGraphic;
	class UTexture* TexTargetBlip;
	class UTexture* TexObjectiveRing;
	class UTexture* TexDPadBlue;
	class UTexture* TexSniperRecharge;
	class UTexture* TexSniperNonZoomReticle;
	class UTexture* TexTextLine01;
	class UTexture* TexText01;
	class UTexture* TexMarkerArrows;
	class UTexture* TexHealRing;
	class UTexture* TexHealIndicator;
	class UTexture* TexUseRing;
	class UTexture* TexUseIndicator;
	class UTexture* TexTrandoRollReticle;
	class UTexture* TexTacticalLine;
	class UTexture* TexTacticalGraphic;
	class UTexture* TexBowcasterClip;
	class UTexture* TexBowcasterRecharge;
	class UTexture* EventTimer;
	class UTexture* IncapMenuButton;
	class UHardwareShader* HSBloodSplatter;
	class UHardwareShader* HSHitEffect;
	class UHardwareShader* HSWiper;
	class UFont* Orbit8Font;
	class UFont* Orbit15Font;

	DECLARE_CLASS(UHelmet,UObject,0,Engine)
	#define MAX_CACHED_MARKERS 20
	// --------- UObject interface ---------

	void Destroy();

	// --------- UHelmet interface ---------

	// HUD Draw functions
	void DrawHUD(UViewport* Viewport, class FRenderInterface* RI);
	void SetupVisionMode(UViewport* Viewport);
	void DrawTextInfo(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY);
	bool DrawPlayerTargetTextInfo(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, APawn* pPawn);
	bool DrawObjectiveText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY);
	bool DrawIncapOrDeathText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY);
	bool DrawStanceText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY);
	bool DrawSubtitleText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawGenericPromptText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawCurrentObjectiveText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawPickupText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawPickupPromptText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawRemoveScavPromptText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawMarkerText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawActivateText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawDetonateText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawTurretText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	bool DrawReviveText(UViewport* Viewport, APlayerController* Owner, float InvScaleX, float InvScaleY, bool bDrewLastFrame);
	void DrawPromptText(UViewport* Viewport, float InvScaleX, float InvScaleY, const FColor& color, const FString& Text, const TArrayNoInit<FString>* const pPromptButtonFuncs);
	void DrawHelmet(UViewport* Viewport, class FRenderInterface* RI);
	void DrawSniperZoom(UViewport* Viewport, APlayerController* Owner, float Time, float ElapsedTime, float InvScaleX, float InvScaleY, int Brightness);
	void DrawWookieeBowcasterZoom(UViewport* Viewport, APlayerController* Owner, float Time, float ElapsedTime, float InvScaleX, float InvScaleY, int Brightness);
	void DrawTacticalVisionMode(UViewport* Viewport, APlayerController* Owner, float Time, float ElapsedTime, float InvScaleX, float InvScaleY, bool bStarted);
	void DrawTimerRing(UViewport* pViewport, int ScreenX, int ScreenY, FColor EmptyColor, FColor FilledColor, float fRatioComplete, float fScale);
	bool GetMarkerIconUVs(ASquadMarker* pSquadMarker, UMaterial* pMaterial, float& U1, float& V1, float& U2, float& V2, int HUDIconX = -1, int HUDIconY = -1);

	void DrawIncap(float ElapsedTime, UViewport* Viewport, float InvScaleX, float InvScaleY, bool bIncapLastFrame);
	void DoIncapMenu(UViewport* Viewport, float InvScaleX, float InvScaleY, bool bIncapLastFrame);

	void DrawCheckpointSaveText(UViewport* Viewport, APlayerController* Owner, float ElapsedTime, float InvScaleX, float InvScaleY);

	// HUD Visor FX
	void DoHelmetFX(UViewport* Viewport,class FRenderInterface* RI);
	void DrawHelmetFX(UViewport* Viewport,class FRenderInterface* RI);
	void AddSplat(UMaterial* Decal, FVector Position, float Rotation, float WipeDelay, float Time);
	void DeleteSplatters();

	void StartScreenFade(float Time, const FColor& color);

	bool ShowSquadCommandPrompt(bool bShow);

	void ActorDestroyed(AActor* pActor);

	AActor* GetTargetedIconActor();

	void LoadSubtitles(const FString& LevelName);
	void LoadLevelSpecificSubtitles(const FString& LevelCompareName,
									 int NumSubtitleGroups,
									 int LastSharedIdx,
									 int& LastIdx);

	void PlaySound(AActor* Hud, USound* Sound, INT Flags = 0 );
	void StopSound(AActor* HUD, USound* Sound, FLOAT FadeOut = 0.f );

	UTexture* GetKeyIcon(int key);

	void UpdateWeaponAmmo(UViewport* Viewport);

	int GetSquadPawnHUDPosition(APawn* pSquadPawn);
};

/*
 * I3DL2Listener
 */

class ENGINE_API UI3DL2Listener : public UObject{
public:
	FLOAT EnvironmentDiffusion;
	INT Room;
	INT RoomHF;
	FLOAT DecayTime;
	INT Reflections;
	FLOAT ReflectionsDelay;
	INT Reverb;
	FLOAT ReverbDelay;
	FLOAT RoomRolloffFactor;
	FLOAT HFReference;
	FLOAT Density;
	FLOAT EnvironmentSize;
	INT RoomLF;
	FLOAT DecayHFRatio;
	FLOAT DecayLFRatio;
	FVector ReflectionsPan;
	FVector ReverbPan;
	FLOAT EchoTime;
	FLOAT EchoDepth;
	FLOAT ModulationTime;
	FLOAT ModulationDepth;
	FLOAT AirAbsorptionHF;
	FLOAT LFReference;
	BITFIELD bDecayTimeScale:1;
	BITFIELD bReflectionsScale:1;
	BITFIELD bReflectionsDelayScale:1;
	BITFIELD bReverbScale:1;
	BITFIELD bReverbDelayScale:1;
	BITFIELD bEchoTimeScale:1;
	BITFIELD bModulationTimeScale:1;
	BITFIELD bDecayHFLimit:1;
	INT Environment;
	INT Updated;

	DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UI3DL2Listener)
};

/*
 * IMuseStateInfo
 */

class ENGINE_API UIMuseStateInfo : public UObject{
public:
	BITFIELD mbPlayerDown:1;
	BITFIELD mbBattleEngineEnabled:1;
	class USound* mCurrentRoom;
	class USound* mCurrentOverlay;
	class USound* mCurrentEpisode;
	INT mNextOverlayTime;
	INT mMinOverlayTime;
	INT mMaxOverlayTime;
	INT mOverlayStartupDelay;
	class AEngineBattleVolume* CurrentBattleZone;
	INT mNextBattleUpdateTime;
	TArrayNoInit<class APawn*> mBattleBaddies;
	class USound* mPlayerDownLoopID;
	class USound* mActiveBattleCueID;
	class USound* CurrentBattleTrio;
	class USound* CurrentOverlayMultiSound;
	class AEngineBattleVolume* BattleZone;

	DECLARE_CLASS(UIMuseStateInfo,UObject,0,Engine)
};

/*
 * Interactions
 */

enum EInputAction{
	IST_None,
	IST_Press,
	IST_Hold,
	IST_PressHold,
	IST_Repeat,
	IST_Release,
	IST_Tap,
	IST_DoubleTap,
	IST_Axis,
	IST_MAX
};

enum EInputKey{
	IK_None,
	IK_LeftMouse,
	IK_RightMouse,
	IK_Cancel,
	IK_MiddleMouse,
	IK_Unknown05,
	IK_Unknown06,
	IK_Unknown07,
	IK_Backspace,
	IK_Tab,
	IK_Unknown0A,
	IK_Unknown0B,
	IK_Unknown0C,
	IK_Enter,
	IK_Unknown0E,
	IK_Unknown0F,
	IK_Shift,
	IK_Ctrl,
	IK_Alt,
	IK_Pause,
	IK_CapsLock,
	IK_Unknown15,
	IK_Unknown16,
	IK_Unknown17,
	IK_Unknown18,
	IK_Unknown19,
	IK_Unknown1A,
	IK_Escape,
	IK_Unknown1C,
	IK_Unknown1D,
	IK_Unknown1E,
	IK_Unknown1F,
	IK_Space,
	IK_PageUp,
	IK_PageDown,
	IK_End,
	IK_Home,
	IK_Left,
	IK_Up,
	IK_Right,
	IK_Down,
	IK_Select,
	IK_Print,
	IK_Execute,
	IK_PrintScrn,
	IK_Insert,
	IK_Delete,
	IK_Help,
	IK_0,
	IK_1,
	IK_2,
	IK_3,
	IK_4,
	IK_5,
	IK_6,
	IK_7,
	IK_8,
	IK_9,
	IK_Unknown3A,
	IK_Unknown3B,
	IK_Unknown3C,
	IK_Unknown3D,
	IK_Unknown3E,
	IK_Unknown3F,
	IK_Unknown40,
	IK_A,
	IK_B,
	IK_C,
	IK_D,
	IK_E,
	IK_F,
	IK_G,
	IK_H,
	IK_I,
	IK_J,
	IK_K,
	IK_L,
	IK_M,
	IK_N,
	IK_O,
	IK_P,
	IK_Q,
	IK_R,
	IK_S,
	IK_T,
	IK_U,
	IK_V,
	IK_W,
	IK_X,
	IK_Y,
	IK_Z,
	IK_Unknown5B,
	IK_Unknown5C,
	IK_Unknown5D,
	IK_Unknown5E,
	IK_Unknown5F,
	IK_NumPad0,
	IK_NumPad1,
	IK_NumPad2,
	IK_NumPad3,
	IK_NumPad4,
	IK_NumPad5,
	IK_NumPad6,
	IK_NumPad7,
	IK_NumPad8,
	IK_NumPad9,
	IK_GreyStar,
	IK_GreyPlus,
	IK_Separator,
	IK_GreyMinus,
	IK_NumPadPeriod,
	IK_GreySlash,
	IK_F1,
	IK_F2,
	IK_F3,
	IK_F4,
	IK_F5,
	IK_F6,
	IK_F7,
	IK_F8,
	IK_F9,
	IK_F10,
	IK_F11,
	IK_F12,
	IK_F13,
	IK_F14,
	IK_F15,
	IK_F16,
	IK_F17,
	IK_F18,
	IK_F19,
	IK_F20,
	IK_F21,
	IK_F22,
	IK_F23,
	IK_F24,
	IK_Unknown88,
	IK_Unknown89,
	IK_Unknown8A,
	IK_Unknown8B,
	IK_Unknown8C,
	IK_Unknown8D,
	IK_Unknown8E,
	IK_Unknown8F,
	IK_NumLock,
	IK_ScrollLock,
	IK_Unknown92,
	IK_Unknown93,
	IK_Unknown94,
	IK_Unknown95,
	IK_Unknown96,
	IK_Unknown97,
	IK_Unknown98,
	IK_Unknown99,
	IK_Unknown9A,
	IK_Unknown9B,
	IK_Unknown9C,
	IK_Unknown9D,
	IK_Unknown9E,
	IK_Unknown9F,
	IK_LShift,
	IK_RShift,
	IK_LControl,
	IK_RControl,
	IK_UnknownA4,
	IK_UnknownA5,
	IK_UnknownA6,
	IK_UnknownA7,
	IK_UnknownA8,
	IK_UnknownA9,
	IK_UnknownAA,
	IK_UnknownAB,
	IK_UnknownAC,
	IK_UnknownAD,
	IK_UnknownAE,
	IK_UnknownAF,
	IK_UnknownB0,
	IK_UnknownB1,
	IK_UnknownB2,
	IK_UnknownB3,
	IK_UnknownB4,
	IK_UnknownB5,
	IK_UnknownB6,
	IK_UnknownB7,
	IK_UnknownB8,
	IK_Unicode,
	IK_Semicolon,
	IK_Equals,
	IK_Comma,
	IK_Minus,
	IK_Period,
	IK_Slash,
	IK_Tilde,
	IK_Mouse4,
	IK_Mouse5,
	IK_Mouse6,
	IK_Mouse7,
	IK_Mouse8,
	IK_UnknownC6,
	IK_UnknownC7,
	IK_GameA,
	IK_GameB,
	IK_GameX,
	IK_GameY,
	IK_GameBlack,
	IK_GameWhite,
	IK_GameLTrig,
	IK_GameRTrig,
	IK_GameDUp,
	IK_GameDDown,
	IK_GameDLeft,
	IK_GameDRight,
	IK_GameStart,
	IK_GameBack,
	IK_GameLStick,
	IK_GameRStick,
	IK_UnknownD8,
	IK_UnknownD9,
	IK_UnknownDA,
	IK_LeftBracket,
	IK_Backslash,
	IK_RightBracket,
	IK_SingleQuote,
	IK_UnknownDF,
	IK_UnknownE0,
	IK_UnknownE1,
	IK_UnknownE2,
	IK_UnknownE3,
	IK_MouseX,
	IK_MouseY,
	IK_MouseZ,
	IK_MouseW,
	IK_JoyU,
	IK_JoyV,
	IK_JoySlider1,
	IK_JoySlider2,
	IK_MouseWheelUp,
	IK_MouseWheelDown,
	IK_Unknown10E,
	UK_Unknown10F,
	IK_JoyX,
	IK_JoyY,
	IK_JoyZ,
	IK_JoyR,
	IK_UnknownF4,
	IK_UnknownF5,
	IK_Attn,
	IK_CrSel,
	IK_ExSel,
	IK_ErEof,
	IK_Play,
	IK_Zoom,
	IK_NoName,
	IK_PA1,
	IK_OEMClear,
	IK_MAX
};

class ENGINE_API UInteractions : public UObject{
public:
	DECLARE_CLASS(UInteractions,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UInteractions)
};

/*
 * Interaction
 */

class ENGINE_API UInteraction : public UInteractions{
public:
	BITFIELD bActive:1;
	BITFIELD bVisible:1;
	BITFIELD bRequiresTick:1;
	BITFIELD bNativeEvents:1;
	class UPlayer* ViewportOwner;
	class UInteractionMaster* Master;

	// Events
	void Initialized();

	DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
};

/*
 * Console
 */

enum HoldingState{
	StandingStill,
	HoldingLeft,
	HoldingRight,
	HoldingUp,
	HoldingDown,
	HoldingSelect,
	HoldingStart,
	HoldingBack,
};

#define UCONST_MaxHistory 16

class ENGINE_API UConsole : public UInteraction{
public:
	BYTE ConsoleKey;
	INT HistoryTop;
	INT HistoryBot;
	INT HistoryCur;
	FStringNoInit TypedStr;
	FStringNoInit History[16];
	BITFIELD bTyping:1;
	BITFIELD bIgnoreKeys:1;
	FName PrevState;
	class UFont* ConsoleFont;
	FStringNoInit cSay;
	FStringNoInit cTeamSay;
	FLOAT ControllerRepeatDelayInitial;
	FLOAT ControllerRepeatDelaySubsequent;
	FLOAT ControllerRepeatDelayCurrent;
	BYTE ControllerState;
	FLOAT DeltaPrevJoyX;
	FLOAT DeltaPrevJoyY;
	FLOAT DeltaPrevJoyU;
	FLOAT DeltaPrevJoyV;
	FLOAT TimeIdle;
	class AMenu* CurMenu;
	class AMenu* PrevMenu;
	class AMenu* LoadingMenu;
	class USound* MenuBackgroundMusic;
	class AMenu* KeyMenu;
	BITFIELD UsingMenuRes:1;
	FStringNoInit NormalRes;
	BITFIELD bUIEnabled:1;
	TArrayNoInit<FString> BufferedConsoleCommands;
	BITFIELD bCleanupMenus:1;
	FLOAT LastElapsedFrameTime;

	// Events
	void NativeConsoleOpen();
	void PreLevelChange();
	void PostLevelChange();
	void NotifyLevelChange();
	void ManageMenuBackgroundMusic(class AMenu* NewMenu);
	void MenuOpen(class UClass* MenuClass, const FString& Args);
	void MenuOpenExisting(class AMenu* M);
	void MenuCall(class UClass* MenuClass, const FString& Args);
	void MenuCallExisting(class AMenu* M, const FString& Args);
	void MenuClose();
	void LoadingStarted(const FString& Menu, const FString& Pic, const FString& Title, const FString& Text, UBOOL ShowHints);
	void UpdateLoadingProgress(FLOAT LoadingRatioCompleted);
	void LoadingFinished();
	UBOOL ShowingMenu();
	UBOOL ShowingMenuClass(const FString& MenuClassName);
	void RestartMenuBackgroundMusic(UBOOL bOnlyIfNotPlaying);

	DECLARE_CLASS(UConsole,UInteraction,CLASS_Config,Engine)

	void StartMenuBackgroundMusic(USound* sound);
	void StopMenuBackgroundMusic(USound* sound);
	bool IsMenuBackgroundMusicPlaying(USound* sound);
	void PauseLevelMusic();
	void ResumeLevelMusic();
};

/*
 * InteractionMaster
 */

class ENGINE_API UInteractionMaster : public UInteractions{
public:
	class UClient* Client;
	class UInteraction* BaseMenu;
	class UInteraction* Console;
	TArrayNoInit<class UInteraction*> GlobalInteractions;
	BITFIELD bRequireRawJoystick:1;

	// Events
	class UInteraction* AddInteraction(const FString& InteractionName, class UPlayer* AttachTo);
	void RemoveInteraction(class UInteraction* RemoveMe);
	void SetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner);
	UBOOL Process_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key, const FString& Unicode);
	UBOOL Process_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta);
	void Process_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas);
	void Process_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas);
	void Process_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime);
	void Process_Message(const FString& Msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray);

	DECLARE_CLASS(UInteractionMaster,UInteractions,CLASS_Transient,Engine)
};

/*
 * KarmaParamsCollision
 */

class ENGINE_API UKarmaParamsCollision : public UObject{
public:
	INT KarmaData;
	FLOAT KScale;
	FVector KScale3D;
	FLOAT KFriction;
	FLOAT KRestitution;
	FLOAT KImpactThreshold;
	BITFIELD bContactingLevel:1;

	DECLARE_CLASS(UKarmaParamsCollision,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UKarmaParamsCollision)
};

/*
 * KarmaParams
 */

enum ESafeTimeMode{
	KST_None,
	KST_Auto,
	KST_Always,
	KST_MAX
};

class ENGINE_API UKarmaParams : public UKarmaParamsCollision{
public:
	INT KAng3;
	INT KTriList;
	FLOAT KLastVel;
	FLOAT KMass;
	FLOAT KLinearDamping;
	FLOAT KAngularDamping;
	FLOAT KBuoyancy;
	BITFIELD KStartEnabled:1;
	FVector KStartLinVel;
	FVector KStartAngVel;
	BITFIELD bKNonSphericalInertia:1;
	FLOAT KActorGravScale;
	FLOAT KVelDropBelowThreshold;
	BITFIELD bHighDetailOnly:1;
	BITFIELD bClientOnly:1;
	BITFIELD bKStayUpright:1;
	BITFIELD bKAllowRotate:1;
	BITFIELD bDestroyOnSimError:1;
	FLOAT StayUprightStiffness;
	FLOAT StayUprightDamping;
	BYTE SafeTimeMode;

	DECLARE_CLASS(UKarmaParams,UKarmaParamsCollision,0,Engine)

	void PostEditChange();
};

/*
 * KarmaParamsSkel
 */

class ENGINE_API UKarmaParamsSkel : public UKarmaParams{
public:
	FStringNoInit KSkeleton;
	BITFIELD bKDoConvulsions:1;
	FRange KConvulseSpacing;
	FVector KShotStart;
	FVector KShotEnd;
	FLOAT KShotStrength;
	BITFIELD bKApplyToRoot:1;
	BITFIELD bKImportantRagdoll:1;

	DECLARE_CLASS(UKarmaParamsSkel,UKarmaParams,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UKarmaParamsSkel)
};

/*
 * LevelSummary
 */

class ENGINE_API ULevelSummary : public UObject{
public:
	FStringNoInit Title;
	FStringNoInit Author;
	INT IdealPlayerCount;
	FStringNoInit LevelEnterText;

	DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
};

/*
 * Combiner
 */

enum EColorOperation{
	CO_Use_Color_From_Material1,
	CO_Use_Color_From_Material2,
	CO_Multiply,
	CO_Add,
	CO_Subtract,
	CO_AlphaBlend_With_Mask,
	CO_Add_With_Mask_Modulation,
	CO_Use_Color_From_Mask,
	CO_MAX
};

enum EAlphaOperation{
	AO_Use_Mask,
	AO_Multiply,
	AO_Add,
	AO_Use_Alpha_From_Material1,
	AO_Use_Alpha_From_Material2,
	AO_AlphaBlend_With_Mask,
	AO_MAX
};

class ENGINE_API UCombiner : public UMaterial{
public:
	BYTE CombineOperation;
	BYTE AlphaOperation;
	class UMaterial* Material1;
	class UMaterial* Material2;
	class UMaterial* Mask;
	BITFIELD LightBothMaterials:1;
	BITFIELD InvertMask:1;
	BITFIELD Modulate2X:1;
	BITFIELD Modulate4X:1;

	DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
};

/*
 * HardwareShaderMacros
 */

class ENGINE_API UHardwareShaderMacros : public UMaterial{
public:
	FStringNoInit Macros;

	DECLARE_CLASS(UHardwareShaderMacros,UMaterial,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UHardwareShaderMacros)
};

/*
 * Modifier
 */

class ENGINE_API UModifier : public UMaterial{
public:
	class UMaterial* Material;

	DECLARE_CLASS(UModifier,UMaterial,0,Engine)
};

/*
 * ColorModifier
 */

class ENGINE_API UOpacityModifier : public UModifier{
public:
	class UMaterial* Opacity;
	BITFIELD bOverrideTexModifier:1;

	DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};

/*
 * HardwareShader
 */

enum SConstant{
	EVC_Unused,
	EVC_MaterialDefined,
	EVC_WorldToScreenMatrix,
	EVC_ObjectToScreenMatrix,
	EVC_ObjectToWorldMatrix,
	EVC_CameraToWorldMatrix,
	EVC_WorldToCameraMatrix,
	EVC_WorldToObjectMatrix,
	EVC_Time,
	EVC_CosTime,
	EVC_SinTime,
	EVC_TanTime,
	EVC_EyePosition,
	EVC_XYCircle,
	EVC_LightPos1,
	EVC_LightColor1,
	EVC_LightInvRadius1,
	EVC_LightPos2,
	EVC_LightColor2,
	EVC_LightInvRadius2,
	EVC_LightPos3,
	EVC_LightColor3,
	EVC_LightInvRadius3,
	EVC_LightPos4,
	EVC_LightColor4,
	EVC_LightInvRadius4,
	EVC_AmbientLightColor,
	EVC_Flicker,
	EVC_SpotlightDirection,
	EVC_SpotlightCosCone,
	EVC_DrawScale3D,
	EVC_Fog,
	EVC_ObjectToCameraMatrix,
	EVC_EyePositionObjectSpace,
	EVC_2DRotator,
	EVC_MAX
};

enum ED3DBLEND{
	NOBLEND,
	ZERO,
	ONE,
	SRCCOLOR,
	INVSRCCOLOR,
	SRCALPHA,
	INVSRCALPHA,
	DESTALPHA,
	INVDESTALPHA,
	DESTCOLOR,
	INVDESTCOLOR,
	SRCALPHASAT,
	BOTHSRCALPHA,
	BOTHINVSRCALPHA
};

struct FSConstantsInfo{
	BYTE Type;
	FPlane Value;
};

struct FBumpSettingInfo{
	FLOAT BumpSize;
	FLOAT BumpLumaOffset;
	FLOAT BumpLumaScale;
};

class ENGINE_API UHardwareShader : public URenderedMaterial{
public:
	TArrayNoInit<BYTE> StreamMapping;
	FStringNoInit VertexShaderText;
	FStringNoInit PixelShaderText;
	FStringNoInit XVertexShaderText;
	FStringNoInit XPixelShaderText;
	FSConstantsInfo VSConstants[96];
	FSConstantsInfo PSConstants[8];
	class UBitmapMaterial* Textures[8];
	FBumpSettingInfo BumpSettings[8];
	BITFIELD ZTest:1;
	BITFIELD ZWrite:1;
	BITFIELD AlphaBlending:1;
	BITFIELD AlphaTest:1;
	BITFIELD SpecularEnable:1;
	BYTE AlphaRef;
	BYTE SrcBlend;
	BYTE DestBlend;
	FVertexShader* VertexShader;
	FPixelShader* PixelShader;
	INT NumVSConstants;
	INT NumPSConstants;

	DECLARE_CLASS(UHardwareShader,URenderedMaterial,0,Engine)

	UHardwareShader();

	// Overrides
	virtual void PostLoad();
	virtual void Destroy();
	virtual void Serialize(FArchive& Ar);
	virtual void PostEditChange();
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual UBOOL RequiresSorting();

	void Changed();
	void InitDuplicate();
};

/*
 * ColorModifier
 */

class ENGINE_API UColorModifier : public UModifier{
public:
	FColor Color;
	BITFIELD RenderTwoSided:1;
	BITFIELD AlphaBlend:1;

	DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

/*
 * FinalBlend
 */

enum EFrameBufferBlending{
	FB_Overwrite,
	FB_Modulate,
	FB_AlphaBlend,
	FB_AlphaModulate_MightNotFogCorrectly,
	FB_Translucent,
	FB_Darken,
	FB_Brighten,
	FB_Invisible,
	FB_ShadowBlend,
	FB_MAX
};

class ENGINE_API UFinalBlend : public UModifier{
public:
	BYTE FrameBufferBlending;
	BITFIELD ZWrite:1;
	BITFIELD ZTest:1;
	BITFIELD AlphaTest:1;
	BITFIELD TwoSided:1;
	BITFIELD ColorWriteEnable:1;
	BITFIELD AlphaWriteEnable:1;
	BITFIELD OverrideAlpha:1;
	BITFIELD AlphaEnable:1;
	BYTE AlphaRef;

	DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
};

/*
 * TexModifier
 */

enum ETexCoordSrc{
	TCS_Stream0,
	TCS_Stream1,
	TCS_Stream2,
	TCS_Stream3,
	TCS_Stream4,
	TCS_Stream5,
	TCS_Stream6,
	TCS_Stream7,
	TCS_WorldCoords,
	TCS_CameraCoords,
	TCS_CubeWorldSpaceReflection,
	TCS_CubeCameraSpaceReflection,
	TCS_ProjectorCoords,
	TCS_NoChange,
	TCS_SphereWorldSpaceReflection,
	TCS_SphereCameraSpaceReflection,
	TCS_CubeWorldSpaceNormal,
	TCS_CubeCameraSpaceNormal,
	TCS_SphereWorldSpaceNormal,
	TCS_SphereCameraSpaceNormal,
	TCS_BumpSphereCameraSpaceNormal,
	TCS_BumpSphereCameraSpaceReflection,
	TCS_MAX
};

enum ETexCoordCount{
	TCN_2DCoords,
	TCN_3DCoords,
	TCN_4DCoords,
	TCN_MAX
};

enum ETexClampModeOverried{
	TCO_UseTextureMode,
	TCO_Wrap,
	TCO_Clamp,
	TCO_MAX
};

class ENGINE_API UTexModifier : public UModifier{
public:
	BYTE TexCoordSource;
	BYTE TexCoordCount;
	BYTE UClampMode;
	BYTE VClampMode;
	BITFIELD TexCoordProjected:1;

	DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds){ return NULL; }

	// Material interface.
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual BYTE RequiredUVStreams();
	virtual UBOOL GetValidated();
	virtual void SetValidated(UBOOL InValidated);
};

/*
 * TexOscillator
 */

enum ETexOscillationType{
	OT_Pan,
	OT_Stretch,
	OT_StretchRepeat,
	OT_Jitter,
	OT_MAX
};

class ENGINE_API UTexOscillator : public UTexModifier{
public:
	FLOAT UOscillationRate;
	FLOAT VOscillationRate;
	FLOAT UOscillationPhase;
	FLOAT VOscillationPhase;
	FLOAT UOscillationAmplitude;
	FLOAT VOscillationAmplitude;
	BYTE UOscillationType;
	BYTE VOscillationType;
	FLOAT UOffset;
	FLOAT VOffset;
	FMatrix M;
	FLOAT LastSu;
	FLOAT LastSv;
	FLOAT CurrentUJitter;
	FLOAT CurrentVJitter;

	DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	// UObject interface
	virtual void PostEditChange();
};

/*
 * TexPanner
 */

class ENGINE_API UTexPanner : public UTexModifier{
public:
	FRotator PanDirection;
	FLOAT PanRate;
	FMatrix M;

	DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

/*
 * TexPanner2D
 */

class ENGINE_API UTexPanner2D : public UTexModifier{
public:
	FLOAT SpeedU;
	FLOAT SpeedV;
	FLOAT OffsetU;
	FLOAT OffsetV;
	FLOAT ScaleU;
	FLOAT ScaleV;
	FLOAT ClampedSizeU;
	FLOAT ClampedSizeV;
	FMatrix M;

	DECLARE_CLASS(UTexPanner2D,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

/*
 * ScriptedTexture
 */

class ENGINE_API UScriptedTexture : public UBitmapMaterial{
public:
	FRenderTarget* RenderTarget;
	class UViewport* RenderViewport;
	class AActor* Client;
	INT Revision;
	INT OldRevision;

	DECLARE_CLASS(UScriptedTexture,UBitmapMaterial,0,Engine)

	void Render(class FRenderInterface* RI);

	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
	virtual class FBaseTexture* GetRenderInterface();
	virtual void Destroy();
	virtual void PostEditChange();
};

/*
 * TerrainMaterial
 */

struct ENGINE_API FTerrainMaterialLayer{
	class UMaterial* Texture;
	class UBitmapMaterial* AlphaWeight;
	FMatrix TextureMatrix;
};

class ENGINE_API UTerrainMaterial : public URenderedMaterial{
public:
	TArrayNoInit<FTerrainMaterialLayer> Layers;
	BYTE RenderMethod;
	BITFIELD FirstPass:1;

	DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)

	virtual UMaterial* CheckFallback();
	virtual UBOOL HasFallback();
};

/*
 * ProjectorMaterial
 */

class ENGINE_API UProjectorMaterial : public URenderedMaterial{
public:
	class UBitmapMaterial* Gradient;
	class UMaterial* Projected;
	class UMaterial* BaseMaterial;
	BYTE BaseMaterialBlending;
	BYTE FrameBufferBlending;
	FMatrix Matrix;
	FMatrix GradientMatrix;
	BITFIELD bProjected:1;
	BITFIELD bProjectOnUnlit:1;
	BITFIELD bGradient:1;
	BITFIELD bProjectOnAlpha:1;
	BITFIELD bProjectOnBackfaces:1;
	BITFIELD bStaticProjector:1;
	BITFIELD bTwoSided:1;

	DECLARE_CLASS(UProjectorMaterial,URenderedMaterial,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UProjectorMaterial)
};

/*
 * ProjectorMultiMaterial
 */

struct FProjectorRenderEntry{
	class UMaterial* ProjectedTexture;
	FMatrix Matrix;
	FVector Direction;
	FVector Origin;
	FLOAT InvMaxTraceDist;
	BITFIELD bProjectOnBackFaces:1;
};

class ENGINE_API UProjectorMultiMaterial : public URenderedMaterial{
public:
	TArrayNoInit<FProjectorRenderEntry> RenderEntries;
	INT RemainingEntries;
	class UMaterial* BaseMaterial;
	BYTE FrameBufferBlending;
	class UTexture* DefaultOpacity;
	class UHardwareShader* AddShaders[4];
	class UHardwareShader* BlendShaders[4];
	class UHardwareShader* ModShaders[4];

	DECLARE_CLASS(UProjectorMultiMaterial,URenderedMaterial,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UProjectorMultiMaterial)

	inline UHardwareShader* GetHardwareShader(int NumProjectors){
		switch(FrameBufferBlending){
		case PB_Add:
			return AddShaders[NumProjectors - 1];
		case PB_AlphaBlend:
			return BlendShaders[NumProjectors - 1];
		case PB_Modulate:
		case PB_Modulate2X:
			return ModShaders[NumProjectors - 1];
		}

		return NULL;
	}
};

/*
 * TexScaler
 */

class ENGINE_API UTexScaler : public UTexModifier{
public:
	FMatrix M;
	FLOAT UScale;
	FLOAT VScale;
	FLOAT UOffset;
	FLOAT VOffset;

	DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)

	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

/*
 * ShadowBitmapMaterial
 */

class ENGINE_API UShadowBitmapMaterial : public UBitmapMaterial{
public:
	INT TextureInterfaces;
	class AActor* ShadowActor;
	FVector LightDirection;
	FLOAT LightDistance;
	FLOAT LightFOV;
	BITFIELD Dirty:1;
	BITFIELD Invalid:1;
	BITFIELD bBlobShadow:1;
	FLOAT CullDistance;
	BYTE ShadowDarkness;
	BITFIELD bReady:1;
	FLOAT LastUpdateTime;
	class UBitmapMaterial* BlobShadow;
	class UHardwareShader* HSMip;

	DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)

	virtual void Destroy();

	virtual class FBaseTexture* GetRenderInterface();
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);

	void ClearShadowBitmap(class FRenderTarget* Target, class FRenderInterface* RI,	FColor ClearColor);
	void BlurTarget(UViewport* Viewport, class FRenderInterface* RI, FAuxRenderTarget* SourceRenderTarget, FAuxRenderTarget* DestRenderTarget);
	void UpdateShadowTexture(UViewport* Viewport);
};

/*
 * MovieTexture
 */

class ENGINE_API UMovieTexture : public UTexture{
public:
	class UMovie* Movie;
	FStringNoInit MovieFilename;
	INT FrameRate;

	DECLARE_CLASS(UMovieTexture,UTexture,0,Engine)

	// Constructor
	UMovieTexture();

	// Overrides
	virtual void Destroy();
	virtual void PostEditChange();
	virtual void ConstantTimeTick();

	// Virtual functions
	virtual void InitMovie();
};

/*
 * VertexColor
 */

class ENGINE_API UVertexColor : public URenderedMaterial{
public:
	DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};

/*
 * ConstantMaterial
 */

class ENGINE_API UConstantMaterial : public URenderedMaterial{
public:
	DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds){ return FColor(0,0,0,0); }
};

/*
 * FadeColor
 */

enum EColorFadeType{
	FC_Linear,
	FC_Sinusoidal,
	FC_MAX
};

class ENGINE_API UFadeColor : public UConstantMaterial{
public:
	FColor Color1;
	FColor Color2;
	FLOAT FadePeriod;
	FLOAT FadePhase;
	BYTE ColorFadeType;

	DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds);
};

/*
 * HardwareShaderWrapper
 */

class ENGINE_API UHardwareShaderWrapper : public URenderedMaterial{
public:
	class UHardwareShader* ShaderImplementation;

	DECLARE_CLASS(UHardwareShaderWrapper,URenderedMaterial,0,Engine)
	// Make sure derived classes implement the setup funcion
	virtual INT SetupShaderWrapper(class FRenderInterface* RI){ return 0; }

	// TimR: Use first texture as the default size for the browsers
	virtual INT MaterialUSize(){
		if(ShaderImplementation && ShaderImplementation->Textures[0])
			return ShaderImplementation->Textures[0]->MaterialUSize();

		return 0;
	}

	virtual INT MaterialVSize(){
		if(ShaderImplementation && ShaderImplementation->Textures[0])
			return ShaderImplementation->Textures[0]->MaterialVSize();

		return 0;
	}

	virtual UBOOL RequiresSorting(){
		if(ShaderImplementation)
			return ShaderImplementation->RequiresSorting();

		return 0;
	}
};

/*
 * HsHologram
 */

class ENGINE_API UHsHologram : public UHardwareShaderWrapper{
public:
	class UTexture* DiffuseTexture;
	FColor HologramColor;
	BITFIELD UseMarkerColorInstead:1;

	DECLARE_CLASS(UHsHologram,UHardwareShaderWrapper,0,Engine)
	// Make sure to implement this function in UnHardwareShaderWrapper.cpp
	virtual INT SetupShaderWrapper(class FRenderInterface* RI);
};

/*
 * ParticleMaterial
 */

struct FParticleProjectorInfo{
	class UBitmapMaterial* BitmapMaterial;
	FMatrix Matrix;
	INT Projected;
	INT BlendMode;
};

class ENGINE_API UParticleMaterial : public URenderedMaterial{
public:
	INT ParticleBlending;
	INT BlendBetweenSubdivisions;
	INT RenderTwoSided;
	INT UseTFactor;
	class UBitmapMaterial* BitmapMaterial;
	INT AlphaTest;
	INT AlphaRef;
	INT ZTest;
	INT ZWrite;
	INT Wireframe;
	BITFIELD AcceptsProjectors:1;
	INT NumProjectors;
	FParticleProjectorInfo Projectors[8];

	DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};

/*
 * Shader
 */

enum EBumpMapType{
	BMT_Static_Diffuse,
	BMT_Static_Specular,
	BMT_Static_Combined,
	BMT_Diffuse,
	BMT_Specular,
	BMT_Combined,
	BMT_MAX
};

enum ESpecularSharpness{
	BSS_Matte,
	BSS_Dull,
	BSS_Polished,
	BSS_Shiny,
	BSS_MAX
};

enum EOutputBlending{
	OB_Normal,
	OB_Masked,
	OB_Modulate,
	OB_Translucent,
	OB_Invisible,
	OB_Brighten,
	OB_Darken,
	OB_MAX
};

class ENGINE_API UShader : public URenderedMaterial{
public:
	class UMaterial* Diffuse;
	class UMaterial* Opacity;
	class UMaterial* Specular;
	class UMaterial* SpecularityMask;
	class UMaterial* SelfIllumination;
	class UMaterial* SelfIlluminationMask;
	class UMaterial* Detail;
	FLOAT DetailScale;
	class UMaterial* Bumpmap;
	class UMaterial* DiffuseEnvMap;
	BYTE BumpMapType;
	FLOAT BumpSize;
	FLOAT BumpUVScale;
	BYTE DiffuseStrength;
	BYTE DiffuseMaskStrength;
	BYTE SpecularSharpness;
	BYTE SpecularStrength;
	BYTE SpecularMaskStrength;
	BITFIELD SpecularInTheDark:1;
	BITFIELD SpecularBumpX2:1;
	BITFIELD UseTinting:1;
	FColor DiffuseColorAdd;
	FColor DiffuseColorMultiplyX2;
	FColor SpecularColorAdd;
	FColor SpecularColorMultiplyX2;
	BITFIELD bInvertCubemap:1;
	BYTE OutputBlending;
	BITFIELD TwoSided:1;
	BITFIELD Wireframe:1;
	BITFIELD ModulateStaticLighting2X:1;
	BITFIELD PerformLightingOnSpecularPass:1;

	DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
};

/*
 * VisionMode
 */

class ENGINE_API UVisionMode : public URenderedMaterial{
public:
	class UHardwareShader* VisionShader;
	class UHardwareShader* OrganicShader;
	class UHardwareShader* MechanicalShader;
	class UHardwareShader* StaticShader;
	class UHardwareShader* TargetedOrganicShader;
	class UHardwareShader* TargetedMechanicalShader;
	BITFIELD DrawRegularWorld:1;
	BITFIELD BloomOveride:1;
	BYTE BloomOverideValue;
	BYTE BloomOverideFilter;
	BYTE MotionBlur;
	BYTE Noise;
	INT BlurPasses;
	BITFIELD ExtractGlow:1;
	BITFIELD OverideFog:1;
	FColor DistanceFogColor;
	FLOAT DistanceFogStart;
	FLOAT DistanceFogEnd;
	FLOAT FadeInTime;
	FLOAT FadeOutTime;
	BITFIELD FlashlightOn:1;
	class UI3DL2Listener* EAXEffect;
	class UI3DL2Listener* EAXEffectXbox;

	DECLARE_CLASS(UVisionMode,URenderedMaterial,0,Engine)
	// Make sure derived classes implement the setup funcion
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade=1.f){ return VisionShader; }
	virtual UHardwareShader* GetSkelMeshShader(UViewport* Viewport, AActor* Actor, float Fade=1.f){ return NULL; }
	virtual UHardwareShader* GetStaticMeshShader(UViewport* Viewport, AActor* Actor, float Fade=1.f){ return NULL; }

	// TimR: Use first texture as the default size for the browsers
	virtual INT MaterialUSize(){
		if(VisionShader && VisionShader->Textures[0])
			return VisionShader->Textures[0]->MaterialUSize();

		return 0;
	}

	virtual INT MaterialVSize(){
		if(VisionShader && VisionShader->Textures[0])
			return VisionShader->Textures[0]->MaterialUSize();

		return 0;
	}

	virtual UBOOL RequiresSorting(){
		if(VisionShader)
			return VisionShader->RequiresSorting();

		return 0;
	}
};

/*
 * VisionModeDistort
 */

class ENGINE_API UVisionModeDistort : public UVisionMode{
public:
	FLOAT BumpSize;
	FLOAT BumpScaleX;
	FLOAT BumpScaleY;
	FLOAT PanSpeedX;
	FLOAT PanSpeedY;
	class UHardwareShader* AltVisionShader;

	DECLARE_CLASS(UVisionModeDistort,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
};

/*
 * VisionModeEnhance
 */

class ENGINE_API UVisionModeEnhance : public UVisionMode{
public:
	DECLARE_CLASS(UVisionModeEnhance,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
};

/*
 * VisionModeHit
 */

class ENGINE_API UVisionModeHit : public UVisionMode{
public:
	DECLARE_CLASS(UVisionModeHit,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
};

/*
 * VisionModeNormal
 */

class ENGINE_API UVisionModeNormal : public UVisionMode{
public:
	DECLARE_CLASS(UVisionModeNormal,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
	virtual UHardwareShader* GetSkelMeshShader(UViewport* Viewport, AActor* Actor, float Fade/*=1.f */);
};

/*
 * VisionModeScavDrill
 */

class ENGINE_API UVisionModeScavDrill : public UVisionMode{
public:
	FLOAT MaxBumpSize;
	FLOAT MaxSpinSpeed;
	FLOAT MinTextureScale;
	FLOAT MaxTextureScale;
	class UHardwareShader* AltVisionShader;

	DECLARE_CLASS(UVisionModeScavDrill,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
};

/*
 * VisionModeSniper
 */

class ENGINE_API UVisionModeSniper : public UVisionMode{
public:
	DECLARE_CLASS(UVisionModeSniper,UVisionMode,0,Engine)
	// Make sure to implement this function in UnVisionModes.cpp
	virtual UHardwareShader* SetVisionMode(UViewport* Viewport, class UProxyBitmapMaterial* RenderedWorldTexture, class UProxyBitmapMaterial* BlurTargetTexture, int TargetSizeX, int TargetSizeY, float Fade/*=1.f */);
	virtual UHardwareShader* GetSkelMeshShader(UViewport* Viewport, AActor* Actor, float Fade/*=1.f */);
};

/*
 * MeshObject
 */

enum EImpSpaceMode{
	ISM_Sprite,
	ISM_Fixed,
	ISM_PivotVertical,
	ISM_PivotHorizontal,
	ISM_MAX
};

enum EImpDrawMode{
	IDM_Normal,
	IDM_Fading,
	IDM_MAX
};

enum EImpLightMode{
	ILM_Unlit,
	ILM_PseudoShaded,
	ILM_Uniform,
	ILM_MAX
};

enum EMeshSectionMethod{
	MSM_SmoothOnly,
	MSM_RigidOnly,
	MSM_Mixed,
	MSM_SinglePiece,
	MSM_ForcedRigid,
	MSM_MAX
};

class ENGINE_API UMeshObject : public UObject{
public:
	DECLARE_CLASS(UMeshObject,UObject,0,Mod)
	NO_DEFAULT_CONSTRUCTOR(UMeshObject)
};

/*
 * ParticleEmitter
 */

enum EBlendMode{
	BM_MODULATE,
	BM_MODULATE2X,
	BM_MODULATE4X,
	BM_ADD,
	BM_ADDSIGNED,
	BM_ADDSIGNED2X,
	BM_SUBTRACT,
	BM_ADDSMOOTH,
	BM_BLENDDIFFUSEALPHA,
	BM_BLENDTEXTUREALPHA,
	BM_BLENDFACTORALPHA,
	BM_BLENDTEXTUREALPHAPM,
	BM_BLENDCURRENTALPHA,
	BM_PREMODULATE,
	BM_MODULATEALPHA_ADDCOLOR,
	BM_MODULATEINVALPHA_ADDCOLOR,
	BM_MODULATEINVCOLOR_ADDALPHA,
	BM_HACK,
	BM_MAX
};

enum EParticleDrawStyle{
	PTDS_Regular,
	PTDS_AlphaBlend,
	PTDS_Modulated,
	PTDS_Translucent,
	PTDS_AlphaModulate_MightNotFogCorrectly,
	PTDS_Darken,
	PTDS_Brighten,
	PTDS_MAX
};

enum EParticleCoordinateSystem{
	PTCS_Independent,
	PTCS_Relative,
	PTCS_Absolute,
	PTCS_MAX
};

enum EParticleVelocityDirection{
	PTVD_None,
	PTVD_StartPositionAndOwner,
	PTVD_OwnerAndStartPosition,
	PTVD_AddRadial,
	PTVD_MAX
};

enum EParticleStartLocationShape{
	PTLS_Box,
	PTLS_MovingBox,
	PTLS_Sphere,
	PTLS_Polar,
	PTLS_All,
	PTLS_MAX
};

enum EParticleEffectAxis{
	PTEA_NegativeX,
	PTEA_PositiveZ,
	PTEA_MAX
};

enum EParticleCollisionSound{
	PTSC_None,
	PTSC_LinearGlobal,
	PTSC_LinearLocal,
	PTSC_Random,
	PTSC_MAX
};

enum ESkelLocationUpdate{
	PTSU_None,
	PTSU_SpawnOffset,
	PTSU_Location,
	PTSU_MAX
};

struct FParticleTimeScale{
	FLOAT RelativeTime;
	FLOAT RelativeSize;
};

struct FParticleColorScale{
	FLOAT RelativeTime;
	FColor Color;
};

struct FParticle{
	FVector Location;
	FVector OldLocation;
	FVector Velocity;
	FVector StartSize;
	FVector SpinsPerSecond;
	FVector StartSpin;
	FVector RevolutionCenter;
	FVector RevolutionsPerSecond;
	FVector RevolutionsMultiplier;
	FVector Size;
	FVector StartLocation;
	FVector ColorMultiplier;
	FVector OldMeshLocation;
	FColor Color;
	FLOAT Time;
	FLOAT MaxLifetime;
	INT HitCount;
	INT Flags;
	INT Subdivision;
	INT BoneIndex;
};

struct FParticleSound{
	class USound* Sound;
	FRange Radius;
	FRange Pitch;
	INT Weight;
	FRange Volume;
	FRange Probability;
};


class ENGINE_API UParticleEmitter : public UObject{
public:
	FVector Acceleration;
	FVector ExtentMultiplier;
	FRangeVector DampingFactorRange;
	TArrayNoInit<FPlane> CollisionPlanes;
	FRange MaxCollisions;
	INT SpawnFromOtherEmitter;
	INT SpawnAmount;
	FRangeVector SpawnedVelocityScaleRange;
	TArrayNoInit<FParticleColorScale> ColorScale;
	FLOAT ColorScaleRepeats;
	FRangeVector ColorMultiplierRange;
	FLOAT Opacity;
	FPlane FadeOutFactor;
	FLOAT FadeOutStartTime;
	FPlane FadeInFactor;
	FLOAT FadeInEndTime;
	BYTE CoordinateSystem;
	INT MaxParticles;
	BYTE EffectAxis;
	FRange AutoResetTimeRange;
	FStringNoInit Name;
	FVector StartLocationOffset;
	FRangeVector StartLocationRange;
	FRangeVector EndLocationRange;
	FRangeVector CurrentLocationRange;
	FLOAT LocationChangeTime;
	FLOAT LocationSpentTime;
	INT AddLocationFromOtherEmitter;
	BYTE StartLocationShape;
	FRange SphereRadiusRange;
	FRangeVector StartLocationPolarRange;
	INT AlphaRef;
	FRangeVector RevolutionCenterOffsetRange;
	FRangeVector RevolutionsPerSecondRange;
	FRotator RotationOffset;
	FVector SpinCCWorCW;
	FRangeVector SpinsPerSecondRange;
	FRangeVector StartSpinRange;
	FRangeVector RotationDampingFactorRange;
	TArrayNoInit<FParticleTimeScale> SizeScale;
	FLOAT SizeScaleRepeats;
	FRangeVector StartSizeRange;
	BYTE UseSkeletalLocationAs;
	FRange RelativeBoneIndexRange;
	TArrayNoInit<FName> SkeletalBoneNames;
	TArrayNoInit<INT> SkeletalBoneIndices;
	class USound* CollideSound;
	FLOAT CollisionSoundProbability;
	FLOAT ParticlesPerSecond;
	FLOAT InitialParticlesPerSecond;
	BYTE DrawStyle;
	class UTexture* Texture;
	INT TextureUSubdivisions;
	INT TextureVSubdivisions;
	TArrayNoInit<FLOAT> SubdivisionScale;
	INT SubdivisionStart;
	INT SubdivisionEnd;
	BITFIELD BlendBetweenSubdivisions:1;
	BITFIELD UseSubdivisionScale:1;
	BITFIELD UseRandomSubdivision:1;
	FLOAT SecondsBeforeInactive;
	FLOAT MinSquaredVelocity;
	FRange InitialTimeRange;
	FRange LifetimeRange;
	FRange InitialDelayRange;
	FRangeVector StartVelocityRange;
	FRange StartVelocityRadialRange;
	FVector MaxAbsVelocity;
	FRangeVector VelocityLossRange;
	FLOAT WarmupTicksPerSecond;
	FLOAT RelativeWarmupTime;
	class AEmitter* Owner;
	FLOAT InactiveTime;
	TArrayNoInit<FParticle> Particles;
	INT ParticleIndex;
	INT ActiveParticles;
	FLOAT PPSFraction;
	FBox BoundingBox;
	FVector RealExtentMultiplier;
	INT OtherIndex;
	FLOAT InitialDelay;
	FVector GlobalOffset;
	FLOAT TimeTillReset;
	INT PS2Data;
	INT MaxActiveParticles;
	INT CurrentCollisionSoundIndex;
	INT CurrentSpawningSoundIndex;
	INT CurrentMeshSpawningIndex;
	FLOAT MaxSizeScale;
	INT KillPending;
	INT DeferredParticles;
	FVector RealMeshNormal;
	TArrayNoInit<FVector> MeshVertsAndNormals;
	BITFIELD UseCollision:1;
	BITFIELD UseCollisionPlanes:1;
	BITFIELD UseMaxCollisions:1;
	BITFIELD UseSpawnedVelocityScale:1;
	BITFIELD UseColorScale:1;
	BITFIELD FadeIn:1;
	BITFIELD FadeOut:1;
	BITFIELD ResetAfterChange:1;
	BITFIELD RespawnDeadParticles:1;
	BITFIELD AutoDestroy:1;
	BITFIELD AutoReset:1;
	BITFIELD Disabled:1;
	BITFIELD DisableFogging:1;
	BITFIELD VelocityFromMesh:1;
	BITFIELD UniformMeshScale:1;
	BITFIELD UniformVelocityScale:1;
	BITFIELD UseColorFromMesh:1;
	BITFIELD SpawnOnlyInDirectionOfNormal:1;
	BITFIELD AlphaTest:1;
	BITFIELD AcceptsProjectors:1;
	BITFIELD ZTest:1;
	BITFIELD ZWrite:1;
	BITFIELD WorldDistortion:1;
	BITFIELD UseRevolution:1;
	BITFIELD UseRevolutionScale:1;
	BITFIELD SpinParticles:1;
	BITFIELD DampRotation:1;
	BITFIELD UseSizeScale:1;
	BITFIELD UseRegularSizeScale:1;
	BITFIELD UniformSize:1;
	BITFIELD AutomaticInitialSpawning:1;
	BITFIELD TriggerDisabled:1;
	BITFIELD ResetOnTrigger:1;
	BITFIELD UseVelocityScale:1;
	BITFIELD Initialized:1;
	BITFIELD Inactive:1;
	BITFIELD RealDisableFogging:1;
	BITFIELD AllParticlesDead:1;
	BITFIELD WarmedUp:1;

	DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
};

/*
 * MeshEmitter
 */

class ENGINE_API UMeshEmitter : public UParticleEmitter{
public:
	class UStaticMesh* StaticMesh;
	BITFIELD UseMeshBlendMode:1;
	BITFIELD RenderTwoSided:1;
	BITFIELD UseParticleColor:1;
	FVector MeshExtent;

	DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
};

/*
 * RibbonEmitter
 */

enum EGetPointAxis{
	PAXIS_OwnerX,
	PAXIS_OwnerY,
	PAXIS_OwnerZ,
	PAXIS_BoneNormal,
	PAXIS_StartBoneDirection,
	PAXIS_AxisNormal,
	PAXIS_MAX
};

struct FRibbonPoint{
	FVector Location;
	FVector AxisNormal;
	FLOAT Width;
};

class ENGINE_API URibbonEmitter : public UParticleEmitter{
public:
	FLOAT SampleRate;
	FLOAT DecayRate;
	INT NumPoints;
	FLOAT RibbonWidth;
	BYTE GetPointAxisFrom;
	FVector AxisNormal;
	FLOAT MinSampleDist;
	FLOAT MinSampleDot;
	FLOAT PointOriginOffset;
	FLOAT RibbonTextureUScale;
	FLOAT RibbonTextureVScale;
	INT NumSheets;
	TArrayNoInit<FLOAT> SheetScale;
	FVector StartBoneOffset;
	FVector EndBoneOffset;
	FName BoneNameStart;
	FName BoneNameEnd;
	TArrayNoInit<FRibbonPoint> RibbonPoints;
	BITFIELD bSamplePoints:1;
	BITFIELD bDecayPoints:1;
	BITFIELD bDecayPointsWhenStopped:1;
	BITFIELD bSyncDecayWhenKilled:1;
	BITFIELD bLengthBasedTextureU:1;
	BITFIELD bUseSheetScale:1;
	BITFIELD bUseBones:1;
	BITFIELD bUseBoneDistance:1;
	FLOAT SampleTimer;
	FLOAT DecayTimer;
	FLOAT RealSampleRate;
	FLOAT RealDecayRate;
	INT SheetsUsed;
	FRibbonPoint LastSampledPoint;
	BITFIELD bKilled:1;
	BITFIELD bDecaying:1;

	DECLARE_CLASS(URibbonEmitter,UParticleEmitter,0,Engine)
};

/*
 * SpriteEmitter
 */

enum EParticleDirectionUsage{
	PTDU_None,
	PTDU_Up,
	PTDU_Forward,
	PTDU_Normal,
	PTDU_UpAndNormal,
	PTDU_MAX
};

class ENGINE_API USpriteEmitter : public UParticleEmitter{
public:
	BYTE UseDirectionAs;
	FVector ProjectionNormal;
	FVector RealProjectionNormal;

	DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
};

/*
 * PawnAudioTable
 */

enum EPawnAudioEvent{
	PAE_Invalid,
	PAE_DieQuiet,
	PAE_DieFall,
	PAE_DieExplosion,
	PAE_DieLargeArms,
	PAE_DieSmallArms,
	PAE_DieElectricity,
	PAE_DieFire,
	PAE_HurtFall,
	PAE_HurtExplosion,
	PAE_HurtLargeArms,
	PAE_HurtMelee,
	PAE_HurtSmallArms,
	PAE_HurtElectricity,
	PAE_HurtFire,
	PAE_SpottedEnemy,
	PAE_KilledExcited,
	PAE_KilledCalm,
	PAE_HeardSomething,
	PAE_SearchAbort,
	PAE_ThrowGrenade,
	PAE_SeeGrenade,
	PAE_DropToOrange,
	PAE_LandGrunt,
	PAE_JumpGrunt,
	PAE_MeleeSwing,
	PAE_MeleeBerserk,
	PAE_Reloading,
	PAE_ScavDroidAttached,
	PAE_RetreatSolo,
	PAE_RetreatHealthy,
	PAE_RequestSupport,
	PAE_Taunt,
	PAE_OrderAttack,
	PAE_SquadOnly,
	PAE_IncapacitatedGroan,
	PAE_SpottedDroid,
	PAE_SpottedElite,
	PAE_SpottedDrone,
	PAE_SpottedWarrior,
	PAE_SpottedMerc,
	PAE_SpottedSlaver,
	PAE_SpottedSBD,
	PAE_SpottedSpider,
	PAE_SpottedScavenger,
	PAE_SpottedDroideka,
	PAE_SpottedBeast,
	PAE_SpottedGuard,
	PAE_SpottedHAM,
	PAE_LongBattle,
	PAE_LongBattleResponse,
	PAE_BattleLull,
	PAE_JetpackExplosion,
	PAE_BehindYou,
	PAE_MoveOut,
	PAE_FriendlyFireHealth,
	PAE_FriendlyFireInjured,
	PAE_CheckCorpse,
	PAE_CheckCorpseFire,
	PAE_KilledGeo,
	PAE_KilledTran,
	PAE_KilledDroid,
	PAE_KilledGuard,
	PAE_SquadLeaderDown,
	PAE_AllyDown,
	PAE_Delta07Down,
	PAE_Delta40Down,
	PAE_Delta62Down,
	PAE_DownedByGeo,
	PAE_DownedByTran,
	PAE_DownedByDroid,
	PAE_DownedByPlayer,
	PAE_DownedByTurret,
	PAE_DownedByGrenade,
	PAE_DownedByTrap,
	PAE_AssistingAlly,
	PAE_Assisting07,
	PAE_Assisting40,
	PAE_Assisting62,
	PAE_AssistingLeader,
	PAE_Revived,
	PAE_RevivedYetAgain,
	PAE_Healed,
	PAE_LeaderTooFar,
	PAE_LeaderTooFarCombat,
	PAE_RevivingInterrupted,
	PAE_HealthAcknowledge,
	PAE_GoodShotLeader,
	PAE_GoodThrowLeader,
	PAE_GoodMeleeLeader,
	PAE_AllyKilledEnemy,
	PAE_TakingCoverHealthy,
	PAE_TakingCoverIdle,
	PAE_RefuseOrder,
	PAE_RefuseCantGoThere,
	PAE_CantReviveNow,
	PAE_PlayerNotMoving,
	PAE_PlayerShootingGhosts,
	PAE_PlayerSchizo,
	PAE_PlayerKilledSelf,
	PAE_PlayerOutOfMyWay,
	PAE_PlayerInLineOfFire,
	PAE_PlayerHostile,
	PAE_MuzzleDiscipline,
	PAE_AcknowledgeOrder,
	PAE_FormUp,
	PAE_EngageTarget,
	PAE_SecurePosition,
	PAE_SearchAndDestroy,
	PAE_Recall,
	PAE_StanceHold,
	PAE_EngageTargetComplete,
	PAE_SecurePositionComplete,
	PAE_FriendlyFireMelee,
	PAE_MineSpotted,
	PAE_SetTrapInitiate,
	PAE_SetTrapConfirm,
	PAE_SetTrapCancel,
	PAE_SetTrapCancelConfirm,
	PAE_SetTrapCover,
	PAE_SetTrapProgress,
	PAE_SetTrapComplete,
	PAE_SetTrapExplode,
	PAE_SnipeInitiate,
	PAE_SnipeConfirm,
	PAE_SnipeReady,
	PAE_SnipeCancel,
	PAE_SnipeCancelConfirm,
	PAE_SnipeComplete,
	PAE_DisarmTrapInitiate,
	PAE_DisarmTrapConfirm,
	PAE_DisarmTrapCancel,
	PAE_DisarmTrapCancelConfirm,
	PAE_DisarmTrapCover,
	PAE_DisarmTrapProgress,
	PAE_DisarmTrapComplete,
	PAE_BreachInitiate,
	PAE_BreachConfirm,
	PAE_BreachCancel,
	PAE_BreachCancelConfirm,
	PAE_BreachGo,
	PAE_BreachSetCharge,
	PAE_BreachClear,
	PAE_BreachGrenade,
	PAE_BreachEnter,
	PAE_HackDoorInitiate,
	PAE_HackDoorConfirm,
	PAE_HackDoorCancel,
	PAE_HackDoorCancelConfirm,
	PAE_HackDoorProgress,
	PAE_HackDoorComplete,
	PAE_TurretInitiate,
	PAE_TurretConfirm,
	PAE_TurretCancel,
	PAE_TurretCancelConfirm,
	PAE_TurretReady,
	PAE_TurretComplete,
	PAE_HackTerminalInitiate,
	PAE_HackTerminalConfirm,
	PAE_HackTerminalCancel,
	PAE_HackTerminalCancelConfirm,
	PAE_HackTerminalProgress,
	PAE_HackTerminalComplete,
	PAE_DemolitionInitiate,
	PAE_DemolitionConfirm,
	PAE_DemolitionCancel,
	PAE_DemolitionCancelConfirm,
	PAE_DemolitionCover,
	PAE_DemolitionProgress,
	PAE_DemolitionComplete,
	PAE_DemolitionExplode,
	PAE_BactaInitiate,
	PAE_BactaCancel,
	PAE_BactaCancelConfirm,
	PAE_BactaJackIn,
	PAE_BactaNotNeeded,
	PAE_AntiArmorInitiate,
	PAE_AntiArmorConfirm,
	PAE_AntiArmorReady,
	PAE_AntiArmorCancel,
	PAE_AntiArmorCancelConfirm,
	PAE_AntiArmorComplete,
	PAE_GrenadeInitiate,
	PAE_GrenadeConfirm,
	PAE_GrenadeReady,
	PAE_GrenadeCancel,
	PAE_GrenadeCancelConfirm,
	PAE_GrenadeComplete,
	PAE_ReviveInitiate,
	PAE_ReviveInitiateSelf,
	PAE_RevivePlayerInitiate,
	PAE_ReviveCancel,
	PAE_ReviveCancelConfirm,
	PAE_MAX
};

class ENGINE_API UPawnAudioTable : public UObject{
public:
	TArrayNoInit<class USound*> Table;

	DECLARE_CLASS(UPawnAudioTable,UObject,0,Engine)
};

/*
 * PlayerInput
 */

class ENGINE_API UPlayerInput : public UObject{
public:
	BITFIELD bWasForward:1;
	BITFIELD bWasBack:1;
	BITFIELD bWasLeft:1;
	BITFIELD bWasRight:1;
	BITFIELD bEdgeForward:1;
	BITFIELD bEdgeBack:1;
	BITFIELD bEdgeLeft:1;
	BITFIELD bEdgeRight:1;
	BITFIELD bAdjustSampling:1;
	BITFIELD bInvertLook:1;
	BITFIELD bCanDClickDodge:1;
	BYTE MouseSmoothingMode;
	FLOAT MouseSmoothingStrength;
	FLOAT MouseSensitivity;
	FLOAT MouseAccelThreshold;
	FLOAT MouseSamplingTime;
	FLOAT JoyAcceleration;
	FLOAT JoyDeadZone;
	FLOAT TriggerDeadZone;
	FLOAT ButtonDeadZone;
	FLOAT ButtonHoldDelay;
	FLOAT DoubleTapThreshold;
	FLOAT JoyAccelX;
	FLOAT JoyAccelY;
	FLOAT JoyAccelU;
	FLOAT JoyAccelV;
	FLOAT JoySensitivityXY;
	FLOAT JoySensitivityUV;
	FLOAT JoyResponseCurveX[16];
	FLOAT JoyResponseCurveY[16];
	FLOAT JoyResponseCurveU[16];
	FLOAT JoyResponseCurveV[16];
	FLOAT SmoothedMouse[2];
	FLOAT ZeroTime[2];
	FLOAT SamplingTime[2];
	FLOAT MaybeTime[2];
	FLOAT OldSamples[4];
	INT MouseSamples[2];
	FLOAT JoyTimeToMaxX;
	FLOAT JoyMaxTimerX;
	FLOAT JoyTimeToMaxY;
	FLOAT JoyMaxTimerY;
	FLOAT JoyTimeToMaxU;
	FLOAT JoyMaxTimerU;
	FLOAT JoyTimeToMaxV;
	FLOAT JoyMaxTimerV;
	FLOAT DoubleClickTimer;
	FLOAT DoubleClickTime;

	// Events
	void PlayerInput(FLOAT DeltaTime);

	DECLARE_CLASS(UPlayerInput,UObject,CLASS_Transient|CLASS_Config,Engine)
	NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};

/*
 * ReachSpec
 */

class ENGINE_API UReachSpec : public UObject{
public:
	INT Distance;
	class ANavigationPoint* Start;
	class ANavigationPoint* End;
	INT reachFlags;
	BITFIELD bPruned:1;
	BITFIELD bForced:1;
	BITFIELD bJump:1;
	BITFIELD bPerch:1;
	BITFIELD bFly:1;

	FPlane PathColor();

	DECLARE_CLASS(UReachSpec,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

/*
 * SoundBase
 */

enum ESoundBattleContext{
	SBC_Either,
	SBC_BattleOnly,
	SBC_NoBattleOnly,
	SBC_MAX
};

class ENGINE_API USoundBase : public UObject{
public:
	DECLARE_CLASS(USoundBase,UObject,0,Engine)
};

/*
 * AudioParams
 */

enum EAudioGroup{
	AG_Music,
	AG_Voice,
	AG_SFX,
	AG_MAX
};

class ENGINE_API UAudioParams : public USoundBase{
public:
	BYTE Category;
	BITFIELD bDisableVoiceCues:1;
	FName ActorTag;
	FLOAT MaxVolume;
	FLOAT MinVolume;
	FLOAT MaxPitch;
	FLOAT MinPitch;
	FLOAT MaxVolumeXBox;
	FLOAT MinVolumeXBox;
	FLOAT MaxPitchXBox;
	FLOAT MinPitchXBox;
	BITFIELD NonPositional:1;
	BITFIELD NonPositionalXBoxOverride:1;
	FLOAT Radius;
	FLOAT RadiusXBox;
	BITFIELD bDisable3DOcclusion:1;
	BITFIELD bDisable3DFalloff:1;
	BITFIELD bDisable3DOcclusionXBox:1;
	BITFIELD bDisable3DFalloffXBox:1;
	FLOAT XBoxRolloffFactor;
	BITFIELD XBox6dbBoost:1;

	DECLARE_CLASS(UAudioParams,USoundBase,0,Engine)
};

/*
 * RumbleParams
 */

class ENGINE_API URumbleParams : public USoundBase{
public:
	FLOAT IntensityLeft;
	FLOAT IntensityRight;
	FLOAT OverrideRadius;
	FLOAT TimeFadeIn;
	FLOAT TimeHold;
	FLOAT TimeFadeOut;
	FLOAT CamShakeRollMag;
	FVector CamShakeOffsetMag;
	FLOAT CamShakeRollRate;
	FVector CamShakeOffsetRate;

	DECLARE_CLASS(URumbleParams,USoundBase,0,Engine)
	virtual void PostEditChange();

	inline void CalcIntensities(FLOAT TotalTime, FLOAT& Left, FLOAT& Right){
		//if(TotalTime > (TimeFadeIn + TimeHold + TimeFadeOut))
		//{ // done
			Left = 0;
			Right = 0;
		//}
		if(TotalTime < TimeFadeIn)
		{ // fade in
			float time = (TotalTime / TimeFadeIn);
			Left  = IntensityLeft * time;
			Right = IntensityRight * time;
		}
		else if(TotalTime > (TimeFadeIn + TimeHold))
		{// fade out
			float time = (TotalTime - (TimeFadeIn + TimeHold)) / TimeFadeOut;
			Left  = IntensityLeft  - (IntensityLeft  * time);
			Right = IntensityRight - (IntensityRight * time);
		}
		else
		{ // hold
			Left  = IntensityLeft;
			Right = IntensityRight;
		}
	};
};

/*
 * SoundBanter
 */

struct FBanterLine{
	class UClass* PawnClass;
	class USound* Sound;
};

class ENGINE_API USoundBanter : public USoundBase{
public:
	class UClass* PawnClass;
	FName EnumName;
	BYTE Cue;
	BYTE BattleContext;
	TArrayNoInit<FBanterLine> Lines;
	FLOAT Likelihood;
	BITFIELD Used:1;

	DECLARE_CLASS(USoundBanter,USoundBase,0,Engine)
	// AnimNotify interface.
	virtual void PostEditChange();
	virtual void PostLoad();
};

/*
 * SquadStance
 */

enum EStanceTetherObject{
	STO_None,
	STO_Leader,
	STO_Objective,
	STO_Self,
	STO_FutureObjective,
	STO_MAX
};

class ENGINE_API USquadStance : public UObject{
public:
	FStringNoInit StanceName;
	BYTE ActivateCue;
	FLOAT TetherHighPriority;
	FLOAT TetherLowPriority;
	FLOAT TetherHPActivateRadius;
	FLOAT TetherLPActivateRadius;
	FLOAT TetherHPDeactivateRadius;
	FLOAT TetherLPDeactivateRadius;
	class USound* HUDActivateSound;
	FName StanceChangeEvent;
	class UClass* NextStance;
	FLOAT NextStanceTime;
	FLOAT PreventRange;
	FLOAT IdlePreventRange;
	FLOAT BactaPreventRange;
	FLOAT BattleRestrictionTime;
	FLOAT TimeBeforeSeekingCover;
	INT HUDIconX;
	INT HUDIconY;
	BYTE PreventType;
	BYTE TetherType;
	BYTE FacingType;
	BYTE StanceType;
	BITFIELD bLeapFrog:1;
	BITFIELD bCheckCorpses:1;
	BITFIELD FavorCombatNearestTether:1;
	BITFIELD PreventTetherOneWayOnly:1;

	DECLARE_CLASS(USquadStance,UObject,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(USquadStance)
};

/*
 * Stimulus
 */

#define UCONST_SF_ProcessImmediately 0x0001
#define UCONST_SF_PassToSquad 0x0002
#define UCONST_SF_IgnoreIfNoInstigator 0x0004
#define UCONST_SF_Audible 0x0008

class ENGINE_API UStimulus : public UObject{
public:
	BYTE StimType;
	FVector Location;
	class APawn* Instigator;
	class AActor* Subject;
	INT TeamIndex;
	INT RefCount;
	INT Responses;
	FLOAT Time;

	DECLARE_CLASS(UStimulus,UObject,0,Engine)
};

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
