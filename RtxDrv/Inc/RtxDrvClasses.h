/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/

#ifndef RTXDRV_NATIVE_DEFS
#define RTXDRV_NATIVE_DEFS

#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef RTXDRV_API
#define RTXDRV_API DLL_IMPORT
#endif



class RTXDRV_API URtx : public UObject
{
public:
    FColor AnchorTriangleColor;
    BITFIELD bDrawAnchorTriangle:1 GCC_PACK(4);
    BITFIELD bCaptureMode:1;
    BITFIELD bEnableLights:1;
    TArrayNoInit<class URtxLight*> Lights GCC_PACK(4);
    TArrayNoInit<class URtxLight*> DestroyedLights;
    void execCreateLight(FFrame& Stack, void* Result);
    void execDestroyLight(FFrame& Stack, void* Result);
    void execDestroyAllLights(FFrame& Stack, void* Result);
    void execGetInstance(FFrame& Stack, void* Result);
    DECLARE_CLASS(URtx,UObject,0|CLASS_Transient|CLASS_Config,RtxDrv)
    void Init();
    void Exit();
    URtxLight* CreateLight(bool ForceDefaultConstructed = false);
    void DestroyLight(URtxLight* Light);
    void DestroyAllLights();
    void RenderLights();
    DECLARE_NATIVES(URtx)
};

enum ERtxLightType
{
    RTXLIGHT_Sphere,
    RTXLIGHT_Rect,
    RTXLIGHT_Disk,
    RTXLIGHT_Cylinder,
    RTXLIGHT_Distant,
    RTXLIGHT_MAX
};
struct RTXDRV_API FRtxLightShaping
{
    FVector Direction;
    FLOAT ConeAngleDegrees;
    FLOAT ConeSoftness;
    FLOAT FocusExponent;
};

struct RTXDRV_API FRtxSphereLight
{
    FLOAT Radius;
};

struct RTXDRV_API FRtxRectLight
{
    FVector XAxis;
    FVector YAxis;
    FLOAT XSize;
    FLOAT YSize;
    FVector Direction;
};

struct RTXDRV_API FRtxDiskLight
{
    FVector XAxis;
    FVector YAxis;
    FLOAT XRadius;
    FLOAT YRadius;
    FVector Direction;
};

struct RTXDRV_API FRtxCylinderLight
{
    FVector Axis;
    FLOAT Length;
    FLOAT Radius;
};

struct RTXDRV_API FRtxDistantLight
{
    FVector Direction;
    FLOAT AngularDiameterDegrees;
};


class RTXDRV_API URtxLight : public UObject
{
public:
    BYTE Type;
    BITFIELD bShouldBeDestroyed:1 GCC_PACK(4);
    BITFIELD bEnabled:1;
    BITFIELD bUseShaping:1;
    FVector Position GCC_PACK(4);
    FColor Color;
    FLOAT Radiance;
    FRtxLightShaping Shaping;
    FRtxSphereLight Sphere;
    FRtxRectLight Rect;
    FRtxDiskLight Disk;
    FRtxCylinderLight Cylinder;
    FRtxDistantLight Distant;
    void execUpdate(FFrame& Stack, void* Result);
    DECLARE_CLASS(URtxLight,UObject,0|CLASS_Transient,RtxDrv)
    remixapi_LightHandle_T* Handle;

    virtual void Destroy();
    virtual void PostEditChange(){ Super::PostEditChange(); Update(); }
    void Update();
    void DestroyHandle();
    DECLARE_NATIVES(URtxLight)
};



#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK

#define AUTO_INITIALIZE_REGISTRANTS_RTXDRV \
	USolidColorMaterial::StaticClass(); \
	URtx::StaticClass(); \
	URtxLight::StaticClass(); \
	URtxRenderDevice::StaticClass(); \

#endif // __STATIC_LINK

#endif // CORE_NATIVE_DEFS
