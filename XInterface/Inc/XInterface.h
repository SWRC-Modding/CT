/*===========================================================================
	C++ class definitions exported from UnrealScript.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/

#ifndef XINTERFACE_NATIVE_DEFS
#define XINTERFACE_NATIVE_DEFS

#include "../../Engine/Inc/Engine.h"
#include "../../XGame/Inc/XGame.h"

#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef XINTERFACE_API
#define XINTERFACE_API DLL_IMPORT
LINK_LIB(XInterface)
#endif

/*
 * PreCacheGame
 */

#define UCONST_PRECACHE_LEVEL 1

class XINTERFACE_API APreCacheGame : public AGameInfo{
public:
	TArrayNoInit<FString> PackageList;
	TArrayNoInit<class UObject*> Cache;
	DECLARE_CLASS(APreCacheGame,AGameInfo,CLASS_Config,XInterface)
	NO_DEFAULT_CONSTRUCTOR(APreCacheGame)
};

/*
 * MenuBase
 */

enum EMenuWidgetPlatform{
	MWP_All,
	MWP_PC,
	MWP_Console,
	MWP_MAX
};

enum EMenuScaleMode{
	MSCM_Scale,
	MSCM_Stretch,
	MSCM_Fit,
	MSCM_FitStretch,
	MSCM_MAX
};

enum MenuBoxFilterMode{
	MBFM_None,
	MBFM_Alpha,
	MBFM_Numeric,
	MBFM_AlphaNumeric,
	MBFM_MAX
};

enum ETransitionDir{
	TD_None,
	TD_Out,
	TD_In,
	TD_MAX
};

enum EHelpTextState{
	HTS_InitialHidden,
	HTS_FadeUp,
	HTS_Show,
	HTS_FadeDown,
	HTS_Hidden,
	HTS_MAX
};

struct FMenuWidgetBase{
	INT Pass;
	INT bHidden;
	BYTE Platform;
	INT bLocked;
	FName Style;
};

struct FMenuMovie : public FMenuWidgetBase{
	class UMovieTexture* MovieTex;
	FIntBox TextureCoords;
	BYTE RenderStyle;
	FColor DrawColor;
	BYTE DrawPivot;
	FLOAT PosX;
	FLOAT PosY;
	FLOAT ScaleX;
	FLOAT ScaleY;
	BYTE ScaleMode;
};

struct FMenuSprite : public FMenuWidgetBase{
	class UMaterial* WidgetTexture;
	FIntBox TextureCoords;
	BYTE RenderStyle;
	FColor DrawColor;
	BYTE DrawPivot;
	FLOAT PosX;
	FLOAT PosY;
	FLOAT ScaleX;
	FLOAT ScaleY;
	BYTE ScaleMode;
};

struct FMenuText : public FMenuWidgetBase{
	class UFont* MenuFont;
	FStringNoInit Text;
	BYTE RenderStyle;
	FColor DrawColor;
	BYTE DrawPivot;
	FLOAT PosX;
	FLOAT PosY;
	FLOAT ScaleX;
	FLOAT ScaleY;
	INT Kerning;
	FLOAT MaxSizeX;
	INT bEllipsisOnLeft;
	INT bNoFontRemapping;
	FLOAT TabStops[8];
	INT bWordWrap;
};

struct FMenuDecoText : public FMenuWidgetBase{
	class UFont* MenuFont;
	FStringNoInit TextName;
	BYTE RenderStyle;
	FColor DrawColor;
	FLOAT PosX;
	FLOAT PosY;
	FLOAT ScaleX;
	FLOAT ScaleY;
	INT ColumnCount;
	INT RowCount;
	FLOAT TimePerCharacter;
	FLOAT TimePerLineFeed;
	FLOAT TimePerLoopEnd;
	FLOAT TimePerCursorBlink;
	FLOAT CursorScale;
	FLOAT CursorOffset;
	INT bCapitalizeText;
	INT bPaused;
	class UDecoText* Text;
	FLOAT TickAccumulator;
	FLOAT BlinkAccumulator;
	INT CurrentRow;
	INT CurrentColumn;
	INT bShowCursor;
};

struct FRenderBounds : public FFloatBox{
	FLOAT PosX;
	FLOAT PosY;
};

struct FMenuActiveWidget : public FMenuWidgetBase{
	FRenderBounds ActiveArea;
	INT bHasFocus;
	INT bDisabled;
	INT bIgnoreController;
	INT ContextID;
	INT bNoMouseOverFocus;
	INT bStickyDrawFocus;
	INT bDrawFocused;
	FStringNoInit HelpText;
	FName OnFocus;
	FName OnBlur;
	FName OnSelect;
	FName OnDoubleClick;
	FName OnLeft;
	FName OnRight;
	FName OnUp;
	FName OnDown;
};

struct FMenuButton : public FMenuActiveWidget{
	FMenuSprite BackgroundBlurred;
	FMenuSprite BackgroundFocused;
	INT bRelativeBackgroundCoords;
};

struct FMenuButtonSprite : public FMenuButton{
	FMenuSprite Blurred;
	FMenuSprite Focused;
};

struct FMenuButtonText : public FMenuButton{
	FMenuText Blurred;
	FMenuText Focused;
};

struct FMenuButtonEnum : public FMenuButtonText{
	TArrayNoInit<FString> Items;
	INT Current;
	INT bNoWrap;
};

struct FMenuCheckBox : public FMenuButton{
	FName Group;
	INT bSelected;
	FName OnToggle;
};

struct FMenuCheckBoxSprite : public FMenuCheckBox{
	FMenuSprite Blurred;
	FMenuSprite Focused;
	FMenuSprite SelectedBlurred;
	FMenuSprite SelectedFocused;
};

struct FMenuCheckBoxText : public FMenuCheckBox{
	FMenuText Blurred;
	FMenuText Focused;
	FMenuText SelectedBlurred;
	FMenuText SelectedFocused;
};

struct FMenuEditBox : public FMenuButtonText{
	INT bNoSpaces;
	BYTE FilterMode;
	INT MaxLength;
	INT MinLength;
	FStringNoInit TextBackup;
	FLOAT TimePerCursorBlink;
	FLOAT CursorScale;
	FLOAT BlinkAccumulator;
	INT bShowCursor;
};

struct FMenuBindingBox : public FMenuButtonText{
	FMenuSprite BackgroundSelected;
	INT bSelected;
	FStringNoInit Alias;
	INT CurrentKey;
	FName AnimationName;
	FName OnAnim;
};

struct FMenuStringList : public FMenuWidgetBase{
	FMenuButtonText Template;
	TArrayNoInit<FMenuButtonText> Items;
	FLOAT PosX1;
	FLOAT PosY1;
	FLOAT PosX2;
	FLOAT PosY2;
	INT DisplayCount;
	INT Position;
	FName OnScroll;
};

struct FMenuLayer : public FMenuWidgetBase{
	class AMenu* Layer;
	FStringNoInit MenuClassName;
};

struct FMenuScrollBar : public FMenuCheckBoxSprite{
	INT Position;
	INT Length;
	INT DisplayCount;
	FLOAT PosX1;
	FLOAT PosY1;
	FLOAT PosX2;
	FLOAT PosY2;
	FLOAT MinScaleX;
	FLOAT MinScaleY;
	FName OnScroll;
	FLOAT ClickX;
	FLOAT ClickY;
	INT PageUpArea;
	INT PageDownArea;
};

struct FMenuProgressBar : public FMenuWidgetBase{
	FMenuSprite BarBack;
	FMenuSprite BarTop;
	FLOAT BarWidth;
	FLOAT BarHeight;
	FLOAT Low;
	FLOAT High;
	FLOAT Value;
};

struct FMenuActorLight{
	FVector Position;
	FColor Color;
	FLOAT Radius;
};

struct FMenuActor : public FMenuWidgetBase{
	class AActor* Actor;
	FLOAT FOV;
	TArrayNoInit<FMenuActorLight> Lights;
	BYTE AmbientGlow;
};

struct FMenuScrollArea : public FFloatBox{
	FName OnScrollTop;
	FName OnScrollPageUp;
	FName OnScrollLineUp;
	FName OnScrollLineDown;
	FName OnScrollPageDown;
	FName OnScrollBottom;
	FName OnScrollKey;
	INT bStickyScrollFocus;
	INT bScrollFocus;
};

struct FFontMapping{
	INT ResX;
	INT ResY;
	class UFont* OrigFont;
	class UFont* DestFont;
	FLOAT ScaleAdjustment;
};

#define UCONST_SECONDS_PER_HOUR 3600
#define UCONST_SECONDS_PER_MINUTE 60

class XINTERFACE_API AMenuBase : public AMenu{
public:
	INT WidgetInFocus;
	INT StructInFocus;
	INT WidgetInAutoFocus;
	INT StructInAutoFocus;
	INT DefaultFocusWidget;
	INT DefaultFocusStruct;
	FLOAT ResScaleX;
	FLOAT ResScaleY;
	FLOAT NormalToScreenScaleX;
	FLOAT NormalToScreenScaleY;
	FLOAT ScreenToNormalScaleX;
	FLOAT ScreenToNormalScaleY;
	BITFIELD bDeferAutoFocus:1;
	BITFIELD bDeferAutoFocusMouseMove:1;
	class UMaterial* MouseCursorTexture;
	FLOAT MouseCursorScale;
	class UMaterial* WhiteTexture;
	BITFIELD bAcceptInput:1;
	FLOAT MouseRepeatDelayInitial;
	FLOAT MouseRepeatDelaySubsequent;
	FLOAT MouseRepeatDelayCurrent;
	FStringNoInit KeyQueue;
	FLOAT KeyQueueTimeout;
	class UClass* VirtualKeyboardClass;
	BYTE CrossFadeDir;
	FLOAT CrossFadeRate;
	FLOAT CrossFadeLevel;
	BYTE ModulateDir;
	FLOAT ModulateRate;
	FLOAT ModulateLevel;
	FLOAT ModulateMin;
	class USound* SoundTweenIn;
	class USound* SoundTweenOut;
	class USound* SoundOnFocus;
	class USound* SoundOnSelect;
	class USound* SoundOnError;
	FStringNoInit ForceFeedbackOnFocus;
	FStringNoInit StringYes;
	FStringNoInit StringNo;
	FStringNoInit StringOn;
	FStringNoInit StringOff;
	FStringNoInit StringOk;
	FStringNoInit StringCancel;
	FStringNoInit StringPercent;
	FLOAT DoubleClickTime;
	FLOAT ClickTime;
	INT ClickWidget;
	FLOAT CanvasSizeX;
	FLOAT CanvasSizeY;
	BITFIELD bHasFocus:1;
	FMenuText DefaultMenuText;
	FMenuDecoText DefaultMenuDecoText;
	FMenuButtonSprite DefaultMenuButtonSprite;
	FMenuButtonText DefaultMenuButtonText;
	FMenuButtonEnum DefaultMenuButtonEnum;
	FMenuCheckBoxSprite DefaultMenuCheckBoxSprite;
	FMenuCheckBoxText DefaultMenuCheckBoxText;
	FMenuEditBox DefaultMenuEditBox;
	FMenuBindingBox DefaultMenuBindingBox;
	FMenuStringList DefaultMenuStringList;
	FMenuScrollBar DefaultMenuScrollBar;
	TArrayNoInit<FFontMapping> FontMappings;
	FMenuText HelpText;
	BYTE HelpTextState;
	FLOAT HelpTextStateDelays[5];
	FLOAT HelpTextOpacity;
	BITFIELD DrawRenderBounds:1;
	BITFIELD DrawScrollAreas:1;
	FMenuSprite OverscanWidgets[4];
	FStringNoInit BackgroundMovieName;
	FMenuMovie BackgroundMovie;
	FMenuSprite InLevelBackgroundMovieReplacement;
	FStringNoInit Args;

	void StartBackgroundMovie();
	void StopBackgroundMovie();
	void DrawMenu(class UCanvas* C, UBOOL HasFocus);
	void PostEditChange();
	void OverlayMenu(class AMenu* InOverlayMenu, FString const& Args);
	void GotoMenu(class AMenu* InTravelMenu, FString const& Args);
	void CallMenu(class AMenu* InTravelMenu, FString const& Args);
	void CloseMenu();
	void OnFocusChange();
	void OnSelectionChange();
	FString RetrieveLocalizedKeyName(INT Key);
	DECLARE_CLASS(AMenuBase,AMenu,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuBase)
};

/*
 * MenuTemplate
 */

#define UCONST_LabelTextSpacing 0.04f
#define UCONST_ListButtonSpacing 0.05f
#define UCONST_EnumButtonSpacing 0.06f

class XINTERFACE_API AMenuTemplate : public AMenuBase{
public:
	FMenuSprite FullScreen;
	FMenuSprite Darken;
	FMenuSprite Border;
	FMenuSprite BlackBorder;
	FMenuSprite Image;
	FMenuText SmallLabelText;
	FMenuText LabelText;
	FMenuText BigText;
	FMenuText StatsText;
	FMenuText HugeText;
	FMenuText FakeDecoText;
	FMenuButtonText ListButton;
	FMenuButtonText PushButton;
	FMenuButtonText PushButtonWide;
	FMenuStringList ButtonList;
	FMenuStringList SmallButtonList;
	FMenuButtonEnum EnumButton;
	FMenuButtonEnum HugeEnumButton;
	FMenuButtonSprite UpArrow;
	FMenuButtonSprite DownArrow;
	FMenuButtonSprite LeftArrow;
	FMenuButtonSprite RightArrow;
	FMenuSprite XboxButtonA;
	FMenuSprite XboxButtonB;
	FMenuSprite XboxButtonX;
	FMenuSprite XboxButtonY;
	FMenuButtonSprite VerticalScrollBarArrowUp;
	FMenuButtonSprite VerticalScrollBarArrowDown;
	FMenuScrollBar VerticalScrollBar;
	FMenuButtonSprite SpriteButtonBordered;
	FMenuButtonSprite SpriteButtonBorderedFit;
	FColor RedColor;
	FColor BlueColor;
	FColor WhiteColor;
	FMenuButtonText ButtonTextStyle1;
	FMenuSprite PlanetBorderStyle;
	FMenuSprite BorderStyle1;
	FMenuSprite BorderStyle1Clear;
	FMenuSprite BorderStyle1Opaque;
	FMenuButtonEnum ButtonEnumStyle1;
	FMenuStringList StringListStyle1;
	FMenuButtonText ButtonTextStyle2;
	DECLARE_CLASS(AMenuTemplate,AMenuBase,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplate)
};

/*
 * MenuTemplateTitled
 */

class XINTERFACE_API AMenuTemplateTitled : public AMenuTemplate{
public:
	FMenuSprite Background;
	FMenuSprite TitleStrip;
	FMenuText MenuTitle;
	FMenuSprite ControllerIcon;
	FMenuText HostText;
	FMenuText ControllerNumText;
	BITFIELD bShowGamertag:1;
	BITFIELD bShowController:1;
	BITFIELD bRequiresXOnline:1;
	FStringNoInit LiveLabel;
	FStringNoInit LiveSigningIn;
	FStringNoInit LiveSignedIn;
	FStringNoInit LiveFailed;
	FStringNoInit LiveNotInPasscode;
	FStringNoInit LiveNotIn;
	class UClass* UstaticMeshActor;
	FColor AmbientLight;
	class UMaterial* ActorMaterials[2];
	BITFIELD bAnimateStamp:1;
	DECLARE_CLASS(AMenuTemplateTitled,AMenuTemplate,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitled)
};

/*
 * MenuTemplateTitledA
 */

class XINTERFACE_API AMenuTemplateTitledA : public AMenuTemplateTitled{
public:
	FMenuSprite BottomStrip;
	FMenuSprite AButtonIcon;
	FMenuText ALabel;
	FMenuButtonText AButton;
	DECLARE_CLASS(AMenuTemplateTitledA,AMenuTemplateTitled,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitledA)
};

/*
 * MenuTemplateTitledB
 */

class XINTERFACE_API AMenuTemplateTitledB : public AMenuTemplateTitled{
public:
	FMenuSprite BottomStrip;
	FMenuSprite BButtonIcon;
	FMenuText BLabel;
	FMenuButtonText BButton;
	DECLARE_CLASS(AMenuTemplateTitledB,AMenuTemplateTitled,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitledB)
};

/*
 * MenuTemplateTitledBA
 */

class XINTERFACE_API AMenuTemplateTitledBA : public AMenuTemplateTitledB{
public:
	FMenuSprite AButtonIcon;
	FMenuText ALabel;
	FMenuButtonText AButton;
	DECLARE_CLASS(AMenuTemplateTitledBA,AMenuTemplateTitledB,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitledBA)
};

/*
 * MenuTemplateTitledBXA
 */

class XINTERFACE_API AMenuTemplateTitledBXA : public AMenuTemplateTitledBA{
public:
	FMenuSprite XButtonIcon;
	FMenuText XLabel;
	FMenuButtonText XButton;
	DECLARE_CLASS(AMenuTemplateTitledBXA,AMenuTemplateTitledBA,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitledBXA)
};

/*
 * MenuVirtualKeyboard
 */

struct FKeyLayout{
	FStringNoInit Label;
	INT Span;
	INT bAppendMargin;
	INT bIsLastInRow;
};

class XINTERFACE_API AMenuVirtualKeyboard : public AMenuTemplateTitledBXA{
public:
	FKeyLayout KeyboardLayout[39];
	FMenuSprite KeyboardBorder;
	FMenuSprite InputBorder;
	FMenuText InputText;
	FMenuButtonText Buttons[39];
	FLOAT ButtonSizeX;
	FLOAT ButtonSizeY;
	FLOAT ButtonGapX;
	FLOAT ButtonGapY;
	FLOAT MarginSize;
	FLOAT KeyboardPosX;
	FLOAT KeyboardPosY;
	INT pEditBox;
	INT MaxLength;
	INT MinLength;
	INT bNoDigits;
	INT bNoSpaces;
	FStringNoInit TextBackup;
	FStringNoInit SpaceChar;
	DECLARE_CLASS(AMenuVirtualKeyboard,AMenuTemplateTitledBXA,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuVirtualKeyboard)
};

/*
 * MenuTemplateTitledBX
 */

class XINTERFACE_API AMenuTemplateTitledBX : public AMenuTemplateTitledB{
public:
	FMenuSprite XButtonIcon;
	FMenuText XLabel;
	FMenuButtonText XButton;
	DECLARE_CLASS(AMenuTemplateTitledBX,AMenuTemplateTitledB,CLASS_Transient,XInterface)
	NO_DEFAULT_CONSTRUCTOR(AMenuTemplateTitledBX)
};

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#endif // XINTERFACE_NATIVE_DEFS
